[{
    "_id": {
      "$oid": "64fa1ed38a8d698362d89cc9"
    },
    "meta": {
      "protocolVersion": "20.0.0",
      "implementation": {
        "version": "8.10.0",
        "name": "cucumber-js"
      },
      "cpu": {
        "name": "x64"
      },
      "os": {
        "name": "linux",
        "version": "5.15.0-1039-aws"
      },
      "runtime": {
        "name": "node.js",
        "version": "14.21.3"
      }
    },
    "productMetaData": {
      "name": "mockoon (candidate META.yml missing)"
    },
    "start": {
      "timestamp": {
        "seconds": 1694113488,
        "nanos": 239000000
      }
    },
    "finish": {
      "timestamp": {
        "seconds": 1694113488,
        "nanos": 952000000
      },
      "success": false
    },
    "testCases": [
      {
        "source": {
          "data": "@method=GET @endpoint=/data/{registryname}/{versionnumber}/\nFeature: API endpoint that allows to search multiple records in the database.\n\n  @smoke\n  Scenario: Successfully obtains database users information smoke type test\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results array length is consistent with count field value\n\n  @unit @positive\n  Scenario Outline: Successfully obtains database users information\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    And filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter\n    And results array length is consistent with count field value\n\n    Examples: Valid data\n      | filter    | search | ordering   |\n      | FirstName | John   | ascending  |\n      | FirstName | Alice  | descending |\n      | FirstName | Jack   | ascending  |\n      | FirstName | Bob    | descending |\n\n  @unit @positive\n  Scenario: Receive an empty list from the database\n    Given search for a specific value and the searched value does not exist in any record in the database\n    When send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results field should be an empty array\n    And results array length is consistent with count field value\n",
          "uri": "features/data_list.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "dc6d37fb-b1e9-4890-bc6e-c26f4d6d9d95"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/",
                "id": "ca20fa97-c62d-49ab-b992-d3156dc19464"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows to search multiple records in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "683c10e8-b3da-4c55-89ef-3f8631e8d318",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "e5c511c3-14b5-4841-8fcf-4896f14f5868"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully obtains database users information smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "b4604b2a-0dad-4761-9b54-7f4ceee3af93",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "04ee97f4-4753-4c23-8b9f-e1d9cf7beac4",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "891a8af0-ea99-40ff-a010-c22ec1335cf0",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "5f034a6e-63e1-4844-bb8f-b0ca9b1fc24f",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "194dee71-bc15-44ba-af10-bd289e37bbdb",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af963390-91f9-47e5-9a46-5ce91b60949c",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "9e3f8509-b928-4f2f-9c79-5c6ea3eca542",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "1ec63bd0-3951-4502-a3f9-5792ab86451c",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "a51d1d0d-2b18-45a2-8a47-7da4c457b570",
                  "tags": [
                    {
                      "location": {
                        "line": 15,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "6a05d266-9849-454c-baff-822f283e542d"
                    },
                    {
                      "location": {
                        "line": 15,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "321d0b82-4e80-4c59-b793-5734e17a681b"
                    }
                  ],
                  "location": {
                    "line": 16,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully obtains database users information",
                  "description": "",
                  "steps": [
                    {
                      "id": "bfa8acb0-c15d-4b34-8676-07fd60a31a12",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "a014dc67-f91b-40bf-9a6d-adfd971fc613",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "1e441aee-33bb-4bf2-a6f9-e9de7a9f316a",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering"
                    },
                    {
                      "id": "473d2443-0732-48d1-8a6a-1473348737b6",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "25e545f5-303f-4b3e-a220-248bfd4389a9",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "8d8d80a0-10c5-47c4-b8b4-5370870f77ef",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af8c04ba-cb04-425f-86b8-91d3eff56406",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "ef3b61db-7f0b-4643-9cdd-457962748982",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "bcc82d4f-d052-4d7e-94b8-8a1c9b9c930d",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter"
                    },
                    {
                      "id": "d3696dd3-7e33-4be9-8e90-2538562dafe5",
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": [
                    {
                      "id": "893d2585-8b78-4459-b88d-ee92df763297",
                      "tags": [],
                      "location": {
                        "line": 28,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "8e157e3f-6a6b-41af-a009-46c62fc78181",
                        "location": {
                          "line": 29,
                          "column": 7
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 29,
                              "column": 9
                            },
                            "value": "filter"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 21
                            },
                            "value": "search"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 30
                            },
                            "value": "ordering"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "ec4d6e3f-060e-4fc8-9df7-8e416f28d478",
                          "location": {
                            "line": 30,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 21
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "4d4dbd40-d945-442c-88cf-8da442b084d2",
                          "location": {
                            "line": 31,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 21
                              },
                              "value": "Alice"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        },
                        {
                          "id": "963b1420-94d2-4997-b41a-b737b54b3b25",
                          "location": {
                            "line": 32,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 32,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 21
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "0441484a-53dd-4cba-a30c-c6495d26adf8",
                          "location": {
                            "line": 33,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 33,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 21
                              },
                              "value": "Bob"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "47e20955-8b72-4a27-88f0-d187309edfe8",
                  "tags": [
                    {
                      "location": {
                        "line": 35,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "693f590b-364e-43b1-ac44-b75c9f7bad0b"
                    },
                    {
                      "location": {
                        "line": 35,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "9549ba0a-d3b8-4f09-af28-23f249c1e0b7"
                    }
                  ],
                  "location": {
                    "line": 36,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receive an empty list from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "9201c536-5107-4722-a564-62c5d419526f",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "search for a specific value and the searched value does not exist in any record in the database"
                    },
                    {
                      "id": "fb8d4129-2bc6-4264-be81-6be760980baa",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "85865328-5761-4a1f-a3ef-9e861aea830b",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "55c91be4-c153-452f-b47c-c97d130a71e6",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "b84e25bc-1622-45fa-be56-08d711fea2d4",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "9046eca1-427e-4982-b0c6-8fd9d5184a71",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "98f73403-fd69-4a0f-b614-a6e5c52d0fb8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "580e68a4-0bd5-4915-b2cb-895ec9207ad2",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results field should be an empty array"
                    },
                    {
                      "id": "ddef19ea-e2c6-42cb-8f54-3ec41b13ae65",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_list.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 414000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 414000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 119116
              },
              "status": "PASSED"
            },
            "text": "user wants to get the database users information",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ccb"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 414000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 441000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 26126966
              },
              "status": "PASSED"
            },
            "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ccc"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 441000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 446000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5444882
              },
              "status": "PASSED"
            },
            "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ccd"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 447000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 447000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 252397
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cce"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 447000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 447000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 167883
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ccf"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 447000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 448000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 129500
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cd0"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 448000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 451000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 2970793
              },
              "status": "FAILED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cd1"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 451000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 452000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "results array length is consistent with count field value",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cd2"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "6ee25f63-7acb-4ed5-9dc3-85ff6962124d",
          "id": "568e08c9-8e51-48c5-ac9f-dcc7c8e7b169",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 412000000
          }
        },
        "finish": {
          "testCaseStartedId": "568e08c9-8e51-48c5-ac9f-dcc7c8e7b169",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 452000000
          },
          "willBeRetried": false
        },
        "name": "Successfully obtains database users information smoke type test",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89cca"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/{registryname}/{versionnumber}/\nFeature: API endpoint that allows to search multiple records in the database.\n\n  @smoke\n  Scenario: Successfully obtains database users information smoke type test\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results array length is consistent with count field value\n\n  @unit @positive\n  Scenario Outline: Successfully obtains database users information\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    And filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter\n    And results array length is consistent with count field value\n\n    Examples: Valid data\n      | filter    | search | ordering   |\n      | FirstName | John   | ascending  |\n      | FirstName | Alice  | descending |\n      | FirstName | Jack   | ascending  |\n      | FirstName | Bob    | descending |\n\n  @unit @positive\n  Scenario: Receive an empty list from the database\n    Given search for a specific value and the searched value does not exist in any record in the database\n    When send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results field should be an empty array\n    And results array length is consistent with count field value\n",
          "uri": "features/data_list.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "dc6d37fb-b1e9-4890-bc6e-c26f4d6d9d95"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/",
                "id": "ca20fa97-c62d-49ab-b992-d3156dc19464"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows to search multiple records in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "683c10e8-b3da-4c55-89ef-3f8631e8d318",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "e5c511c3-14b5-4841-8fcf-4896f14f5868"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully obtains database users information smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "b4604b2a-0dad-4761-9b54-7f4ceee3af93",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "04ee97f4-4753-4c23-8b9f-e1d9cf7beac4",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "891a8af0-ea99-40ff-a010-c22ec1335cf0",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "5f034a6e-63e1-4844-bb8f-b0ca9b1fc24f",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "194dee71-bc15-44ba-af10-bd289e37bbdb",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af963390-91f9-47e5-9a46-5ce91b60949c",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "9e3f8509-b928-4f2f-9c79-5c6ea3eca542",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "1ec63bd0-3951-4502-a3f9-5792ab86451c",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "a51d1d0d-2b18-45a2-8a47-7da4c457b570",
                  "tags": [
                    {
                      "location": {
                        "line": 15,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "6a05d266-9849-454c-baff-822f283e542d"
                    },
                    {
                      "location": {
                        "line": 15,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "321d0b82-4e80-4c59-b793-5734e17a681b"
                    }
                  ],
                  "location": {
                    "line": 16,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully obtains database users information",
                  "description": "",
                  "steps": [
                    {
                      "id": "bfa8acb0-c15d-4b34-8676-07fd60a31a12",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "a014dc67-f91b-40bf-9a6d-adfd971fc613",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "1e441aee-33bb-4bf2-a6f9-e9de7a9f316a",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering"
                    },
                    {
                      "id": "473d2443-0732-48d1-8a6a-1473348737b6",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "25e545f5-303f-4b3e-a220-248bfd4389a9",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "8d8d80a0-10c5-47c4-b8b4-5370870f77ef",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af8c04ba-cb04-425f-86b8-91d3eff56406",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "ef3b61db-7f0b-4643-9cdd-457962748982",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "bcc82d4f-d052-4d7e-94b8-8a1c9b9c930d",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter"
                    },
                    {
                      "id": "d3696dd3-7e33-4be9-8e90-2538562dafe5",
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": [
                    {
                      "id": "893d2585-8b78-4459-b88d-ee92df763297",
                      "tags": [],
                      "location": {
                        "line": 28,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "8e157e3f-6a6b-41af-a009-46c62fc78181",
                        "location": {
                          "line": 29,
                          "column": 7
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 29,
                              "column": 9
                            },
                            "value": "filter"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 21
                            },
                            "value": "search"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 30
                            },
                            "value": "ordering"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "ec4d6e3f-060e-4fc8-9df7-8e416f28d478",
                          "location": {
                            "line": 30,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 21
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "4d4dbd40-d945-442c-88cf-8da442b084d2",
                          "location": {
                            "line": 31,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 21
                              },
                              "value": "Alice"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        },
                        {
                          "id": "963b1420-94d2-4997-b41a-b737b54b3b25",
                          "location": {
                            "line": 32,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 32,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 21
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "0441484a-53dd-4cba-a30c-c6495d26adf8",
                          "location": {
                            "line": 33,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 33,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 21
                              },
                              "value": "Bob"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "47e20955-8b72-4a27-88f0-d187309edfe8",
                  "tags": [
                    {
                      "location": {
                        "line": 35,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "693f590b-364e-43b1-ac44-b75c9f7bad0b"
                    },
                    {
                      "location": {
                        "line": 35,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "9549ba0a-d3b8-4f09-af28-23f249c1e0b7"
                    }
                  ],
                  "location": {
                    "line": 36,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receive an empty list from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "9201c536-5107-4722-a564-62c5d419526f",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "search for a specific value and the searched value does not exist in any record in the database"
                    },
                    {
                      "id": "fb8d4129-2bc6-4264-be81-6be760980baa",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "85865328-5761-4a1f-a3ef-9e861aea830b",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "55c91be4-c153-452f-b47c-c97d130a71e6",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "b84e25bc-1622-45fa-be56-08d711fea2d4",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "9046eca1-427e-4982-b0c6-8fd9d5184a71",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "98f73403-fd69-4a0f-b614-a6e5c52d0fb8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "580e68a4-0bd5-4915-b2cb-895ec9207ad2",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results field should be an empty array"
                    },
                    {
                      "id": "ddef19ea-e2c6-42cb-8f54-3ec41b13ae65",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_list.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 452000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 452000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 34545
              },
              "status": "PASSED"
            },
            "text": "user wants to get the database users information",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cd4"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 452000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 457000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4749089
              },
              "status": "PASSED"
            },
            "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cd5"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 457000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 457000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 201130
              },
              "status": "PASSED"
            },
            "text": "filter users information by using query parameters \"John\" as search and \"FirstName\" as filter and \"ascending\" as ordering",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cd6"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 457000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 463000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5808530
              },
              "status": "PASSED"
            },
            "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cd7"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 464000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 464000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 64962
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cd8"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 464000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 464000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 68211
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cd9"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 464000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 464000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 46312
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cda"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 464000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 465000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 414296
              },
              "status": "FAILED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cdb"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 465000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 465000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} is filtered by \"John\" and \"FirstName\" provided in the query parameter",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cdc"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 465000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 465000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "results array length is consistent with count field value",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cdd"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "56fd4f8f-0064-45df-bc13-2bdd5c44227e",
          "id": "3c1b5f81-843a-453b-933b-da747ee5c04d",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 452000000
          }
        },
        "finish": {
          "testCaseStartedId": "3c1b5f81-843a-453b-933b-da747ee5c04d",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 465000000
          },
          "willBeRetried": false
        },
        "name": "Successfully obtains database users information",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89cd3"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/{registryname}/{versionnumber}/\nFeature: API endpoint that allows to search multiple records in the database.\n\n  @smoke\n  Scenario: Successfully obtains database users information smoke type test\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results array length is consistent with count field value\n\n  @unit @positive\n  Scenario Outline: Successfully obtains database users information\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    And filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter\n    And results array length is consistent with count field value\n\n    Examples: Valid data\n      | filter    | search | ordering   |\n      | FirstName | John   | ascending  |\n      | FirstName | Alice  | descending |\n      | FirstName | Jack   | ascending  |\n      | FirstName | Bob    | descending |\n\n  @unit @positive\n  Scenario: Receive an empty list from the database\n    Given search for a specific value and the searched value does not exist in any record in the database\n    When send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results field should be an empty array\n    And results array length is consistent with count field value\n",
          "uri": "features/data_list.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "dc6d37fb-b1e9-4890-bc6e-c26f4d6d9d95"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/",
                "id": "ca20fa97-c62d-49ab-b992-d3156dc19464"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows to search multiple records in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "683c10e8-b3da-4c55-89ef-3f8631e8d318",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "e5c511c3-14b5-4841-8fcf-4896f14f5868"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully obtains database users information smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "b4604b2a-0dad-4761-9b54-7f4ceee3af93",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "04ee97f4-4753-4c23-8b9f-e1d9cf7beac4",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "891a8af0-ea99-40ff-a010-c22ec1335cf0",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "5f034a6e-63e1-4844-bb8f-b0ca9b1fc24f",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "194dee71-bc15-44ba-af10-bd289e37bbdb",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af963390-91f9-47e5-9a46-5ce91b60949c",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "9e3f8509-b928-4f2f-9c79-5c6ea3eca542",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "1ec63bd0-3951-4502-a3f9-5792ab86451c",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "a51d1d0d-2b18-45a2-8a47-7da4c457b570",
                  "tags": [
                    {
                      "location": {
                        "line": 15,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "6a05d266-9849-454c-baff-822f283e542d"
                    },
                    {
                      "location": {
                        "line": 15,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "321d0b82-4e80-4c59-b793-5734e17a681b"
                    }
                  ],
                  "location": {
                    "line": 16,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully obtains database users information",
                  "description": "",
                  "steps": [
                    {
                      "id": "bfa8acb0-c15d-4b34-8676-07fd60a31a12",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "a014dc67-f91b-40bf-9a6d-adfd971fc613",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "1e441aee-33bb-4bf2-a6f9-e9de7a9f316a",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering"
                    },
                    {
                      "id": "473d2443-0732-48d1-8a6a-1473348737b6",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "25e545f5-303f-4b3e-a220-248bfd4389a9",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "8d8d80a0-10c5-47c4-b8b4-5370870f77ef",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af8c04ba-cb04-425f-86b8-91d3eff56406",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "ef3b61db-7f0b-4643-9cdd-457962748982",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "bcc82d4f-d052-4d7e-94b8-8a1c9b9c930d",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter"
                    },
                    {
                      "id": "d3696dd3-7e33-4be9-8e90-2538562dafe5",
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": [
                    {
                      "id": "893d2585-8b78-4459-b88d-ee92df763297",
                      "tags": [],
                      "location": {
                        "line": 28,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "8e157e3f-6a6b-41af-a009-46c62fc78181",
                        "location": {
                          "line": 29,
                          "column": 7
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 29,
                              "column": 9
                            },
                            "value": "filter"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 21
                            },
                            "value": "search"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 30
                            },
                            "value": "ordering"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "ec4d6e3f-060e-4fc8-9df7-8e416f28d478",
                          "location": {
                            "line": 30,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 21
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "4d4dbd40-d945-442c-88cf-8da442b084d2",
                          "location": {
                            "line": 31,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 21
                              },
                              "value": "Alice"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        },
                        {
                          "id": "963b1420-94d2-4997-b41a-b737b54b3b25",
                          "location": {
                            "line": 32,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 32,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 21
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "0441484a-53dd-4cba-a30c-c6495d26adf8",
                          "location": {
                            "line": 33,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 33,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 21
                              },
                              "value": "Bob"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "47e20955-8b72-4a27-88f0-d187309edfe8",
                  "tags": [
                    {
                      "location": {
                        "line": 35,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "693f590b-364e-43b1-ac44-b75c9f7bad0b"
                    },
                    {
                      "location": {
                        "line": 35,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "9549ba0a-d3b8-4f09-af28-23f249c1e0b7"
                    }
                  ],
                  "location": {
                    "line": 36,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receive an empty list from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "9201c536-5107-4722-a564-62c5d419526f",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "search for a specific value and the searched value does not exist in any record in the database"
                    },
                    {
                      "id": "fb8d4129-2bc6-4264-be81-6be760980baa",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "85865328-5761-4a1f-a3ef-9e861aea830b",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "55c91be4-c153-452f-b47c-c97d130a71e6",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "b84e25bc-1622-45fa-be56-08d711fea2d4",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "9046eca1-427e-4982-b0c6-8fd9d5184a71",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "98f73403-fd69-4a0f-b614-a6e5c52d0fb8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "580e68a4-0bd5-4915-b2cb-895ec9207ad2",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results field should be an empty array"
                    },
                    {
                      "id": "ddef19ea-e2c6-42cb-8f54-3ec41b13ae65",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_list.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 465000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 465000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 27956
              },
              "status": "PASSED"
            },
            "text": "user wants to get the database users information",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cdf"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 465000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 470000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4710527
              },
              "status": "PASSED"
            },
            "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ce0"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 470000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 471000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 68117
              },
              "status": "PASSED"
            },
            "text": "filter users information by using query parameters \"Alice\" as search and \"FirstName\" as filter and \"descending\" as ordering",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ce1"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 471000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 475000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4579938
              },
              "status": "PASSED"
            },
            "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ce2"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 475000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 476000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 81273
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ce3"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 476000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 476000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 58464
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ce4"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 476000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 476000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 44945
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ce5"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 476000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 477000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 336463
              },
              "status": "FAILED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ce6"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 477000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 477000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} is filtered by \"Alice\" and \"FirstName\" provided in the query parameter",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ce7"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 477000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 477000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "results array length is consistent with count field value",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ce8"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "669208e9-71c1-4b5e-bbe9-3a9d9b205efa",
          "id": "350fc438-c187-42a2-b2a3-c9f0c7f4c530",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 465000000
          }
        },
        "finish": {
          "testCaseStartedId": "350fc438-c187-42a2-b2a3-c9f0c7f4c530",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 477000000
          },
          "willBeRetried": false
        },
        "name": "Successfully obtains database users information",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89cde"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/{registryname}/{versionnumber}/\nFeature: API endpoint that allows to search multiple records in the database.\n\n  @smoke\n  Scenario: Successfully obtains database users information smoke type test\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results array length is consistent with count field value\n\n  @unit @positive\n  Scenario Outline: Successfully obtains database users information\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    And filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter\n    And results array length is consistent with count field value\n\n    Examples: Valid data\n      | filter    | search | ordering   |\n      | FirstName | John   | ascending  |\n      | FirstName | Alice  | descending |\n      | FirstName | Jack   | ascending  |\n      | FirstName | Bob    | descending |\n\n  @unit @positive\n  Scenario: Receive an empty list from the database\n    Given search for a specific value and the searched value does not exist in any record in the database\n    When send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results field should be an empty array\n    And results array length is consistent with count field value\n",
          "uri": "features/data_list.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "dc6d37fb-b1e9-4890-bc6e-c26f4d6d9d95"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/",
                "id": "ca20fa97-c62d-49ab-b992-d3156dc19464"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows to search multiple records in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "683c10e8-b3da-4c55-89ef-3f8631e8d318",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "e5c511c3-14b5-4841-8fcf-4896f14f5868"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully obtains database users information smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "b4604b2a-0dad-4761-9b54-7f4ceee3af93",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "04ee97f4-4753-4c23-8b9f-e1d9cf7beac4",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "891a8af0-ea99-40ff-a010-c22ec1335cf0",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "5f034a6e-63e1-4844-bb8f-b0ca9b1fc24f",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "194dee71-bc15-44ba-af10-bd289e37bbdb",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af963390-91f9-47e5-9a46-5ce91b60949c",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "9e3f8509-b928-4f2f-9c79-5c6ea3eca542",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "1ec63bd0-3951-4502-a3f9-5792ab86451c",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "a51d1d0d-2b18-45a2-8a47-7da4c457b570",
                  "tags": [
                    {
                      "location": {
                        "line": 15,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "6a05d266-9849-454c-baff-822f283e542d"
                    },
                    {
                      "location": {
                        "line": 15,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "321d0b82-4e80-4c59-b793-5734e17a681b"
                    }
                  ],
                  "location": {
                    "line": 16,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully obtains database users information",
                  "description": "",
                  "steps": [
                    {
                      "id": "bfa8acb0-c15d-4b34-8676-07fd60a31a12",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "a014dc67-f91b-40bf-9a6d-adfd971fc613",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "1e441aee-33bb-4bf2-a6f9-e9de7a9f316a",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering"
                    },
                    {
                      "id": "473d2443-0732-48d1-8a6a-1473348737b6",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "25e545f5-303f-4b3e-a220-248bfd4389a9",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "8d8d80a0-10c5-47c4-b8b4-5370870f77ef",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af8c04ba-cb04-425f-86b8-91d3eff56406",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "ef3b61db-7f0b-4643-9cdd-457962748982",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "bcc82d4f-d052-4d7e-94b8-8a1c9b9c930d",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter"
                    },
                    {
                      "id": "d3696dd3-7e33-4be9-8e90-2538562dafe5",
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": [
                    {
                      "id": "893d2585-8b78-4459-b88d-ee92df763297",
                      "tags": [],
                      "location": {
                        "line": 28,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "8e157e3f-6a6b-41af-a009-46c62fc78181",
                        "location": {
                          "line": 29,
                          "column": 7
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 29,
                              "column": 9
                            },
                            "value": "filter"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 21
                            },
                            "value": "search"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 30
                            },
                            "value": "ordering"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "ec4d6e3f-060e-4fc8-9df7-8e416f28d478",
                          "location": {
                            "line": 30,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 21
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "4d4dbd40-d945-442c-88cf-8da442b084d2",
                          "location": {
                            "line": 31,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 21
                              },
                              "value": "Alice"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        },
                        {
                          "id": "963b1420-94d2-4997-b41a-b737b54b3b25",
                          "location": {
                            "line": 32,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 32,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 21
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "0441484a-53dd-4cba-a30c-c6495d26adf8",
                          "location": {
                            "line": 33,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 33,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 21
                              },
                              "value": "Bob"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "47e20955-8b72-4a27-88f0-d187309edfe8",
                  "tags": [
                    {
                      "location": {
                        "line": 35,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "693f590b-364e-43b1-ac44-b75c9f7bad0b"
                    },
                    {
                      "location": {
                        "line": 35,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "9549ba0a-d3b8-4f09-af28-23f249c1e0b7"
                    }
                  ],
                  "location": {
                    "line": 36,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receive an empty list from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "9201c536-5107-4722-a564-62c5d419526f",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "search for a specific value and the searched value does not exist in any record in the database"
                    },
                    {
                      "id": "fb8d4129-2bc6-4264-be81-6be760980baa",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "85865328-5761-4a1f-a3ef-9e861aea830b",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "55c91be4-c153-452f-b47c-c97d130a71e6",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "b84e25bc-1622-45fa-be56-08d711fea2d4",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "9046eca1-427e-4982-b0c6-8fd9d5184a71",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "98f73403-fd69-4a0f-b614-a6e5c52d0fb8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "580e68a4-0bd5-4915-b2cb-895ec9207ad2",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results field should be an empty array"
                    },
                    {
                      "id": "ddef19ea-e2c6-42cb-8f54-3ec41b13ae65",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_list.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 477000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 477000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 28759
              },
              "status": "PASSED"
            },
            "text": "user wants to get the database users information",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cea"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 477000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 482000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4427884
              },
              "status": "PASSED"
            },
            "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ceb"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 482000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 482000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 66900
              },
              "status": "PASSED"
            },
            "text": "filter users information by using query parameters \"Jack\" as search and \"FirstName\" as filter and \"ascending\" as ordering",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cec"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 482000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 486000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4345199
              },
              "status": "PASSED"
            },
            "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ced"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 486000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 487000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 46763
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cee"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 487000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 487000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 48225
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cef"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 487000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 487000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 45287
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cf0"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 487000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 487000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 304636
              },
              "status": "FAILED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cf1"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 488000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 488000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} is filtered by \"Jack\" and \"FirstName\" provided in the query parameter",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cf2"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 488000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 488000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "results array length is consistent with count field value",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cf3"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "03cbb54a-c8b4-4516-a4c7-8202a783dc9b",
          "id": "cb331ac1-7c95-4b61-af31-35020ac9bf62",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 477000000
          }
        },
        "finish": {
          "testCaseStartedId": "cb331ac1-7c95-4b61-af31-35020ac9bf62",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 488000000
          },
          "willBeRetried": false
        },
        "name": "Successfully obtains database users information",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89ce9"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/{registryname}/{versionnumber}/\nFeature: API endpoint that allows to search multiple records in the database.\n\n  @smoke\n  Scenario: Successfully obtains database users information smoke type test\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results array length is consistent with count field value\n\n  @unit @positive\n  Scenario Outline: Successfully obtains database users information\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    And filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter\n    And results array length is consistent with count field value\n\n    Examples: Valid data\n      | filter    | search | ordering   |\n      | FirstName | John   | ascending  |\n      | FirstName | Alice  | descending |\n      | FirstName | Jack   | ascending  |\n      | FirstName | Bob    | descending |\n\n  @unit @positive\n  Scenario: Receive an empty list from the database\n    Given search for a specific value and the searched value does not exist in any record in the database\n    When send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results field should be an empty array\n    And results array length is consistent with count field value\n",
          "uri": "features/data_list.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "dc6d37fb-b1e9-4890-bc6e-c26f4d6d9d95"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/",
                "id": "ca20fa97-c62d-49ab-b992-d3156dc19464"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows to search multiple records in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "683c10e8-b3da-4c55-89ef-3f8631e8d318",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "e5c511c3-14b5-4841-8fcf-4896f14f5868"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully obtains database users information smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "b4604b2a-0dad-4761-9b54-7f4ceee3af93",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "04ee97f4-4753-4c23-8b9f-e1d9cf7beac4",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "891a8af0-ea99-40ff-a010-c22ec1335cf0",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "5f034a6e-63e1-4844-bb8f-b0ca9b1fc24f",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "194dee71-bc15-44ba-af10-bd289e37bbdb",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af963390-91f9-47e5-9a46-5ce91b60949c",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "9e3f8509-b928-4f2f-9c79-5c6ea3eca542",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "1ec63bd0-3951-4502-a3f9-5792ab86451c",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "a51d1d0d-2b18-45a2-8a47-7da4c457b570",
                  "tags": [
                    {
                      "location": {
                        "line": 15,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "6a05d266-9849-454c-baff-822f283e542d"
                    },
                    {
                      "location": {
                        "line": 15,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "321d0b82-4e80-4c59-b793-5734e17a681b"
                    }
                  ],
                  "location": {
                    "line": 16,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully obtains database users information",
                  "description": "",
                  "steps": [
                    {
                      "id": "bfa8acb0-c15d-4b34-8676-07fd60a31a12",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "a014dc67-f91b-40bf-9a6d-adfd971fc613",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "1e441aee-33bb-4bf2-a6f9-e9de7a9f316a",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering"
                    },
                    {
                      "id": "473d2443-0732-48d1-8a6a-1473348737b6",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "25e545f5-303f-4b3e-a220-248bfd4389a9",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "8d8d80a0-10c5-47c4-b8b4-5370870f77ef",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af8c04ba-cb04-425f-86b8-91d3eff56406",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "ef3b61db-7f0b-4643-9cdd-457962748982",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "bcc82d4f-d052-4d7e-94b8-8a1c9b9c930d",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter"
                    },
                    {
                      "id": "d3696dd3-7e33-4be9-8e90-2538562dafe5",
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": [
                    {
                      "id": "893d2585-8b78-4459-b88d-ee92df763297",
                      "tags": [],
                      "location": {
                        "line": 28,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "8e157e3f-6a6b-41af-a009-46c62fc78181",
                        "location": {
                          "line": 29,
                          "column": 7
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 29,
                              "column": 9
                            },
                            "value": "filter"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 21
                            },
                            "value": "search"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 30
                            },
                            "value": "ordering"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "ec4d6e3f-060e-4fc8-9df7-8e416f28d478",
                          "location": {
                            "line": 30,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 21
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "4d4dbd40-d945-442c-88cf-8da442b084d2",
                          "location": {
                            "line": 31,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 21
                              },
                              "value": "Alice"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        },
                        {
                          "id": "963b1420-94d2-4997-b41a-b737b54b3b25",
                          "location": {
                            "line": 32,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 32,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 21
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "0441484a-53dd-4cba-a30c-c6495d26adf8",
                          "location": {
                            "line": 33,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 33,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 21
                              },
                              "value": "Bob"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "47e20955-8b72-4a27-88f0-d187309edfe8",
                  "tags": [
                    {
                      "location": {
                        "line": 35,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "693f590b-364e-43b1-ac44-b75c9f7bad0b"
                    },
                    {
                      "location": {
                        "line": 35,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "9549ba0a-d3b8-4f09-af28-23f249c1e0b7"
                    }
                  ],
                  "location": {
                    "line": 36,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receive an empty list from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "9201c536-5107-4722-a564-62c5d419526f",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "search for a specific value and the searched value does not exist in any record in the database"
                    },
                    {
                      "id": "fb8d4129-2bc6-4264-be81-6be760980baa",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "85865328-5761-4a1f-a3ef-9e861aea830b",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "55c91be4-c153-452f-b47c-c97d130a71e6",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "b84e25bc-1622-45fa-be56-08d711fea2d4",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "9046eca1-427e-4982-b0c6-8fd9d5184a71",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "98f73403-fd69-4a0f-b614-a6e5c52d0fb8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "580e68a4-0bd5-4915-b2cb-895ec9207ad2",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results field should be an empty array"
                    },
                    {
                      "id": "ddef19ea-e2c6-42cb-8f54-3ec41b13ae65",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_list.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 488000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 488000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 28995
              },
              "status": "PASSED"
            },
            "text": "user wants to get the database users information",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cf5"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 488000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 493000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4438389
              },
              "status": "PASSED"
            },
            "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cf6"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 493000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 493000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 59309
              },
              "status": "PASSED"
            },
            "text": "filter users information by using query parameters \"Bob\" as search and \"FirstName\" as filter and \"descending\" as ordering",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cf7"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 493000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 497000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4413819
              },
              "status": "PASSED"
            },
            "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cf8"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 498000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 498000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 48492
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cf9"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 498000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 498000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 54620
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cfa"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 498000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 498000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 41804
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cfb"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 498000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 499000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 305371
              },
              "status": "FAILED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cfc"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 499000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 499000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} is filtered by \"Bob\" and \"FirstName\" provided in the query parameter",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cfd"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 499000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 499000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "results array length is consistent with count field value",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89cfe"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "90b5d809-2a86-4990-af1e-69782fe5bc30",
          "id": "9992323f-24c3-44ce-97ab-a7816b99d6d4",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 488000000
          }
        },
        "finish": {
          "testCaseStartedId": "9992323f-24c3-44ce-97ab-a7816b99d6d4",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 499000000
          },
          "willBeRetried": false
        },
        "name": "Successfully obtains database users information",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89cf4"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/{registryname}/{versionnumber}/\nFeature: API endpoint that allows to search multiple records in the database.\n\n  @smoke\n  Scenario: Successfully obtains database users information smoke type test\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results array length is consistent with count field value\n\n  @unit @positive\n  Scenario Outline: Successfully obtains database users information\n    Given user wants to get the database users information\n    When send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber\n    And filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter\n    And results array length is consistent with count field value\n\n    Examples: Valid data\n      | filter    | search | ordering   |\n      | FirstName | John   | ascending  |\n      | FirstName | Alice  | descending |\n      | FirstName | Jack   | ascending  |\n      | FirstName | Bob    | descending |\n\n  @unit @positive\n  Scenario: Receive an empty list from the database\n    Given search for a specific value and the searched value does not exist in any record in the database\n    When send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber\n    Then receive a response from the GET /data/{registryname}/{versionnumber} endpoint\n    And the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms\n    And the response from /data/{registryname}/{versionnumber} should have status 200\n    And the response from /data/{registryname}/{versionnumber} should have content-type: application/json header\n    And the response from /data/{registryname}/{versionnumber} should match json schema\n    And results field should be an empty array\n    And results array length is consistent with count field value\n",
          "uri": "features/data_list.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "dc6d37fb-b1e9-4890-bc6e-c26f4d6d9d95"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/",
                "id": "ca20fa97-c62d-49ab-b992-d3156dc19464"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows to search multiple records in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "683c10e8-b3da-4c55-89ef-3f8631e8d318",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "e5c511c3-14b5-4841-8fcf-4896f14f5868"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully obtains database users information smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "b4604b2a-0dad-4761-9b54-7f4ceee3af93",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "04ee97f4-4753-4c23-8b9f-e1d9cf7beac4",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "891a8af0-ea99-40ff-a010-c22ec1335cf0",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "5f034a6e-63e1-4844-bb8f-b0ca9b1fc24f",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "194dee71-bc15-44ba-af10-bd289e37bbdb",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af963390-91f9-47e5-9a46-5ce91b60949c",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "9e3f8509-b928-4f2f-9c79-5c6ea3eca542",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "1ec63bd0-3951-4502-a3f9-5792ab86451c",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "a51d1d0d-2b18-45a2-8a47-7da4c457b570",
                  "tags": [
                    {
                      "location": {
                        "line": 15,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "6a05d266-9849-454c-baff-822f283e542d"
                    },
                    {
                      "location": {
                        "line": 15,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "321d0b82-4e80-4c59-b793-5734e17a681b"
                    }
                  ],
                  "location": {
                    "line": 16,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully obtains database users information",
                  "description": "",
                  "steps": [
                    {
                      "id": "bfa8acb0-c15d-4b34-8676-07fd60a31a12",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "user wants to get the database users information"
                    },
                    {
                      "id": "a014dc67-f91b-40bf-9a6d-adfd971fc613",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "1e441aee-33bb-4bf2-a6f9-e9de7a9f316a",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "filter users information by using query parameters \"<search>\" as search and \"<filter>\" as filter and \"<ordering>\" as ordering"
                    },
                    {
                      "id": "473d2443-0732-48d1-8a6a-1473348737b6",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "25e545f5-303f-4b3e-a220-248bfd4389a9",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "8d8d80a0-10c5-47c4-b8b4-5370870f77ef",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "af8c04ba-cb04-425f-86b8-91d3eff56406",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "ef3b61db-7f0b-4643-9cdd-457962748982",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "bcc82d4f-d052-4d7e-94b8-8a1c9b9c930d",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} is filtered by \"<search>\" and \"<filter>\" provided in the query parameter"
                    },
                    {
                      "id": "d3696dd3-7e33-4be9-8e90-2538562dafe5",
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": [
                    {
                      "id": "893d2585-8b78-4459-b88d-ee92df763297",
                      "tags": [],
                      "location": {
                        "line": 28,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "8e157e3f-6a6b-41af-a009-46c62fc78181",
                        "location": {
                          "line": 29,
                          "column": 7
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 29,
                              "column": 9
                            },
                            "value": "filter"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 21
                            },
                            "value": "search"
                          },
                          {
                            "location": {
                              "line": 29,
                              "column": 30
                            },
                            "value": "ordering"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "ec4d6e3f-060e-4fc8-9df7-8e416f28d478",
                          "location": {
                            "line": 30,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 21
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "4d4dbd40-d945-442c-88cf-8da442b084d2",
                          "location": {
                            "line": 31,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 21
                              },
                              "value": "Alice"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        },
                        {
                          "id": "963b1420-94d2-4997-b41a-b737b54b3b25",
                          "location": {
                            "line": 32,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 32,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 21
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 32,
                                "column": 30
                              },
                              "value": "ascending"
                            }
                          ]
                        },
                        {
                          "id": "0441484a-53dd-4cba-a30c-c6495d26adf8",
                          "location": {
                            "line": 33,
                            "column": 7
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 33,
                                "column": 9
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 21
                              },
                              "value": "Bob"
                            },
                            {
                              "location": {
                                "line": 33,
                                "column": 30
                              },
                              "value": "descending"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "47e20955-8b72-4a27-88f0-d187309edfe8",
                  "tags": [
                    {
                      "location": {
                        "line": 35,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "693f590b-364e-43b1-ac44-b75c9f7bad0b"
                    },
                    {
                      "location": {
                        "line": 35,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "9549ba0a-d3b8-4f09-af28-23f249c1e0b7"
                    }
                  ],
                  "location": {
                    "line": 36,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receive an empty list from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "9201c536-5107-4722-a564-62c5d419526f",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "search for a specific value and the searched value does not exist in any record in the database"
                    },
                    {
                      "id": "fb8d4129-2bc6-4264-be81-6be760980baa",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "85865328-5761-4a1f-a3ef-9e861aea830b",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint"
                    },
                    {
                      "id": "55c91be4-c153-452f-b47c-c97d130a71e6",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "b84e25bc-1622-45fa-be56-08d711fea2d4",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have status 200"
                    },
                    {
                      "id": "9046eca1-427e-4982-b0c6-8fd9d5184a71",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header"
                    },
                    {
                      "id": "98f73403-fd69-4a0f-b614-a6e5c52d0fb8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "the response from /data/{registryname}/{versionnumber} should match json schema"
                    },
                    {
                      "id": "580e68a4-0bd5-4915-b2cb-895ec9207ad2",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results field should be an empty array"
                    },
                    {
                      "id": "ddef19ea-e2c6-42cb-8f54-3ec41b13ae65",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "results array length is consistent with count field value"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_list.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 499000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 499000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 85795
              },
              "status": "PASSED"
            },
            "text": "search for a specific value and the searched value does not exist in any record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d00"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 499000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 504000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4378931
              },
              "status": "PASSED"
            },
            "text": "send GET request with given Information-Mediator-Client header and \"registryempty\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d01"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 504000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 508000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4187258
              },
              "status": "PASSED"
            },
            "text": "receive a response from the GET /data/{registryname}/{versionnumber} endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d02"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 508000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 508000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 52942
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d03"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 508000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 509000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 50648
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d04"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 509000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 509000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 39882
              },
              "status": "PASSED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d05"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 509000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 509000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 293626
              },
              "status": "FAILED"
            },
            "text": "the response from /data/{registryname}/{versionnumber} should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d06"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 509000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 509000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "results field should be an empty array",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d07"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 509000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 509000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "results array length is consistent with count field value",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d08"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "ff2ef0e0-bc20-49c4-8fb2-8ab6aedf4641",
          "id": "73e64b98-eb58-494f-803a-a4742100ef68",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 499000000
          }
        },
        "finish": {
          "testCaseStartedId": "73e64b98-eb58-494f-803a-a4742100ef68",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 510000000
          },
          "willBeRetried": false
        },
        "name": "Receive an empty list from the database",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89cff"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/MyPersonalDataUsage/1.0\nFeature: API endpoint that allows users to check who has read their personal data.\n\nThe purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.\n\n  @smoke @unit @positive\n  Scenario: The user gets a list of all records that have read his personal data smoke test type\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n  @unit @positive\n  Scenario Outline: The user gets a list of all records that have read his personal data\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n    Examples:\n    | userID         | DatabaseID |\n    | EE378129127223 | MCTS       |\n    | EE334569121212 | MCTS       |\n    | EE390029120500 | MCTS       |\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n",
          "uri": "features/data_my_personal_data_usage.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "58ed6095-af07-4312-a39d-bb683619dc9d"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/MyPersonalDataUsage/1.0",
                "id": "18bcfed8-d094-443c-b590-fd3b718fd388"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to check who has read their personal data.",
            "description": "The purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.",
            "children": [
              {
                "scenario": {
                  "id": "11051d1c-4466-4ea6-b762-f0a489e810f3",
                  "tags": [
                    {
                      "location": {
                        "line": 7,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "29bcfc6f-e8b9-4a4d-9b89-7cdb2e753bb6"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 10
                      },
                      "name": "@unit",
                      "id": "4395315a-049a-4944-8d84-cc365f8d64d1"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 16
                      },
                      "name": "@positive",
                      "id": "059362d6-ccc0-477c-811a-8ca4d150c920"
                    }
                  ],
                  "location": {
                    "line": 8,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a list of all records that have read his personal data smoke test type",
                  "description": "",
                  "steps": [
                    {
                      "id": "9df8269c-a82e-4dd3-a25b-0f04ef650bc8",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "a3d4c21b-5627-4ec6-a946-b19199c32869",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "cafdf64d-d907-436d-afc2-dbade1e48756",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "db95c944-79db-424e-bdd1-b5a4095f7475",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "dcf7a14e-5271-4207-820a-c0b22d0eb013",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "84550c80-fd9b-49ab-989d-75c6fe285760",
                      "location": {
                        "line": 14,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "574c7a8b-7a36-4ba4-9f7a-e3aef8fb9fe4",
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b662082b-945d-4dc5-82e0-5e3384edd7be",
                  "tags": [
                    {
                      "location": {
                        "line": 17,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "66d4bc4b-1afb-4fce-8c2f-5b5359601e31"
                    },
                    {
                      "location": {
                        "line": 17,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "dce19e93-5ec2-4db8-b208-6432994f973d"
                    }
                  ],
                  "location": {
                    "line": 18,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "The user gets a list of all records that have read his personal data",
                  "description": "",
                  "steps": [
                    {
                      "id": "c5041110-4774-49d9-96bf-4c647790c13e",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "2ecb21c3-15b3-4ce5-ba39-73c9810280e9",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID"
                    },
                    {
                      "id": "2c29e709-3f8c-46db-b5d0-a1cf64e2c8d7",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "1c412e4e-f967-433e-a7ea-26ed94a22b1c",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "e02f92e0-9760-4872-b313-03dbb31ee57b",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "9dd58b2e-4e07-4dca-bed8-86664309a685",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "fc5564c0-0cc1-44da-8ec7-5738580b6b42",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "7c67532e-11ff-446d-9da7-7cbd46326769",
                      "tags": [],
                      "location": {
                        "line": 27,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "8bd16dcd-3294-43df-a54f-2ba78c47ad44",
                        "location": {
                          "line": 28,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 28,
                              "column": 7
                            },
                            "value": "userID"
                          },
                          {
                            "location": {
                              "line": 28,
                              "column": 24
                            },
                            "value": "DatabaseID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9e9be6fe-4722-4e81-b78a-b93865e9deae",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "311a5e44-bd28-4829-90d8-2e88bf51db12",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "EE334569121212"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "94c519b0-327f-467d-91e0-363bfe982a5b",
                          "location": {
                            "line": 31,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 7
                              },
                              "value": "EE390029120500"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "b6ee73bc-8629-4b57-ab8f-041ea9a64455",
                  "tags": [
                    {
                      "location": {
                        "line": 33,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "ddf72be9-874f-423b-a2a7-408cdf1706e1"
                    },
                    {
                      "location": {
                        "line": 33,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "dabb73af-5b57-46fd-9fd5-d934d927096c"
                    }
                  ],
                  "location": {
                    "line": 34,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "5e908d48-f37c-431f-b31e-06c760801efc",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "4c9f0695-63a1-4505-9518-93df8e8222af",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "bb49e8ad-dc30-49be-9bcf-1e2d9b175861",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "3b5dd545-fe85-4dd0-a508-f2e2353f161c",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "0f30abcd-04d2-4475-b6ed-b4a1bc6108c3",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "9baaea9b-ac42-48a1-8d78-8dcf455df973",
                  "tags": [
                    {
                      "location": {
                        "line": 41,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "9b3d0041-aa2e-4f4f-a4ba-3b0eace63b36"
                    },
                    {
                      "location": {
                        "line": 41,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "321bb9ba-a845-4100-b895-b5be32ff9c5a"
                    }
                  ],
                  "location": {
                    "line": 42,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "e38eb9bf-7b40-4343-a7f7-5ec306d39ba8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "492f9264-b303-4aba-ba0c-b24efb5f77cf",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID"
                    },
                    {
                      "id": "e81ba4e1-e52b-403e-95ed-b67329e9f228",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "9ce7052f-b67b-431c-ad8c-309232f4dbf0",
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "379734c3-595c-4741-8fa6-d685ddf1d4f9",
                      "location": {
                        "line": 47,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_my_personal_data_usage.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 510000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 510000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 52514
              },
              "status": "PASSED"
            },
            "text": "The user wants to check who has read his personal data",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d0a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 510000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 510000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 150517
              },
              "status": "PASSED"
            },
            "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d0b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 510000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 515000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4413131
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d0c"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 515000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 515000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 86593
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d0d"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 515000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 515000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 76182
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d0e"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 515000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 515000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 70505
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d0f"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 516000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 516000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 341503
              },
              "status": "FAILED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d10"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "f64b389c-65b9-4ac7-a6a4-3f0087adbbbc",
          "id": "02dca060-7e96-4f38-9802-198369c1e1fc",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 510000000
          }
        },
        "finish": {
          "testCaseStartedId": "02dca060-7e96-4f38-9802-198369c1e1fc",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 516000000
          },
          "willBeRetried": false
        },
        "name": "The user gets a list of all records that have read his personal data smoke test type",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d09"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/MyPersonalDataUsage/1.0\nFeature: API endpoint that allows users to check who has read their personal data.\n\nThe purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.\n\n  @smoke @unit @positive\n  Scenario: The user gets a list of all records that have read his personal data smoke test type\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n  @unit @positive\n  Scenario Outline: The user gets a list of all records that have read his personal data\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n    Examples:\n    | userID         | DatabaseID |\n    | EE378129127223 | MCTS       |\n    | EE334569121212 | MCTS       |\n    | EE390029120500 | MCTS       |\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n",
          "uri": "features/data_my_personal_data_usage.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "58ed6095-af07-4312-a39d-bb683619dc9d"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/MyPersonalDataUsage/1.0",
                "id": "18bcfed8-d094-443c-b590-fd3b718fd388"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to check who has read their personal data.",
            "description": "The purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.",
            "children": [
              {
                "scenario": {
                  "id": "11051d1c-4466-4ea6-b762-f0a489e810f3",
                  "tags": [
                    {
                      "location": {
                        "line": 7,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "29bcfc6f-e8b9-4a4d-9b89-7cdb2e753bb6"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 10
                      },
                      "name": "@unit",
                      "id": "4395315a-049a-4944-8d84-cc365f8d64d1"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 16
                      },
                      "name": "@positive",
                      "id": "059362d6-ccc0-477c-811a-8ca4d150c920"
                    }
                  ],
                  "location": {
                    "line": 8,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a list of all records that have read his personal data smoke test type",
                  "description": "",
                  "steps": [
                    {
                      "id": "9df8269c-a82e-4dd3-a25b-0f04ef650bc8",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "a3d4c21b-5627-4ec6-a946-b19199c32869",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "cafdf64d-d907-436d-afc2-dbade1e48756",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "db95c944-79db-424e-bdd1-b5a4095f7475",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "dcf7a14e-5271-4207-820a-c0b22d0eb013",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "84550c80-fd9b-49ab-989d-75c6fe285760",
                      "location": {
                        "line": 14,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "574c7a8b-7a36-4ba4-9f7a-e3aef8fb9fe4",
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b662082b-945d-4dc5-82e0-5e3384edd7be",
                  "tags": [
                    {
                      "location": {
                        "line": 17,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "66d4bc4b-1afb-4fce-8c2f-5b5359601e31"
                    },
                    {
                      "location": {
                        "line": 17,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "dce19e93-5ec2-4db8-b208-6432994f973d"
                    }
                  ],
                  "location": {
                    "line": 18,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "The user gets a list of all records that have read his personal data",
                  "description": "",
                  "steps": [
                    {
                      "id": "c5041110-4774-49d9-96bf-4c647790c13e",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "2ecb21c3-15b3-4ce5-ba39-73c9810280e9",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID"
                    },
                    {
                      "id": "2c29e709-3f8c-46db-b5d0-a1cf64e2c8d7",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "1c412e4e-f967-433e-a7ea-26ed94a22b1c",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "e02f92e0-9760-4872-b313-03dbb31ee57b",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "9dd58b2e-4e07-4dca-bed8-86664309a685",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "fc5564c0-0cc1-44da-8ec7-5738580b6b42",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "7c67532e-11ff-446d-9da7-7cbd46326769",
                      "tags": [],
                      "location": {
                        "line": 27,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "8bd16dcd-3294-43df-a54f-2ba78c47ad44",
                        "location": {
                          "line": 28,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 28,
                              "column": 7
                            },
                            "value": "userID"
                          },
                          {
                            "location": {
                              "line": 28,
                              "column": 24
                            },
                            "value": "DatabaseID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9e9be6fe-4722-4e81-b78a-b93865e9deae",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "311a5e44-bd28-4829-90d8-2e88bf51db12",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "EE334569121212"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "94c519b0-327f-467d-91e0-363bfe982a5b",
                          "location": {
                            "line": 31,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 7
                              },
                              "value": "EE390029120500"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "b6ee73bc-8629-4b57-ab8f-041ea9a64455",
                  "tags": [
                    {
                      "location": {
                        "line": 33,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "ddf72be9-874f-423b-a2a7-408cdf1706e1"
                    },
                    {
                      "location": {
                        "line": 33,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "dabb73af-5b57-46fd-9fd5-d934d927096c"
                    }
                  ],
                  "location": {
                    "line": 34,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "5e908d48-f37c-431f-b31e-06c760801efc",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "4c9f0695-63a1-4505-9518-93df8e8222af",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "bb49e8ad-dc30-49be-9bcf-1e2d9b175861",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "3b5dd545-fe85-4dd0-a508-f2e2353f161c",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "0f30abcd-04d2-4475-b6ed-b4a1bc6108c3",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "9baaea9b-ac42-48a1-8d78-8dcf455df973",
                  "tags": [
                    {
                      "location": {
                        "line": 41,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "9b3d0041-aa2e-4f4f-a4ba-3b0eace63b36"
                    },
                    {
                      "location": {
                        "line": 41,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "321bb9ba-a845-4100-b895-b5be32ff9c5a"
                    }
                  ],
                  "location": {
                    "line": 42,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "e38eb9bf-7b40-4343-a7f7-5ec306d39ba8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "492f9264-b303-4aba-ba0c-b24efb5f77cf",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID"
                    },
                    {
                      "id": "e81ba4e1-e52b-403e-95ed-b67329e9f228",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "9ce7052f-b67b-431c-ad8c-309232f4dbf0",
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "379734c3-595c-4741-8fa6-d685ddf1d4f9",
                      "location": {
                        "line": 47,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_my_personal_data_usage.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 517000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 517000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 25139
              },
              "status": "PASSED"
            },
            "text": "The user wants to check who has read his personal data",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d12"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 517000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 517000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 64167
              },
              "status": "PASSED"
            },
            "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129127223\" as userID and \"MCTS\" as DatabaseID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d13"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 517000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 521000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4265525
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d14"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 521000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 522000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 43321
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d15"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 522000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 522000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 33204
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d16"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 522000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 522000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 36603
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d17"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 522000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 522000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 262802
              },
              "status": "FAILED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d18"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "34923cd2-17bf-43f3-9cbf-3ad87df4fcc0",
          "id": "b76c9eb2-f528-4692-9e9c-10d856cb4b8c",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 516000000
          }
        },
        "finish": {
          "testCaseStartedId": "b76c9eb2-f528-4692-9e9c-10d856cb4b8c",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 523000000
          },
          "willBeRetried": false
        },
        "name": "The user gets a list of all records that have read his personal data",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d11"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/MyPersonalDataUsage/1.0\nFeature: API endpoint that allows users to check who has read their personal data.\n\nThe purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.\n\n  @smoke @unit @positive\n  Scenario: The user gets a list of all records that have read his personal data smoke test type\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n  @unit @positive\n  Scenario Outline: The user gets a list of all records that have read his personal data\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n    Examples:\n    | userID         | DatabaseID |\n    | EE378129127223 | MCTS       |\n    | EE334569121212 | MCTS       |\n    | EE390029120500 | MCTS       |\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n",
          "uri": "features/data_my_personal_data_usage.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "58ed6095-af07-4312-a39d-bb683619dc9d"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/MyPersonalDataUsage/1.0",
                "id": "18bcfed8-d094-443c-b590-fd3b718fd388"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to check who has read their personal data.",
            "description": "The purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.",
            "children": [
              {
                "scenario": {
                  "id": "11051d1c-4466-4ea6-b762-f0a489e810f3",
                  "tags": [
                    {
                      "location": {
                        "line": 7,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "29bcfc6f-e8b9-4a4d-9b89-7cdb2e753bb6"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 10
                      },
                      "name": "@unit",
                      "id": "4395315a-049a-4944-8d84-cc365f8d64d1"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 16
                      },
                      "name": "@positive",
                      "id": "059362d6-ccc0-477c-811a-8ca4d150c920"
                    }
                  ],
                  "location": {
                    "line": 8,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a list of all records that have read his personal data smoke test type",
                  "description": "",
                  "steps": [
                    {
                      "id": "9df8269c-a82e-4dd3-a25b-0f04ef650bc8",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "a3d4c21b-5627-4ec6-a946-b19199c32869",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "cafdf64d-d907-436d-afc2-dbade1e48756",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "db95c944-79db-424e-bdd1-b5a4095f7475",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "dcf7a14e-5271-4207-820a-c0b22d0eb013",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "84550c80-fd9b-49ab-989d-75c6fe285760",
                      "location": {
                        "line": 14,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "574c7a8b-7a36-4ba4-9f7a-e3aef8fb9fe4",
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b662082b-945d-4dc5-82e0-5e3384edd7be",
                  "tags": [
                    {
                      "location": {
                        "line": 17,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "66d4bc4b-1afb-4fce-8c2f-5b5359601e31"
                    },
                    {
                      "location": {
                        "line": 17,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "dce19e93-5ec2-4db8-b208-6432994f973d"
                    }
                  ],
                  "location": {
                    "line": 18,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "The user gets a list of all records that have read his personal data",
                  "description": "",
                  "steps": [
                    {
                      "id": "c5041110-4774-49d9-96bf-4c647790c13e",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "2ecb21c3-15b3-4ce5-ba39-73c9810280e9",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID"
                    },
                    {
                      "id": "2c29e709-3f8c-46db-b5d0-a1cf64e2c8d7",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "1c412e4e-f967-433e-a7ea-26ed94a22b1c",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "e02f92e0-9760-4872-b313-03dbb31ee57b",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "9dd58b2e-4e07-4dca-bed8-86664309a685",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "fc5564c0-0cc1-44da-8ec7-5738580b6b42",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "7c67532e-11ff-446d-9da7-7cbd46326769",
                      "tags": [],
                      "location": {
                        "line": 27,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "8bd16dcd-3294-43df-a54f-2ba78c47ad44",
                        "location": {
                          "line": 28,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 28,
                              "column": 7
                            },
                            "value": "userID"
                          },
                          {
                            "location": {
                              "line": 28,
                              "column": 24
                            },
                            "value": "DatabaseID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9e9be6fe-4722-4e81-b78a-b93865e9deae",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "311a5e44-bd28-4829-90d8-2e88bf51db12",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "EE334569121212"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "94c519b0-327f-467d-91e0-363bfe982a5b",
                          "location": {
                            "line": 31,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 7
                              },
                              "value": "EE390029120500"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "b6ee73bc-8629-4b57-ab8f-041ea9a64455",
                  "tags": [
                    {
                      "location": {
                        "line": 33,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "ddf72be9-874f-423b-a2a7-408cdf1706e1"
                    },
                    {
                      "location": {
                        "line": 33,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "dabb73af-5b57-46fd-9fd5-d934d927096c"
                    }
                  ],
                  "location": {
                    "line": 34,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "5e908d48-f37c-431f-b31e-06c760801efc",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "4c9f0695-63a1-4505-9518-93df8e8222af",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "bb49e8ad-dc30-49be-9bcf-1e2d9b175861",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "3b5dd545-fe85-4dd0-a508-f2e2353f161c",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "0f30abcd-04d2-4475-b6ed-b4a1bc6108c3",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "9baaea9b-ac42-48a1-8d78-8dcf455df973",
                  "tags": [
                    {
                      "location": {
                        "line": 41,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "9b3d0041-aa2e-4f4f-a4ba-3b0eace63b36"
                    },
                    {
                      "location": {
                        "line": 41,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "321bb9ba-a845-4100-b895-b5be32ff9c5a"
                    }
                  ],
                  "location": {
                    "line": 42,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "e38eb9bf-7b40-4343-a7f7-5ec306d39ba8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "492f9264-b303-4aba-ba0c-b24efb5f77cf",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID"
                    },
                    {
                      "id": "e81ba4e1-e52b-403e-95ed-b67329e9f228",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "9ce7052f-b67b-431c-ad8c-309232f4dbf0",
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "379734c3-595c-4741-8fa6-d685ddf1d4f9",
                      "location": {
                        "line": 47,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_my_personal_data_usage.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 523000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 523000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 30004
              },
              "status": "PASSED"
            },
            "text": "The user wants to check who has read his personal data",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d1a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 523000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 523000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 69602
              },
              "status": "PASSED"
            },
            "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE334569121212\" as userID and \"MCTS\" as DatabaseID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d1b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 523000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 528000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4275931
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d1c"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 528000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 528000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 42141
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d1d"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 528000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 528000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 35663
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d1e"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 528000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 528000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 35713
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d1f"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 528000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 529000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 232258
              },
              "status": "FAILED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d20"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "fc3e8724-08e3-4a2d-a58e-9447ab9969c9",
          "id": "6a09cd5a-b42a-403a-af6a-99f1d87658db",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 523000000
          }
        },
        "finish": {
          "testCaseStartedId": "6a09cd5a-b42a-403a-af6a-99f1d87658db",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 529000000
          },
          "willBeRetried": false
        },
        "name": "The user gets a list of all records that have read his personal data",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d19"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/MyPersonalDataUsage/1.0\nFeature: API endpoint that allows users to check who has read their personal data.\n\nThe purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.\n\n  @smoke @unit @positive\n  Scenario: The user gets a list of all records that have read his personal data smoke test type\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n  @unit @positive\n  Scenario Outline: The user gets a list of all records that have read his personal data\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n    Examples:\n    | userID         | DatabaseID |\n    | EE378129127223 | MCTS       |\n    | EE334569121212 | MCTS       |\n    | EE390029120500 | MCTS       |\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n",
          "uri": "features/data_my_personal_data_usage.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "58ed6095-af07-4312-a39d-bb683619dc9d"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/MyPersonalDataUsage/1.0",
                "id": "18bcfed8-d094-443c-b590-fd3b718fd388"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to check who has read their personal data.",
            "description": "The purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.",
            "children": [
              {
                "scenario": {
                  "id": "11051d1c-4466-4ea6-b762-f0a489e810f3",
                  "tags": [
                    {
                      "location": {
                        "line": 7,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "29bcfc6f-e8b9-4a4d-9b89-7cdb2e753bb6"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 10
                      },
                      "name": "@unit",
                      "id": "4395315a-049a-4944-8d84-cc365f8d64d1"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 16
                      },
                      "name": "@positive",
                      "id": "059362d6-ccc0-477c-811a-8ca4d150c920"
                    }
                  ],
                  "location": {
                    "line": 8,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a list of all records that have read his personal data smoke test type",
                  "description": "",
                  "steps": [
                    {
                      "id": "9df8269c-a82e-4dd3-a25b-0f04ef650bc8",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "a3d4c21b-5627-4ec6-a946-b19199c32869",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "cafdf64d-d907-436d-afc2-dbade1e48756",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "db95c944-79db-424e-bdd1-b5a4095f7475",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "dcf7a14e-5271-4207-820a-c0b22d0eb013",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "84550c80-fd9b-49ab-989d-75c6fe285760",
                      "location": {
                        "line": 14,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "574c7a8b-7a36-4ba4-9f7a-e3aef8fb9fe4",
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b662082b-945d-4dc5-82e0-5e3384edd7be",
                  "tags": [
                    {
                      "location": {
                        "line": 17,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "66d4bc4b-1afb-4fce-8c2f-5b5359601e31"
                    },
                    {
                      "location": {
                        "line": 17,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "dce19e93-5ec2-4db8-b208-6432994f973d"
                    }
                  ],
                  "location": {
                    "line": 18,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "The user gets a list of all records that have read his personal data",
                  "description": "",
                  "steps": [
                    {
                      "id": "c5041110-4774-49d9-96bf-4c647790c13e",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "2ecb21c3-15b3-4ce5-ba39-73c9810280e9",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID"
                    },
                    {
                      "id": "2c29e709-3f8c-46db-b5d0-a1cf64e2c8d7",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "1c412e4e-f967-433e-a7ea-26ed94a22b1c",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "e02f92e0-9760-4872-b313-03dbb31ee57b",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "9dd58b2e-4e07-4dca-bed8-86664309a685",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "fc5564c0-0cc1-44da-8ec7-5738580b6b42",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "7c67532e-11ff-446d-9da7-7cbd46326769",
                      "tags": [],
                      "location": {
                        "line": 27,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "8bd16dcd-3294-43df-a54f-2ba78c47ad44",
                        "location": {
                          "line": 28,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 28,
                              "column": 7
                            },
                            "value": "userID"
                          },
                          {
                            "location": {
                              "line": 28,
                              "column": 24
                            },
                            "value": "DatabaseID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9e9be6fe-4722-4e81-b78a-b93865e9deae",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "311a5e44-bd28-4829-90d8-2e88bf51db12",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "EE334569121212"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "94c519b0-327f-467d-91e0-363bfe982a5b",
                          "location": {
                            "line": 31,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 7
                              },
                              "value": "EE390029120500"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "b6ee73bc-8629-4b57-ab8f-041ea9a64455",
                  "tags": [
                    {
                      "location": {
                        "line": 33,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "ddf72be9-874f-423b-a2a7-408cdf1706e1"
                    },
                    {
                      "location": {
                        "line": 33,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "dabb73af-5b57-46fd-9fd5-d934d927096c"
                    }
                  ],
                  "location": {
                    "line": 34,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "5e908d48-f37c-431f-b31e-06c760801efc",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "4c9f0695-63a1-4505-9518-93df8e8222af",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "bb49e8ad-dc30-49be-9bcf-1e2d9b175861",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "3b5dd545-fe85-4dd0-a508-f2e2353f161c",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "0f30abcd-04d2-4475-b6ed-b4a1bc6108c3",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "9baaea9b-ac42-48a1-8d78-8dcf455df973",
                  "tags": [
                    {
                      "location": {
                        "line": 41,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "9b3d0041-aa2e-4f4f-a4ba-3b0eace63b36"
                    },
                    {
                      "location": {
                        "line": 41,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "321bb9ba-a845-4100-b895-b5be32ff9c5a"
                    }
                  ],
                  "location": {
                    "line": 42,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "e38eb9bf-7b40-4343-a7f7-5ec306d39ba8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "492f9264-b303-4aba-ba0c-b24efb5f77cf",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID"
                    },
                    {
                      "id": "e81ba4e1-e52b-403e-95ed-b67329e9f228",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "9ce7052f-b67b-431c-ad8c-309232f4dbf0",
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "379734c3-595c-4741-8fa6-d685ddf1d4f9",
                      "location": {
                        "line": 47,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_my_personal_data_usage.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 529000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 529000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 26530
              },
              "status": "PASSED"
            },
            "text": "The user wants to check who has read his personal data",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d22"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 529000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 529000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 65934
              },
              "status": "PASSED"
            },
            "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE390029120500\" as userID and \"MCTS\" as DatabaseID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d23"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 529000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 533000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3088327
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d24"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 533000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 533000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 41942
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d25"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 533000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 533000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 35749
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d26"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 533000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 533000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 36489
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d27"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 533000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 534000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 241307
              },
              "status": "FAILED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d28"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "18c658ba-5984-4ec2-98d0-0b11a4a35d48",
          "id": "24ff21df-2347-4172-bc62-be66de877a6c",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 529000000
          }
        },
        "finish": {
          "testCaseStartedId": "24ff21df-2347-4172-bc62-be66de877a6c",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 534000000
          },
          "willBeRetried": false
        },
        "name": "The user gets a list of all records that have read his personal data",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d21"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/MyPersonalDataUsage/1.0\nFeature: API endpoint that allows users to check who has read their personal data.\n\nThe purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.\n\n  @smoke @unit @positive\n  Scenario: The user gets a list of all records that have read his personal data smoke test type\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n  @unit @positive\n  Scenario Outline: The user gets a list of all records that have read his personal data\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n    Examples:\n    | userID         | DatabaseID |\n    | EE378129127223 | MCTS       |\n    | EE334569121212 | MCTS       |\n    | EE390029120500 | MCTS       |\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n",
          "uri": "features/data_my_personal_data_usage.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "58ed6095-af07-4312-a39d-bb683619dc9d"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/MyPersonalDataUsage/1.0",
                "id": "18bcfed8-d094-443c-b590-fd3b718fd388"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to check who has read their personal data.",
            "description": "The purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.",
            "children": [
              {
                "scenario": {
                  "id": "11051d1c-4466-4ea6-b762-f0a489e810f3",
                  "tags": [
                    {
                      "location": {
                        "line": 7,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "29bcfc6f-e8b9-4a4d-9b89-7cdb2e753bb6"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 10
                      },
                      "name": "@unit",
                      "id": "4395315a-049a-4944-8d84-cc365f8d64d1"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 16
                      },
                      "name": "@positive",
                      "id": "059362d6-ccc0-477c-811a-8ca4d150c920"
                    }
                  ],
                  "location": {
                    "line": 8,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a list of all records that have read his personal data smoke test type",
                  "description": "",
                  "steps": [
                    {
                      "id": "9df8269c-a82e-4dd3-a25b-0f04ef650bc8",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "a3d4c21b-5627-4ec6-a946-b19199c32869",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "cafdf64d-d907-436d-afc2-dbade1e48756",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "db95c944-79db-424e-bdd1-b5a4095f7475",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "dcf7a14e-5271-4207-820a-c0b22d0eb013",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "84550c80-fd9b-49ab-989d-75c6fe285760",
                      "location": {
                        "line": 14,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "574c7a8b-7a36-4ba4-9f7a-e3aef8fb9fe4",
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b662082b-945d-4dc5-82e0-5e3384edd7be",
                  "tags": [
                    {
                      "location": {
                        "line": 17,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "66d4bc4b-1afb-4fce-8c2f-5b5359601e31"
                    },
                    {
                      "location": {
                        "line": 17,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "dce19e93-5ec2-4db8-b208-6432994f973d"
                    }
                  ],
                  "location": {
                    "line": 18,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "The user gets a list of all records that have read his personal data",
                  "description": "",
                  "steps": [
                    {
                      "id": "c5041110-4774-49d9-96bf-4c647790c13e",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "2ecb21c3-15b3-4ce5-ba39-73c9810280e9",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID"
                    },
                    {
                      "id": "2c29e709-3f8c-46db-b5d0-a1cf64e2c8d7",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "1c412e4e-f967-433e-a7ea-26ed94a22b1c",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "e02f92e0-9760-4872-b313-03dbb31ee57b",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "9dd58b2e-4e07-4dca-bed8-86664309a685",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "fc5564c0-0cc1-44da-8ec7-5738580b6b42",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "7c67532e-11ff-446d-9da7-7cbd46326769",
                      "tags": [],
                      "location": {
                        "line": 27,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "8bd16dcd-3294-43df-a54f-2ba78c47ad44",
                        "location": {
                          "line": 28,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 28,
                              "column": 7
                            },
                            "value": "userID"
                          },
                          {
                            "location": {
                              "line": 28,
                              "column": 24
                            },
                            "value": "DatabaseID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9e9be6fe-4722-4e81-b78a-b93865e9deae",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "311a5e44-bd28-4829-90d8-2e88bf51db12",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "EE334569121212"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "94c519b0-327f-467d-91e0-363bfe982a5b",
                          "location": {
                            "line": 31,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 7
                              },
                              "value": "EE390029120500"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "b6ee73bc-8629-4b57-ab8f-041ea9a64455",
                  "tags": [
                    {
                      "location": {
                        "line": 33,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "ddf72be9-874f-423b-a2a7-408cdf1706e1"
                    },
                    {
                      "location": {
                        "line": 33,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "dabb73af-5b57-46fd-9fd5-d934d927096c"
                    }
                  ],
                  "location": {
                    "line": 34,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "5e908d48-f37c-431f-b31e-06c760801efc",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "4c9f0695-63a1-4505-9518-93df8e8222af",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "bb49e8ad-dc30-49be-9bcf-1e2d9b175861",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "3b5dd545-fe85-4dd0-a508-f2e2353f161c",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "0f30abcd-04d2-4475-b6ed-b4a1bc6108c3",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "9baaea9b-ac42-48a1-8d78-8dcf455df973",
                  "tags": [
                    {
                      "location": {
                        "line": 41,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "9b3d0041-aa2e-4f4f-a4ba-3b0eace63b36"
                    },
                    {
                      "location": {
                        "line": 41,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "321bb9ba-a845-4100-b895-b5be32ff9c5a"
                    }
                  ],
                  "location": {
                    "line": 42,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "e38eb9bf-7b40-4343-a7f7-5ec306d39ba8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "492f9264-b303-4aba-ba0c-b24efb5f77cf",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID"
                    },
                    {
                      "id": "e81ba4e1-e52b-403e-95ed-b67329e9f228",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "9ce7052f-b67b-431c-ad8c-309232f4dbf0",
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "379734c3-595c-4741-8fa6-d685ddf1d4f9",
                      "location": {
                        "line": 47,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_my_personal_data_usage.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 534000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 534000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 25111
              },
              "status": "PASSED"
            },
            "text": "The user wants to check who has read his personal data",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d2a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 534000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 534000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 119658
              },
              "status": "PASSED"
            },
            "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d2b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 534000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 539000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4093068
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d2c"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 539000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 539000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 46200
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d2d"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 539000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 541000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 893971
              },
              "status": "FAILED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d2e"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "7322651d-817e-45e2-8437-486fa6cc3e22",
          "id": "531e124d-1737-45bb-98b6-c367ab73218e",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 534000000
          }
        },
        "finish": {
          "testCaseStartedId": "531e124d-1737-45bb-98b6-c367ab73218e",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 542000000
          },
          "willBeRetried": false
        },
        "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d29"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/MyPersonalDataUsage/1.0\nFeature: API endpoint that allows users to check who has read their personal data.\n\nThe purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.\n\n  @smoke @unit @positive\n  Scenario: The user gets a list of all records that have read his personal data smoke test type\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n  @unit @positive\n  Scenario Outline: The user gets a list of all records that have read his personal data\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema\n\n    Examples:\n    | userID         | DatabaseID |\n    | EE378129127223 | MCTS       |\n    | EE334569121212 | MCTS       |\n    | EE390029120500 | MCTS       |\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n\n  @unit @negative\n  Scenario: The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter\n    Given The user wants to check who has read his personal data\n    When User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID\n    Then User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms\n    And The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400\n",
          "uri": "features/data_my_personal_data_usage.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "58ed6095-af07-4312-a39d-bb683619dc9d"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/MyPersonalDataUsage/1.0",
                "id": "18bcfed8-d094-443c-b590-fd3b718fd388"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to check who has read their personal data.",
            "description": "The purpose of this API is to make personal data protection better and make BB personal \ndata usage transparent by showing who has looked at personal data of the user.",
            "children": [
              {
                "scenario": {
                  "id": "11051d1c-4466-4ea6-b762-f0a489e810f3",
                  "tags": [
                    {
                      "location": {
                        "line": 7,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "29bcfc6f-e8b9-4a4d-9b89-7cdb2e753bb6"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 10
                      },
                      "name": "@unit",
                      "id": "4395315a-049a-4944-8d84-cc365f8d64d1"
                    },
                    {
                      "location": {
                        "line": 7,
                        "column": 16
                      },
                      "name": "@positive",
                      "id": "059362d6-ccc0-477c-811a-8ca4d150c920"
                    }
                  ],
                  "location": {
                    "line": 8,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a list of all records that have read his personal data smoke test type",
                  "description": "",
                  "steps": [
                    {
                      "id": "9df8269c-a82e-4dd3-a25b-0f04ef650bc8",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "a3d4c21b-5627-4ec6-a946-b19199c32869",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "cafdf64d-d907-436d-afc2-dbade1e48756",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "db95c944-79db-424e-bdd1-b5a4095f7475",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "dcf7a14e-5271-4207-820a-c0b22d0eb013",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "84550c80-fd9b-49ab-989d-75c6fe285760",
                      "location": {
                        "line": 14,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "574c7a8b-7a36-4ba4-9f7a-e3aef8fb9fe4",
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b662082b-945d-4dc5-82e0-5e3384edd7be",
                  "tags": [
                    {
                      "location": {
                        "line": 17,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "66d4bc4b-1afb-4fce-8c2f-5b5359601e31"
                    },
                    {
                      "location": {
                        "line": 17,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "dce19e93-5ec2-4db8-b208-6432994f973d"
                    }
                  ],
                  "location": {
                    "line": 18,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "The user gets a list of all records that have read his personal data",
                  "description": "",
                  "steps": [
                    {
                      "id": "c5041110-4774-49d9-96bf-4c647790c13e",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "2ecb21c3-15b3-4ce5-ba39-73c9810280e9",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"<userID>\" as userID and \"<DatabaseID>\" as DatabaseID"
                    },
                    {
                      "id": "2c29e709-3f8c-46db-b5d0-a1cf64e2c8d7",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "1c412e4e-f967-433e-a7ea-26ed94a22b1c",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "e02f92e0-9760-4872-b313-03dbb31ee57b",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 200"
                    },
                    {
                      "id": "9dd58b2e-4e07-4dca-bed8-86664309a685",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "fc5564c0-0cc1-44da-8ec7-5738580b6b42",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "7c67532e-11ff-446d-9da7-7cbd46326769",
                      "tags": [],
                      "location": {
                        "line": 27,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "8bd16dcd-3294-43df-a54f-2ba78c47ad44",
                        "location": {
                          "line": 28,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 28,
                              "column": 7
                            },
                            "value": "userID"
                          },
                          {
                            "location": {
                              "line": 28,
                              "column": 24
                            },
                            "value": "DatabaseID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9e9be6fe-4722-4e81-b78a-b93865e9deae",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "311a5e44-bd28-4829-90d8-2e88bf51db12",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "EE334569121212"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        },
                        {
                          "id": "94c519b0-327f-467d-91e0-363bfe982a5b",
                          "location": {
                            "line": 31,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 31,
                                "column": 7
                              },
                              "value": "EE390029120500"
                            },
                            {
                              "location": {
                                "line": 31,
                                "column": 24
                              },
                              "value": "MCTS"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "b6ee73bc-8629-4b57-ab8f-041ea9a64455",
                  "tags": [
                    {
                      "location": {
                        "line": 33,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "ddf72be9-874f-423b-a2a7-408cdf1706e1"
                    },
                    {
                      "location": {
                        "line": 33,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "dabb73af-5b57-46fd-9fd5-d934d927096c"
                    }
                  ],
                  "location": {
                    "line": 34,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid userID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "5e908d48-f37c-431f-b31e-06c760801efc",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "4c9f0695-63a1-4505-9518-93df8e8222af",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"...\" as invalid userID and \"MCTS\" as DatabaseID"
                    },
                    {
                      "id": "bb49e8ad-dc30-49be-9bcf-1e2d9b175861",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "3b5dd545-fe85-4dd0-a508-f2e2353f161c",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "0f30abcd-04d2-4475-b6ed-b4a1bc6108c3",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "9baaea9b-ac42-48a1-8d78-8dcf455df973",
                  "tags": [
                    {
                      "location": {
                        "line": 41,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "9b3d0041-aa2e-4f4f-a4ba-3b0eace63b36"
                    },
                    {
                      "location": {
                        "line": 41,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "321bb9ba-a845-4100-b895-b5be32ff9c5a"
                    }
                  ],
                  "location": {
                    "line": 42,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter",
                  "description": "",
                  "steps": [
                    {
                      "id": "e38eb9bf-7b40-4343-a7f7-5ec306d39ba8",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to check who has read his personal data"
                    },
                    {
                      "id": "492f9264-b303-4aba-ba0c-b24efb5f77cf",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID"
                    },
                    {
                      "id": "e81ba4e1-e52b-403e-95ed-b67329e9f228",
                      "location": {
                        "line": 45,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint"
                    },
                    {
                      "id": "9ce7052f-b67b-431c-ad8c-309232f4dbf0",
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "379734c3-595c-4741-8fa6-d685ddf1d4f9",
                      "location": {
                        "line": 47,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_my_personal_data_usage.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 542000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 542000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 31389
              },
              "status": "PASSED"
            },
            "text": "The user wants to check who has read his personal data",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d30"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 542000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 542000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 106390
              },
              "status": "PASSED"
            },
            "text": "User sends GET /data/MyPersonalDataUsage/1.0 request with given Information-Mediator-Client header, \"EE378129277266\" as userID and \"...\" as invalid DatabaseID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d31"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 542000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 547000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4256173
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/MyPersonalDataUsage/1.0 endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d32"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 547000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 547000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 46509
              },
              "status": "PASSED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d33"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 547000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 548000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 267814
              },
              "status": "FAILED"
            },
            "text": "The /data/MyPersonalDataUsage/1.0 endpoint response should have status 400",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d34"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "4307ac3f-fad8-4864-8707-c59bd6ef1856",
          "id": "268f22ba-8a2b-40ca-8552-3576fca3b7cf",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 542000000
          }
        },
        "finish": {
          "testCaseStartedId": "268f22ba-8a2b-40ca-8552-3576fca3b7cf",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 548000000
          },
          "willBeRetried": false
        },
        "name": "The user is not able to gets a list of all records that have read his personal data because of the invalid DatabaseID parameter",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d2f"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext}\nFeature: API endpoint that allows users to search for the field value of a record in the database.\n  \n  @smoke @unit @positive\n  Scenario: The user gets the first name of the searched user from the database smoke type test\n    Given The user wants to search for the user's first name of the user in the database\n    When User sends GET request with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber, \"80bcb084-fa17-11ed-be56-0242ac120002\" as uuid, \"FirstName\" as field and \"json\" as ext\n    Then User receives a response from the GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint\n    And The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should be returned in a timely manner 15000ms\n    And The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should have status 200\n    And The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should have content-type: application/json header\n    And The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should match json schema\n",
          "uri": "features/data_read_value.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "ab10ee59-6585-470e-a235-e297be066668"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext}",
                "id": "9abe1c01-6a36-4123-a362-f74462351d4d"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to search for the field value of a record in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "c9db225a-d566-40f1-ae77-af26ed7a2464",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "beaae401-1d24-4e1c-8d74-b60ea935250a"
                    },
                    {
                      "location": {
                        "line": 4,
                        "column": 10
                      },
                      "name": "@unit",
                      "id": "8660298a-3313-40bb-a285-ae4c2f7b4462"
                    },
                    {
                      "location": {
                        "line": 4,
                        "column": 16
                      },
                      "name": "@positive",
                      "id": "8003e41e-ea23-4c8e-beb2-f85eeed85c66"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets the first name of the searched user from the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "d247913b-bc0e-463f-acd5-e1454c17d561",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for the user's first name of the user in the database"
                    },
                    {
                      "id": "07caaf67-3a94-4aba-8755-bae7d66993c8",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber, \"80bcb084-fa17-11ed-be56-0242ac120002\" as uuid, \"FirstName\" as field and \"json\" as ext"
                    },
                    {
                      "id": "f28bb655-1637-4ef3-b1db-fe006d120402",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint"
                    },
                    {
                      "id": "44247790-c1c0-438b-96a8-3a777b06f2e6",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "0b076180-9b3b-4510-abb9-1e3db2610c58",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should have status 200"
                    },
                    {
                      "id": "55ec2ac7-925f-4e7e-94a9-bc28dcce1f6e",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "343e9deb-2bf3-4536-819e-e9c706b5cc9d",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_read_value.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 548000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 548000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 66709
              },
              "status": "PASSED"
            },
            "text": "The user wants to search for the user's first name of the user in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d36"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 548000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 553000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4758823
              },
              "status": "PASSED"
            },
            "text": "User sends GET request with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber, \"80bcb084-fa17-11ed-be56-0242ac120002\" as uuid, \"FirstName\" as field and \"json\" as ext",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d37"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 553000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 558000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4311650
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d38"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 558000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 558000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 97922
              },
              "status": "PASSED"
            },
            "text": "The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d39"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 558000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 558000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 79055
              },
              "status": "PASSED"
            },
            "text": "The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d3a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 558000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 558000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 85557
              },
              "status": "PASSED"
            },
            "text": "The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d3b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 559000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 559000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 176991
              },
              "status": "PASSED"
            },
            "text": "The GET /data/{registryname}/{versionnumber}/{uuid}/read-value/{field}.{ext} endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d3c"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "e360c84c-aab9-40f4-912b-ab96d93e0c15",
          "id": "fcdef633-29d0-4272-a5e8-7a2389833a8e",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 548000000
          }
        },
        "finish": {
          "testCaseStartedId": "fcdef633-29d0-4272-a5e8-7a2389833a8e",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 559000000
          },
          "willBeRetried": false
        },
        "name": "The user gets the first name of the searched user from the database smoke type test",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d35"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/data/{registryname}/{versionnumber}/read\nFeature: API endpoint that allows users to search for a record in the database.\n\n  @smoke\n  Scenario: User obtains a searched record from the database smoke type test\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User obtains a searched record from the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\"\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\"\n\n    Examples:\n    | body_parameter     | parameter_value |\n    | ID                 | EE378129127223  |\n    | FirstName          | Eva             |\n    | LastName           | Smith           |\n    | BirthCertificateID | EE6546273487865 |\n\n  @unit @positive \n  Scenario: The user gets a searched record from the database when he specifies all parameters\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\"\n\n    Examples:\n    | FirstName | LastName | ID             | BirthCertificateID |\n    | Billy     | Johnson  | EE378129127223 | RR-1112223331      |\n\n  @unit @negative \n  Scenario: Receives a message that the record not found in the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 404\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message\n",
          "uri": "features/data_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "5f2694a1-dd1d-4f2d-94b1-6a823d268e9b"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/read",
                "id": "c21095cb-56f7-4d30-ac33-9aba5eb6a4be"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to search for a record in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "f7e1bafb-d970-4d13-97f6-0406f33813c1",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "746ecfbc-9203-449c-b5b3-5a071039f4ed"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User obtains a searched record from the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "804c3909-ea52-413c-8a3f-3b9886a26ef1",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "b7a5d569-1c8e-4798-9a10-3570714d3c80",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName"
                    },
                    {
                      "id": "3fb7af77-ba3b-4c44-b7e1-463f3abc3276",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "6b72e5db-57c1-495e-924e-a14a132d54bd",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "31ba05d3-b018-47b2-be75-e44cd8d59bcc",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "e3a5e237-b308-4cdb-8d46-9887e61e89d8",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "f5c5f16c-88a9-48b2-9885-067e56d8c423",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b33a506e-54a2-40a3-bf98-02d22489f5b9",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "a6695af9-15cc-402c-9689-2c9dc06ab875"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "13b2e373-f0a2-4c91-949b-09997b59ae7c"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User obtains a searched record from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "92d0010d-50d2-4815-85b2-11acde5e6203",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "8afb6ab2-ffb9-43bf-b98a-76841086f203",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\""
                    },
                    {
                      "id": "ba45b1b1-654a-4d66-905e-9431404c288d",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "ed132926-d0d6-4775-896b-82a6108a49b0",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "73f66a6e-3eb1-4a19-a2b7-7011767d0e85",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f237b34a-7fe7-4a51-a38d-f1825f0f77af",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "37915865-3967-4611-89b7-8804275f6b02",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "1125f510-9379-481a-986a-0c4f04978342",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "7e9679ca-cdf9-4c4d-a226-b1d2011d698e",
                      "tags": [],
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "1994a4ca-fb95-46fe-b580-6926ff8b7a99",
                        "location": {
                          "line": 26,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 26,
                              "column": 7
                            },
                            "value": "body_parameter"
                          },
                          {
                            "location": {
                              "line": 26,
                              "column": 28
                            },
                            "value": "parameter_value"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "bac79401-84d3-4ab8-aff4-7c0e0f632d98",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "ID"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 28
                              },
                              "value": "EE378129127223"
                            }
                          ]
                        },
                        {
                          "id": "3f591ade-79fe-4147-8b4c-a5fe419dc53e",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 28,
                                "column": 28
                              },
                              "value": "Eva"
                            }
                          ]
                        },
                        {
                          "id": "589232e9-bfd8-434a-8cc5-40bfbb2a0303",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "LastName"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 28
                              },
                              "value": "Smith"
                            }
                          ]
                        },
                        {
                          "id": "bec9af73-b289-474e-bc46-c49a9c569d1c",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "BirthCertificateID"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 28
                              },
                              "value": "EE6546273487865"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c9046a54-e1b1-4b74-a431-7a366e326d31",
                  "tags": [
                    {
                      "location": {
                        "line": 32,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "13505504-ccfb-4e83-b167-d20c2319cb9c"
                    },
                    {
                      "location": {
                        "line": 32,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "1554e01c-0b87-42df-9914-caa5b79b19b8"
                    }
                  ],
                  "location": {
                    "line": 33,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a searched record from the database when he specifies all parameters",
                  "description": "",
                  "steps": [
                    {
                      "id": "ebd4e2a4-c789-42f6-a9bb-2c714c515360",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "322440d2-dc67-42e0-8f62-81ef446dc813",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "f7eadd3f-1ea2-45ca-bad0-43e33199e98b",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "3d149d2b-8ba1-4919-9ec8-8074742b03c0",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "d9ccaf1d-cef9-489a-af22-c034e8d4e111",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f320ae89-d3b1-4f8a-ba62-32c4b31abc30",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "5079408e-0a4a-4fef-ae4f-ee638d4170f2",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "5a2d96bd-e208-432b-8b45-4d1ee82928dc",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\""
                    },
                    {
                      "id": "28c2ada3-b6d8-46ea-9dbc-e512b69aa0a5",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\""
                    },
                    {
                      "id": "6c602b08-aed9-4638-ab6b-c282286d4a05",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\""
                    },
                    {
                      "id": "f0d89c82-bdc4-4391-83ef-19349e68d66f",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "c911d7fc-b59b-429e-b703-a9be5d674908",
                      "tags": [],
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "33d161ce-4619-4b5c-a4e6-cba4ff51f022",
                        "location": {
                          "line": 47,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 47,
                              "column": 7
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 19
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 30
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 47
                            },
                            "value": "BirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9952e269-f9cb-4369-8615-fa9563be2be3",
                          "location": {
                            "line": 48,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 48,
                                "column": 7
                              },
                              "value": "Billy"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 19
                              },
                              "value": "Johnson"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 30
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 47
                              },
                              "value": "RR-1112223331"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c67ce9f1-a90e-42e6-a66d-b559f03cb4b4",
                  "tags": [
                    {
                      "location": {
                        "line": 50,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "96f88918-25c4-485e-9dbb-eda2e0e81c3d"
                    },
                    {
                      "location": {
                        "line": 50,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "60735e78-9954-4dfc-85c6-c44308cef547"
                    }
                  ],
                  "location": {
                    "line": 51,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receives a message that the record not found in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "ec93fd51-4c55-43d8-898e-8991c4aa07b3",
                      "location": {
                        "line": 52,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "f47ba719-3d3f-4252-87b3-0178195e2df4",
                      "location": {
                        "line": 53,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName"
                    },
                    {
                      "id": "28c2fbd9-c52b-4774-9744-f8f3139637c0",
                      "location": {
                        "line": 54,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "faba751b-6767-4d7b-a497-31f3c002567f",
                      "location": {
                        "line": 55,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "a081c95f-196c-492b-b233-3f8d27037e1e",
                      "location": {
                        "line": 56,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 404"
                    },
                    {
                      "id": "e0a16172-204a-48f3-b480-42ea857221f5",
                      "location": {
                        "line": 57,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "e5e6ff5e-edcd-4dcb-8bc9-d621f9b2c834",
                      "location": {
                        "line": 58,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 560000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 560000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 59051
              },
              "status": "PASSED"
            },
            "text": "The user wants to search for a record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d3e"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 560000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 566000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5524376
              },
              "status": "PASSED"
            },
            "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d3f"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 566000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 570000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4318170
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d40"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 570000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 570000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 96855
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d41"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 571000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 571000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 86242
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d42"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 571000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 571000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 80683
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d43"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 571000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 571000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 271929
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d44"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "c6b20f36-8b9b-44cd-9e74-a9161a8a1ca4",
          "id": "cf4c50ce-fc43-4d82-b366-95c0a81979b3",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 559000000
          }
        },
        "finish": {
          "testCaseStartedId": "cf4c50ce-fc43-4d82-b366-95c0a81979b3",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 571000000
          },
          "willBeRetried": false
        },
        "name": "User obtains a searched record from the database smoke type test",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d3d"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/data/{registryname}/{versionnumber}/read\nFeature: API endpoint that allows users to search for a record in the database.\n\n  @smoke\n  Scenario: User obtains a searched record from the database smoke type test\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User obtains a searched record from the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\"\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\"\n\n    Examples:\n    | body_parameter     | parameter_value |\n    | ID                 | EE378129127223  |\n    | FirstName          | Eva             |\n    | LastName           | Smith           |\n    | BirthCertificateID | EE6546273487865 |\n\n  @unit @positive \n  Scenario: The user gets a searched record from the database when he specifies all parameters\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\"\n\n    Examples:\n    | FirstName | LastName | ID             | BirthCertificateID |\n    | Billy     | Johnson  | EE378129127223 | RR-1112223331      |\n\n  @unit @negative \n  Scenario: Receives a message that the record not found in the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 404\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message\n",
          "uri": "features/data_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "5f2694a1-dd1d-4f2d-94b1-6a823d268e9b"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/read",
                "id": "c21095cb-56f7-4d30-ac33-9aba5eb6a4be"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to search for a record in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "f7e1bafb-d970-4d13-97f6-0406f33813c1",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "746ecfbc-9203-449c-b5b3-5a071039f4ed"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User obtains a searched record from the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "804c3909-ea52-413c-8a3f-3b9886a26ef1",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "b7a5d569-1c8e-4798-9a10-3570714d3c80",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName"
                    },
                    {
                      "id": "3fb7af77-ba3b-4c44-b7e1-463f3abc3276",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "6b72e5db-57c1-495e-924e-a14a132d54bd",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "31ba05d3-b018-47b2-be75-e44cd8d59bcc",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "e3a5e237-b308-4cdb-8d46-9887e61e89d8",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "f5c5f16c-88a9-48b2-9885-067e56d8c423",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b33a506e-54a2-40a3-bf98-02d22489f5b9",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "a6695af9-15cc-402c-9689-2c9dc06ab875"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "13b2e373-f0a2-4c91-949b-09997b59ae7c"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User obtains a searched record from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "92d0010d-50d2-4815-85b2-11acde5e6203",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "8afb6ab2-ffb9-43bf-b98a-76841086f203",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\""
                    },
                    {
                      "id": "ba45b1b1-654a-4d66-905e-9431404c288d",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "ed132926-d0d6-4775-896b-82a6108a49b0",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "73f66a6e-3eb1-4a19-a2b7-7011767d0e85",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f237b34a-7fe7-4a51-a38d-f1825f0f77af",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "37915865-3967-4611-89b7-8804275f6b02",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "1125f510-9379-481a-986a-0c4f04978342",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "7e9679ca-cdf9-4c4d-a226-b1d2011d698e",
                      "tags": [],
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "1994a4ca-fb95-46fe-b580-6926ff8b7a99",
                        "location": {
                          "line": 26,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 26,
                              "column": 7
                            },
                            "value": "body_parameter"
                          },
                          {
                            "location": {
                              "line": 26,
                              "column": 28
                            },
                            "value": "parameter_value"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "bac79401-84d3-4ab8-aff4-7c0e0f632d98",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "ID"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 28
                              },
                              "value": "EE378129127223"
                            }
                          ]
                        },
                        {
                          "id": "3f591ade-79fe-4147-8b4c-a5fe419dc53e",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 28,
                                "column": 28
                              },
                              "value": "Eva"
                            }
                          ]
                        },
                        {
                          "id": "589232e9-bfd8-434a-8cc5-40bfbb2a0303",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "LastName"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 28
                              },
                              "value": "Smith"
                            }
                          ]
                        },
                        {
                          "id": "bec9af73-b289-474e-bc46-c49a9c569d1c",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "BirthCertificateID"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 28
                              },
                              "value": "EE6546273487865"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c9046a54-e1b1-4b74-a431-7a366e326d31",
                  "tags": [
                    {
                      "location": {
                        "line": 32,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "13505504-ccfb-4e83-b167-d20c2319cb9c"
                    },
                    {
                      "location": {
                        "line": 32,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "1554e01c-0b87-42df-9914-caa5b79b19b8"
                    }
                  ],
                  "location": {
                    "line": 33,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a searched record from the database when he specifies all parameters",
                  "description": "",
                  "steps": [
                    {
                      "id": "ebd4e2a4-c789-42f6-a9bb-2c714c515360",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "322440d2-dc67-42e0-8f62-81ef446dc813",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "f7eadd3f-1ea2-45ca-bad0-43e33199e98b",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "3d149d2b-8ba1-4919-9ec8-8074742b03c0",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "d9ccaf1d-cef9-489a-af22-c034e8d4e111",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f320ae89-d3b1-4f8a-ba62-32c4b31abc30",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "5079408e-0a4a-4fef-ae4f-ee638d4170f2",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "5a2d96bd-e208-432b-8b45-4d1ee82928dc",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\""
                    },
                    {
                      "id": "28c2ada3-b6d8-46ea-9dbc-e512b69aa0a5",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\""
                    },
                    {
                      "id": "6c602b08-aed9-4638-ab6b-c282286d4a05",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\""
                    },
                    {
                      "id": "f0d89c82-bdc4-4391-83ef-19349e68d66f",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "c911d7fc-b59b-429e-b703-a9be5d674908",
                      "tags": [],
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "33d161ce-4619-4b5c-a4e6-cba4ff51f022",
                        "location": {
                          "line": 47,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 47,
                              "column": 7
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 19
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 30
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 47
                            },
                            "value": "BirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9952e269-f9cb-4369-8615-fa9563be2be3",
                          "location": {
                            "line": 48,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 48,
                                "column": 7
                              },
                              "value": "Billy"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 19
                              },
                              "value": "Johnson"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 30
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 47
                              },
                              "value": "RR-1112223331"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c67ce9f1-a90e-42e6-a66d-b559f03cb4b4",
                  "tags": [
                    {
                      "location": {
                        "line": 50,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "96f88918-25c4-485e-9dbb-eda2e0e81c3d"
                    },
                    {
                      "location": {
                        "line": 50,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "60735e78-9954-4dfc-85c6-c44308cef547"
                    }
                  ],
                  "location": {
                    "line": 51,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receives a message that the record not found in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "ec93fd51-4c55-43d8-898e-8991c4aa07b3",
                      "location": {
                        "line": 52,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "f47ba719-3d3f-4252-87b3-0178195e2df4",
                      "location": {
                        "line": 53,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName"
                    },
                    {
                      "id": "28c2fbd9-c52b-4774-9744-f8f3139637c0",
                      "location": {
                        "line": 54,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "faba751b-6767-4d7b-a497-31f3c002567f",
                      "location": {
                        "line": 55,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "a081c95f-196c-492b-b233-3f8d27037e1e",
                      "location": {
                        "line": 56,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 404"
                    },
                    {
                      "id": "e0a16172-204a-48f3-b480-42ea857221f5",
                      "location": {
                        "line": 57,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "e5e6ff5e-edcd-4dcb-8bc9-d621f9b2c834",
                      "location": {
                        "line": 58,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 572000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 572000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 30299
              },
              "status": "PASSED"
            },
            "text": "The user wants to search for a record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d46"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 572000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 576000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4340739
              },
              "status": "PASSED"
            },
            "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"EE378129127223\" as \"ID\"",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d47"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 576000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 581000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4684237
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d48"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 581000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 581000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 60998
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d49"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 582000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 582000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 51042
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d4a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 582000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 582000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 45177
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d4b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 582000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 582000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 128356
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d4c"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 582000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 583000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 760089
              },
              "status": "FAILED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"EE378129127223\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d4d"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "47920b8b-c3a0-49e4-ad79-a653b3615ccc",
          "id": "ae6c18ac-4301-470e-be2d-2964e394c812",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 572000000
          }
        },
        "finish": {
          "testCaseStartedId": "ae6c18ac-4301-470e-be2d-2964e394c812",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 583000000
          },
          "willBeRetried": false
        },
        "name": "User obtains a searched record from the database",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d45"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/data/{registryname}/{versionnumber}/read\nFeature: API endpoint that allows users to search for a record in the database.\n\n  @smoke\n  Scenario: User obtains a searched record from the database smoke type test\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User obtains a searched record from the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\"\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\"\n\n    Examples:\n    | body_parameter     | parameter_value |\n    | ID                 | EE378129127223  |\n    | FirstName          | Eva             |\n    | LastName           | Smith           |\n    | BirthCertificateID | EE6546273487865 |\n\n  @unit @positive \n  Scenario: The user gets a searched record from the database when he specifies all parameters\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\"\n\n    Examples:\n    | FirstName | LastName | ID             | BirthCertificateID |\n    | Billy     | Johnson  | EE378129127223 | RR-1112223331      |\n\n  @unit @negative \n  Scenario: Receives a message that the record not found in the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 404\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message\n",
          "uri": "features/data_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "5f2694a1-dd1d-4f2d-94b1-6a823d268e9b"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/read",
                "id": "c21095cb-56f7-4d30-ac33-9aba5eb6a4be"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to search for a record in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "f7e1bafb-d970-4d13-97f6-0406f33813c1",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "746ecfbc-9203-449c-b5b3-5a071039f4ed"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User obtains a searched record from the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "804c3909-ea52-413c-8a3f-3b9886a26ef1",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "b7a5d569-1c8e-4798-9a10-3570714d3c80",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName"
                    },
                    {
                      "id": "3fb7af77-ba3b-4c44-b7e1-463f3abc3276",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "6b72e5db-57c1-495e-924e-a14a132d54bd",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "31ba05d3-b018-47b2-be75-e44cd8d59bcc",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "e3a5e237-b308-4cdb-8d46-9887e61e89d8",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "f5c5f16c-88a9-48b2-9885-067e56d8c423",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b33a506e-54a2-40a3-bf98-02d22489f5b9",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "a6695af9-15cc-402c-9689-2c9dc06ab875"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "13b2e373-f0a2-4c91-949b-09997b59ae7c"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User obtains a searched record from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "92d0010d-50d2-4815-85b2-11acde5e6203",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "8afb6ab2-ffb9-43bf-b98a-76841086f203",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\""
                    },
                    {
                      "id": "ba45b1b1-654a-4d66-905e-9431404c288d",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "ed132926-d0d6-4775-896b-82a6108a49b0",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "73f66a6e-3eb1-4a19-a2b7-7011767d0e85",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f237b34a-7fe7-4a51-a38d-f1825f0f77af",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "37915865-3967-4611-89b7-8804275f6b02",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "1125f510-9379-481a-986a-0c4f04978342",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "7e9679ca-cdf9-4c4d-a226-b1d2011d698e",
                      "tags": [],
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "1994a4ca-fb95-46fe-b580-6926ff8b7a99",
                        "location": {
                          "line": 26,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 26,
                              "column": 7
                            },
                            "value": "body_parameter"
                          },
                          {
                            "location": {
                              "line": 26,
                              "column": 28
                            },
                            "value": "parameter_value"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "bac79401-84d3-4ab8-aff4-7c0e0f632d98",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "ID"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 28
                              },
                              "value": "EE378129127223"
                            }
                          ]
                        },
                        {
                          "id": "3f591ade-79fe-4147-8b4c-a5fe419dc53e",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 28,
                                "column": 28
                              },
                              "value": "Eva"
                            }
                          ]
                        },
                        {
                          "id": "589232e9-bfd8-434a-8cc5-40bfbb2a0303",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "LastName"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 28
                              },
                              "value": "Smith"
                            }
                          ]
                        },
                        {
                          "id": "bec9af73-b289-474e-bc46-c49a9c569d1c",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "BirthCertificateID"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 28
                              },
                              "value": "EE6546273487865"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c9046a54-e1b1-4b74-a431-7a366e326d31",
                  "tags": [
                    {
                      "location": {
                        "line": 32,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "13505504-ccfb-4e83-b167-d20c2319cb9c"
                    },
                    {
                      "location": {
                        "line": 32,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "1554e01c-0b87-42df-9914-caa5b79b19b8"
                    }
                  ],
                  "location": {
                    "line": 33,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a searched record from the database when he specifies all parameters",
                  "description": "",
                  "steps": [
                    {
                      "id": "ebd4e2a4-c789-42f6-a9bb-2c714c515360",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "322440d2-dc67-42e0-8f62-81ef446dc813",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "f7eadd3f-1ea2-45ca-bad0-43e33199e98b",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "3d149d2b-8ba1-4919-9ec8-8074742b03c0",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "d9ccaf1d-cef9-489a-af22-c034e8d4e111",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f320ae89-d3b1-4f8a-ba62-32c4b31abc30",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "5079408e-0a4a-4fef-ae4f-ee638d4170f2",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "5a2d96bd-e208-432b-8b45-4d1ee82928dc",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\""
                    },
                    {
                      "id": "28c2ada3-b6d8-46ea-9dbc-e512b69aa0a5",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\""
                    },
                    {
                      "id": "6c602b08-aed9-4638-ab6b-c282286d4a05",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\""
                    },
                    {
                      "id": "f0d89c82-bdc4-4391-83ef-19349e68d66f",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "c911d7fc-b59b-429e-b703-a9be5d674908",
                      "tags": [],
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "33d161ce-4619-4b5c-a4e6-cba4ff51f022",
                        "location": {
                          "line": 47,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 47,
                              "column": 7
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 19
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 30
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 47
                            },
                            "value": "BirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9952e269-f9cb-4369-8615-fa9563be2be3",
                          "location": {
                            "line": 48,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 48,
                                "column": 7
                              },
                              "value": "Billy"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 19
                              },
                              "value": "Johnson"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 30
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 47
                              },
                              "value": "RR-1112223331"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c67ce9f1-a90e-42e6-a66d-b559f03cb4b4",
                  "tags": [
                    {
                      "location": {
                        "line": 50,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "96f88918-25c4-485e-9dbb-eda2e0e81c3d"
                    },
                    {
                      "location": {
                        "line": 50,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "60735e78-9954-4dfc-85c6-c44308cef547"
                    }
                  ],
                  "location": {
                    "line": 51,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receives a message that the record not found in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "ec93fd51-4c55-43d8-898e-8991c4aa07b3",
                      "location": {
                        "line": 52,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "f47ba719-3d3f-4252-87b3-0178195e2df4",
                      "location": {
                        "line": 53,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName"
                    },
                    {
                      "id": "28c2fbd9-c52b-4774-9744-f8f3139637c0",
                      "location": {
                        "line": 54,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "faba751b-6767-4d7b-a497-31f3c002567f",
                      "location": {
                        "line": 55,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "a081c95f-196c-492b-b233-3f8d27037e1e",
                      "location": {
                        "line": 56,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 404"
                    },
                    {
                      "id": "e0a16172-204a-48f3-b480-42ea857221f5",
                      "location": {
                        "line": 57,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "e5e6ff5e-edcd-4dcb-8bc9-d621f9b2c834",
                      "location": {
                        "line": 58,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 584000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 584000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 29810
              },
              "status": "PASSED"
            },
            "text": "The user wants to search for a record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d4f"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 584000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 588000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4301527
              },
              "status": "PASSED"
            },
            "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"Eva\" as \"FirstName\"",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d50"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 588000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 593000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4082324
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d51"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 593000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 593000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 46698
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d52"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 593000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 593000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 43862
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d53"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 593000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 593000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 43430
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d54"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 593000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 593000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 125586
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d55"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 593000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 594000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 174440
              },
              "status": "FAILED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"Eva\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d56"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "3925d3fa-c3c3-4b13-a446-73aea3b4d0ea",
          "id": "5cece48a-4515-43b0-8274-caad09728c7f",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 584000000
          }
        },
        "finish": {
          "testCaseStartedId": "5cece48a-4515-43b0-8274-caad09728c7f",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 594000000
          },
          "willBeRetried": false
        },
        "name": "User obtains a searched record from the database",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d4e"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/data/{registryname}/{versionnumber}/read\nFeature: API endpoint that allows users to search for a record in the database.\n\n  @smoke\n  Scenario: User obtains a searched record from the database smoke type test\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User obtains a searched record from the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\"\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\"\n\n    Examples:\n    | body_parameter     | parameter_value |\n    | ID                 | EE378129127223  |\n    | FirstName          | Eva             |\n    | LastName           | Smith           |\n    | BirthCertificateID | EE6546273487865 |\n\n  @unit @positive \n  Scenario: The user gets a searched record from the database when he specifies all parameters\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\"\n\n    Examples:\n    | FirstName | LastName | ID             | BirthCertificateID |\n    | Billy     | Johnson  | EE378129127223 | RR-1112223331      |\n\n  @unit @negative \n  Scenario: Receives a message that the record not found in the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 404\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message\n",
          "uri": "features/data_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "5f2694a1-dd1d-4f2d-94b1-6a823d268e9b"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/read",
                "id": "c21095cb-56f7-4d30-ac33-9aba5eb6a4be"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to search for a record in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "f7e1bafb-d970-4d13-97f6-0406f33813c1",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "746ecfbc-9203-449c-b5b3-5a071039f4ed"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User obtains a searched record from the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "804c3909-ea52-413c-8a3f-3b9886a26ef1",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "b7a5d569-1c8e-4798-9a10-3570714d3c80",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName"
                    },
                    {
                      "id": "3fb7af77-ba3b-4c44-b7e1-463f3abc3276",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "6b72e5db-57c1-495e-924e-a14a132d54bd",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "31ba05d3-b018-47b2-be75-e44cd8d59bcc",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "e3a5e237-b308-4cdb-8d46-9887e61e89d8",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "f5c5f16c-88a9-48b2-9885-067e56d8c423",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b33a506e-54a2-40a3-bf98-02d22489f5b9",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "a6695af9-15cc-402c-9689-2c9dc06ab875"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "13b2e373-f0a2-4c91-949b-09997b59ae7c"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User obtains a searched record from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "92d0010d-50d2-4815-85b2-11acde5e6203",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "8afb6ab2-ffb9-43bf-b98a-76841086f203",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\""
                    },
                    {
                      "id": "ba45b1b1-654a-4d66-905e-9431404c288d",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "ed132926-d0d6-4775-896b-82a6108a49b0",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "73f66a6e-3eb1-4a19-a2b7-7011767d0e85",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f237b34a-7fe7-4a51-a38d-f1825f0f77af",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "37915865-3967-4611-89b7-8804275f6b02",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "1125f510-9379-481a-986a-0c4f04978342",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "7e9679ca-cdf9-4c4d-a226-b1d2011d698e",
                      "tags": [],
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "1994a4ca-fb95-46fe-b580-6926ff8b7a99",
                        "location": {
                          "line": 26,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 26,
                              "column": 7
                            },
                            "value": "body_parameter"
                          },
                          {
                            "location": {
                              "line": 26,
                              "column": 28
                            },
                            "value": "parameter_value"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "bac79401-84d3-4ab8-aff4-7c0e0f632d98",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "ID"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 28
                              },
                              "value": "EE378129127223"
                            }
                          ]
                        },
                        {
                          "id": "3f591ade-79fe-4147-8b4c-a5fe419dc53e",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 28,
                                "column": 28
                              },
                              "value": "Eva"
                            }
                          ]
                        },
                        {
                          "id": "589232e9-bfd8-434a-8cc5-40bfbb2a0303",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "LastName"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 28
                              },
                              "value": "Smith"
                            }
                          ]
                        },
                        {
                          "id": "bec9af73-b289-474e-bc46-c49a9c569d1c",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "BirthCertificateID"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 28
                              },
                              "value": "EE6546273487865"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c9046a54-e1b1-4b74-a431-7a366e326d31",
                  "tags": [
                    {
                      "location": {
                        "line": 32,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "13505504-ccfb-4e83-b167-d20c2319cb9c"
                    },
                    {
                      "location": {
                        "line": 32,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "1554e01c-0b87-42df-9914-caa5b79b19b8"
                    }
                  ],
                  "location": {
                    "line": 33,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a searched record from the database when he specifies all parameters",
                  "description": "",
                  "steps": [
                    {
                      "id": "ebd4e2a4-c789-42f6-a9bb-2c714c515360",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "322440d2-dc67-42e0-8f62-81ef446dc813",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "f7eadd3f-1ea2-45ca-bad0-43e33199e98b",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "3d149d2b-8ba1-4919-9ec8-8074742b03c0",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "d9ccaf1d-cef9-489a-af22-c034e8d4e111",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f320ae89-d3b1-4f8a-ba62-32c4b31abc30",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "5079408e-0a4a-4fef-ae4f-ee638d4170f2",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "5a2d96bd-e208-432b-8b45-4d1ee82928dc",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\""
                    },
                    {
                      "id": "28c2ada3-b6d8-46ea-9dbc-e512b69aa0a5",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\""
                    },
                    {
                      "id": "6c602b08-aed9-4638-ab6b-c282286d4a05",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\""
                    },
                    {
                      "id": "f0d89c82-bdc4-4391-83ef-19349e68d66f",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "c911d7fc-b59b-429e-b703-a9be5d674908",
                      "tags": [],
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "33d161ce-4619-4b5c-a4e6-cba4ff51f022",
                        "location": {
                          "line": 47,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 47,
                              "column": 7
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 19
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 30
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 47
                            },
                            "value": "BirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9952e269-f9cb-4369-8615-fa9563be2be3",
                          "location": {
                            "line": 48,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 48,
                                "column": 7
                              },
                              "value": "Billy"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 19
                              },
                              "value": "Johnson"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 30
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 47
                              },
                              "value": "RR-1112223331"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c67ce9f1-a90e-42e6-a66d-b559f03cb4b4",
                  "tags": [
                    {
                      "location": {
                        "line": 50,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "96f88918-25c4-485e-9dbb-eda2e0e81c3d"
                    },
                    {
                      "location": {
                        "line": 50,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "60735e78-9954-4dfc-85c6-c44308cef547"
                    }
                  ],
                  "location": {
                    "line": 51,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receives a message that the record not found in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "ec93fd51-4c55-43d8-898e-8991c4aa07b3",
                      "location": {
                        "line": 52,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "f47ba719-3d3f-4252-87b3-0178195e2df4",
                      "location": {
                        "line": 53,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName"
                    },
                    {
                      "id": "28c2fbd9-c52b-4774-9744-f8f3139637c0",
                      "location": {
                        "line": 54,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "faba751b-6767-4d7b-a497-31f3c002567f",
                      "location": {
                        "line": 55,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "a081c95f-196c-492b-b233-3f8d27037e1e",
                      "location": {
                        "line": 56,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 404"
                    },
                    {
                      "id": "e0a16172-204a-48f3-b480-42ea857221f5",
                      "location": {
                        "line": 57,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "e5e6ff5e-edcd-4dcb-8bc9-d621f9b2c834",
                      "location": {
                        "line": 58,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 594000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 594000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 27755
              },
              "status": "PASSED"
            },
            "text": "The user wants to search for a record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d58"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 595000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 599000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4679714
              },
              "status": "PASSED"
            },
            "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"Smith\" as \"LastName\"",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d59"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 599000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 604000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4307854
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d5a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 604000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 604000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 49314
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d5b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 604000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 604000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 43548
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d5c"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 604000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 604000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 44348
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d5d"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 604000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 605000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 135391
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d5e"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 605000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 605000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 168684
              },
              "status": "FAILED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"Smith\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d5f"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "ccab529f-8e7d-40bc-a859-b15beb0cdd29",
          "id": "08fb6995-9666-40fc-8b41-78e481f9dd52",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 594000000
          }
        },
        "finish": {
          "testCaseStartedId": "08fb6995-9666-40fc-8b41-78e481f9dd52",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 605000000
          },
          "willBeRetried": false
        },
        "name": "User obtains a searched record from the database",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d57"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/data/{registryname}/{versionnumber}/read\nFeature: API endpoint that allows users to search for a record in the database.\n\n  @smoke\n  Scenario: User obtains a searched record from the database smoke type test\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User obtains a searched record from the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\"\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\"\n\n    Examples:\n    | body_parameter     | parameter_value |\n    | ID                 | EE378129127223  |\n    | FirstName          | Eva             |\n    | LastName           | Smith           |\n    | BirthCertificateID | EE6546273487865 |\n\n  @unit @positive \n  Scenario: The user gets a searched record from the database when he specifies all parameters\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\"\n\n    Examples:\n    | FirstName | LastName | ID             | BirthCertificateID |\n    | Billy     | Johnson  | EE378129127223 | RR-1112223331      |\n\n  @unit @negative \n  Scenario: Receives a message that the record not found in the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 404\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message\n",
          "uri": "features/data_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "5f2694a1-dd1d-4f2d-94b1-6a823d268e9b"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/read",
                "id": "c21095cb-56f7-4d30-ac33-9aba5eb6a4be"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to search for a record in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "f7e1bafb-d970-4d13-97f6-0406f33813c1",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "746ecfbc-9203-449c-b5b3-5a071039f4ed"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User obtains a searched record from the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "804c3909-ea52-413c-8a3f-3b9886a26ef1",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "b7a5d569-1c8e-4798-9a10-3570714d3c80",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName"
                    },
                    {
                      "id": "3fb7af77-ba3b-4c44-b7e1-463f3abc3276",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "6b72e5db-57c1-495e-924e-a14a132d54bd",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "31ba05d3-b018-47b2-be75-e44cd8d59bcc",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "e3a5e237-b308-4cdb-8d46-9887e61e89d8",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "f5c5f16c-88a9-48b2-9885-067e56d8c423",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b33a506e-54a2-40a3-bf98-02d22489f5b9",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "a6695af9-15cc-402c-9689-2c9dc06ab875"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "13b2e373-f0a2-4c91-949b-09997b59ae7c"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User obtains a searched record from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "92d0010d-50d2-4815-85b2-11acde5e6203",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "8afb6ab2-ffb9-43bf-b98a-76841086f203",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\""
                    },
                    {
                      "id": "ba45b1b1-654a-4d66-905e-9431404c288d",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "ed132926-d0d6-4775-896b-82a6108a49b0",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "73f66a6e-3eb1-4a19-a2b7-7011767d0e85",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f237b34a-7fe7-4a51-a38d-f1825f0f77af",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "37915865-3967-4611-89b7-8804275f6b02",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "1125f510-9379-481a-986a-0c4f04978342",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "7e9679ca-cdf9-4c4d-a226-b1d2011d698e",
                      "tags": [],
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "1994a4ca-fb95-46fe-b580-6926ff8b7a99",
                        "location": {
                          "line": 26,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 26,
                              "column": 7
                            },
                            "value": "body_parameter"
                          },
                          {
                            "location": {
                              "line": 26,
                              "column": 28
                            },
                            "value": "parameter_value"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "bac79401-84d3-4ab8-aff4-7c0e0f632d98",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "ID"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 28
                              },
                              "value": "EE378129127223"
                            }
                          ]
                        },
                        {
                          "id": "3f591ade-79fe-4147-8b4c-a5fe419dc53e",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 28,
                                "column": 28
                              },
                              "value": "Eva"
                            }
                          ]
                        },
                        {
                          "id": "589232e9-bfd8-434a-8cc5-40bfbb2a0303",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "LastName"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 28
                              },
                              "value": "Smith"
                            }
                          ]
                        },
                        {
                          "id": "bec9af73-b289-474e-bc46-c49a9c569d1c",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "BirthCertificateID"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 28
                              },
                              "value": "EE6546273487865"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c9046a54-e1b1-4b74-a431-7a366e326d31",
                  "tags": [
                    {
                      "location": {
                        "line": 32,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "13505504-ccfb-4e83-b167-d20c2319cb9c"
                    },
                    {
                      "location": {
                        "line": 32,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "1554e01c-0b87-42df-9914-caa5b79b19b8"
                    }
                  ],
                  "location": {
                    "line": 33,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a searched record from the database when he specifies all parameters",
                  "description": "",
                  "steps": [
                    {
                      "id": "ebd4e2a4-c789-42f6-a9bb-2c714c515360",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "322440d2-dc67-42e0-8f62-81ef446dc813",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "f7eadd3f-1ea2-45ca-bad0-43e33199e98b",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "3d149d2b-8ba1-4919-9ec8-8074742b03c0",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "d9ccaf1d-cef9-489a-af22-c034e8d4e111",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f320ae89-d3b1-4f8a-ba62-32c4b31abc30",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "5079408e-0a4a-4fef-ae4f-ee638d4170f2",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "5a2d96bd-e208-432b-8b45-4d1ee82928dc",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\""
                    },
                    {
                      "id": "28c2ada3-b6d8-46ea-9dbc-e512b69aa0a5",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\""
                    },
                    {
                      "id": "6c602b08-aed9-4638-ab6b-c282286d4a05",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\""
                    },
                    {
                      "id": "f0d89c82-bdc4-4391-83ef-19349e68d66f",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "c911d7fc-b59b-429e-b703-a9be5d674908",
                      "tags": [],
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "33d161ce-4619-4b5c-a4e6-cba4ff51f022",
                        "location": {
                          "line": 47,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 47,
                              "column": 7
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 19
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 30
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 47
                            },
                            "value": "BirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9952e269-f9cb-4369-8615-fa9563be2be3",
                          "location": {
                            "line": 48,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 48,
                                "column": 7
                              },
                              "value": "Billy"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 19
                              },
                              "value": "Johnson"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 30
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 47
                              },
                              "value": "RR-1112223331"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c67ce9f1-a90e-42e6-a66d-b559f03cb4b4",
                  "tags": [
                    {
                      "location": {
                        "line": 50,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "96f88918-25c4-485e-9dbb-eda2e0e81c3d"
                    },
                    {
                      "location": {
                        "line": 50,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "60735e78-9954-4dfc-85c6-c44308cef547"
                    }
                  ],
                  "location": {
                    "line": 51,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receives a message that the record not found in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "ec93fd51-4c55-43d8-898e-8991c4aa07b3",
                      "location": {
                        "line": 52,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "f47ba719-3d3f-4252-87b3-0178195e2df4",
                      "location": {
                        "line": 53,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName"
                    },
                    {
                      "id": "28c2fbd9-c52b-4774-9744-f8f3139637c0",
                      "location": {
                        "line": 54,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "faba751b-6767-4d7b-a497-31f3c002567f",
                      "location": {
                        "line": 55,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "a081c95f-196c-492b-b233-3f8d27037e1e",
                      "location": {
                        "line": 56,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 404"
                    },
                    {
                      "id": "e0a16172-204a-48f3-b480-42ea857221f5",
                      "location": {
                        "line": 57,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "e5e6ff5e-edcd-4dcb-8bc9-d621f9b2c834",
                      "location": {
                        "line": 58,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 606000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 606000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 32322
              },
              "status": "PASSED"
            },
            "text": "The user wants to search for a record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d61"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 606000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 610000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4415298
              },
              "status": "PASSED"
            },
            "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"EE6546273487865\" as \"BirthCertificateID\"",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d62"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 610000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 615000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4194177
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d63"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 615000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 615000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 51036
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d64"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 615000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 615000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 42864
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d65"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 615000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 615000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 43636
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d66"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 615000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 615000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 122474
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d67"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 615000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 616000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 146051
              },
              "status": "FAILED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"EE6546273487865\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d68"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "6d7ae044-e4c8-4d4f-888c-d1ceaeb588e6",
          "id": "447ba2b5-3630-420f-829a-42643afcd5f7",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 605000000
          }
        },
        "finish": {
          "testCaseStartedId": "447ba2b5-3630-420f-829a-42643afcd5f7",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 616000000
          },
          "willBeRetried": false
        },
        "name": "User obtains a searched record from the database",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d60"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/data/{registryname}/{versionnumber}/read\nFeature: API endpoint that allows users to search for a record in the database.\n\n  @smoke\n  Scenario: User obtains a searched record from the database smoke type test\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User obtains a searched record from the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\"\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\"\n\n    Examples:\n    | body_parameter     | parameter_value |\n    | ID                 | EE378129127223  |\n    | FirstName          | Eva             |\n    | LastName           | Smith           |\n    | BirthCertificateID | EE6546273487865 |\n\n  @unit @positive \n  Scenario: The user gets a searched record from the database when he specifies all parameters\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\"\n\n    Examples:\n    | FirstName | LastName | ID             | BirthCertificateID |\n    | Billy     | Johnson  | EE378129127223 | RR-1112223331      |\n\n  @unit @negative \n  Scenario: Receives a message that the record not found in the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 404\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message\n",
          "uri": "features/data_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "5f2694a1-dd1d-4f2d-94b1-6a823d268e9b"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/read",
                "id": "c21095cb-56f7-4d30-ac33-9aba5eb6a4be"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to search for a record in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "f7e1bafb-d970-4d13-97f6-0406f33813c1",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "746ecfbc-9203-449c-b5b3-5a071039f4ed"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User obtains a searched record from the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "804c3909-ea52-413c-8a3f-3b9886a26ef1",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "b7a5d569-1c8e-4798-9a10-3570714d3c80",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName"
                    },
                    {
                      "id": "3fb7af77-ba3b-4c44-b7e1-463f3abc3276",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "6b72e5db-57c1-495e-924e-a14a132d54bd",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "31ba05d3-b018-47b2-be75-e44cd8d59bcc",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "e3a5e237-b308-4cdb-8d46-9887e61e89d8",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "f5c5f16c-88a9-48b2-9885-067e56d8c423",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b33a506e-54a2-40a3-bf98-02d22489f5b9",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "a6695af9-15cc-402c-9689-2c9dc06ab875"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "13b2e373-f0a2-4c91-949b-09997b59ae7c"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User obtains a searched record from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "92d0010d-50d2-4815-85b2-11acde5e6203",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "8afb6ab2-ffb9-43bf-b98a-76841086f203",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\""
                    },
                    {
                      "id": "ba45b1b1-654a-4d66-905e-9431404c288d",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "ed132926-d0d6-4775-896b-82a6108a49b0",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "73f66a6e-3eb1-4a19-a2b7-7011767d0e85",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f237b34a-7fe7-4a51-a38d-f1825f0f77af",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "37915865-3967-4611-89b7-8804275f6b02",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "1125f510-9379-481a-986a-0c4f04978342",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "7e9679ca-cdf9-4c4d-a226-b1d2011d698e",
                      "tags": [],
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "1994a4ca-fb95-46fe-b580-6926ff8b7a99",
                        "location": {
                          "line": 26,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 26,
                              "column": 7
                            },
                            "value": "body_parameter"
                          },
                          {
                            "location": {
                              "line": 26,
                              "column": 28
                            },
                            "value": "parameter_value"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "bac79401-84d3-4ab8-aff4-7c0e0f632d98",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "ID"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 28
                              },
                              "value": "EE378129127223"
                            }
                          ]
                        },
                        {
                          "id": "3f591ade-79fe-4147-8b4c-a5fe419dc53e",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 28,
                                "column": 28
                              },
                              "value": "Eva"
                            }
                          ]
                        },
                        {
                          "id": "589232e9-bfd8-434a-8cc5-40bfbb2a0303",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "LastName"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 28
                              },
                              "value": "Smith"
                            }
                          ]
                        },
                        {
                          "id": "bec9af73-b289-474e-bc46-c49a9c569d1c",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "BirthCertificateID"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 28
                              },
                              "value": "EE6546273487865"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c9046a54-e1b1-4b74-a431-7a366e326d31",
                  "tags": [
                    {
                      "location": {
                        "line": 32,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "13505504-ccfb-4e83-b167-d20c2319cb9c"
                    },
                    {
                      "location": {
                        "line": 32,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "1554e01c-0b87-42df-9914-caa5b79b19b8"
                    }
                  ],
                  "location": {
                    "line": 33,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a searched record from the database when he specifies all parameters",
                  "description": "",
                  "steps": [
                    {
                      "id": "ebd4e2a4-c789-42f6-a9bb-2c714c515360",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "322440d2-dc67-42e0-8f62-81ef446dc813",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "f7eadd3f-1ea2-45ca-bad0-43e33199e98b",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "3d149d2b-8ba1-4919-9ec8-8074742b03c0",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "d9ccaf1d-cef9-489a-af22-c034e8d4e111",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f320ae89-d3b1-4f8a-ba62-32c4b31abc30",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "5079408e-0a4a-4fef-ae4f-ee638d4170f2",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "5a2d96bd-e208-432b-8b45-4d1ee82928dc",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\""
                    },
                    {
                      "id": "28c2ada3-b6d8-46ea-9dbc-e512b69aa0a5",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\""
                    },
                    {
                      "id": "6c602b08-aed9-4638-ab6b-c282286d4a05",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\""
                    },
                    {
                      "id": "f0d89c82-bdc4-4391-83ef-19349e68d66f",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "c911d7fc-b59b-429e-b703-a9be5d674908",
                      "tags": [],
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "33d161ce-4619-4b5c-a4e6-cba4ff51f022",
                        "location": {
                          "line": 47,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 47,
                              "column": 7
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 19
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 30
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 47
                            },
                            "value": "BirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9952e269-f9cb-4369-8615-fa9563be2be3",
                          "location": {
                            "line": 48,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 48,
                                "column": 7
                              },
                              "value": "Billy"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 19
                              },
                              "value": "Johnson"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 30
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 47
                              },
                              "value": "RR-1112223331"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c67ce9f1-a90e-42e6-a66d-b559f03cb4b4",
                  "tags": [
                    {
                      "location": {
                        "line": 50,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "96f88918-25c4-485e-9dbb-eda2e0e81c3d"
                    },
                    {
                      "location": {
                        "line": 50,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "60735e78-9954-4dfc-85c6-c44308cef547"
                    }
                  ],
                  "location": {
                    "line": 51,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receives a message that the record not found in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "ec93fd51-4c55-43d8-898e-8991c4aa07b3",
                      "location": {
                        "line": 52,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "f47ba719-3d3f-4252-87b3-0178195e2df4",
                      "location": {
                        "line": 53,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName"
                    },
                    {
                      "id": "28c2fbd9-c52b-4774-9744-f8f3139637c0",
                      "location": {
                        "line": 54,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "faba751b-6767-4d7b-a497-31f3c002567f",
                      "location": {
                        "line": 55,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "a081c95f-196c-492b-b233-3f8d27037e1e",
                      "location": {
                        "line": 56,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 404"
                    },
                    {
                      "id": "e0a16172-204a-48f3-b480-42ea857221f5",
                      "location": {
                        "line": 57,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "e5e6ff5e-edcd-4dcb-8bc9-d621f9b2c834",
                      "location": {
                        "line": 58,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 616000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 617000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 29750
              },
              "status": "PASSED"
            },
            "text": "The user wants to search for a record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d6a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 617000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 621000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4218250
              },
              "status": "PASSED"
            },
            "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"Billy\" as FirstName, \"Johnson\" as LastName, \"EE378129127223\" as ID, \"RR-1112223331\" as BirthCertificateID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d6b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 621000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 625000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3921338
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d6c"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 625000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 625000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 51195
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d6d"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 625000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 625000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 36856
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d6e"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 625000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 625000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 39889
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d6f"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 626000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 626000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 124775
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d70"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 626000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 626000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 143492
              },
              "status": "FAILED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"Billy\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d71"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 626000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 626000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"Johnson\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d72"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 626000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 626000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"EE378129127223\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d73"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 626000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 626000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"RR-1112223331\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d74"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "2cfd31ef-f305-4ef9-ab39-1d623699ab2c",
          "id": "56e5b8be-a600-4fe2-a055-0099fb797596",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 616000000
          }
        },
        "finish": {
          "testCaseStartedId": "56e5b8be-a600-4fe2-a055-0099fb797596",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 627000000
          },
          "willBeRetried": false
        },
        "name": "The user gets a searched record from the database when he specifies all parameters",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d69"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/data/{registryname}/{versionnumber}/read\nFeature: API endpoint that allows users to search for a record in the database.\n\n  @smoke\n  Scenario: User obtains a searched record from the database smoke type test\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User obtains a searched record from the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\"\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\"\n\n    Examples:\n    | body_parameter     | parameter_value |\n    | ID                 | EE378129127223  |\n    | FirstName          | Eva             |\n    | LastName           | Smith           |\n    | BirthCertificateID | EE6546273487865 |\n\n  @unit @positive \n  Scenario: The user gets a searched record from the database when he specifies all parameters\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 200\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema\n    And The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\"\n    And The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\"\n\n    Examples:\n    | FirstName | LastName | ID             | BirthCertificateID |\n    | Billy     | Johnson  | EE378129127223 | RR-1112223331      |\n\n  @unit @negative \n  Scenario: Receives a message that the record not found in the database\n    Given The user wants to search for a record in the database\n    When User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/read endpoint\n    And The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have status 404\n    And The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message\n",
          "uri": "features/data_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "5f2694a1-dd1d-4f2d-94b1-6a823d268e9b"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/read",
                "id": "c21095cb-56f7-4d30-ac33-9aba5eb6a4be"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to search for a record in the database.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "f7e1bafb-d970-4d13-97f6-0406f33813c1",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "746ecfbc-9203-449c-b5b3-5a071039f4ed"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User obtains a searched record from the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "804c3909-ea52-413c-8a3f-3b9886a26ef1",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "b7a5d569-1c8e-4798-9a10-3570714d3c80",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"John Helmut\" as FirstName"
                    },
                    {
                      "id": "3fb7af77-ba3b-4c44-b7e1-463f3abc3276",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "6b72e5db-57c1-495e-924e-a14a132d54bd",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "31ba05d3-b018-47b2-be75-e44cd8d59bcc",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "e3a5e237-b308-4cdb-8d46-9887e61e89d8",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "f5c5f16c-88a9-48b2-9885-067e56d8c423",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "b33a506e-54a2-40a3-bf98-02d22489f5b9",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "a6695af9-15cc-402c-9689-2c9dc06ab875"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "13b2e373-f0a2-4c91-949b-09997b59ae7c"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User obtains a searched record from the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "92d0010d-50d2-4815-85b2-11acde5e6203",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "8afb6ab2-ffb9-43bf-b98a-76841086f203",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<parameter_value>\" as \"<body_parameter>\""
                    },
                    {
                      "id": "ba45b1b1-654a-4d66-905e-9431404c288d",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "ed132926-d0d6-4775-896b-82a6108a49b0",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "73f66a6e-3eb1-4a19-a2b7-7011767d0e85",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f237b34a-7fe7-4a51-a38d-f1825f0f77af",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "37915865-3967-4611-89b7-8804275f6b02",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "1125f510-9379-481a-986a-0c4f04978342",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"<body_parameter>\" property equals \"<parameter_value>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "7e9679ca-cdf9-4c4d-a226-b1d2011d698e",
                      "tags": [],
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "1994a4ca-fb95-46fe-b580-6926ff8b7a99",
                        "location": {
                          "line": 26,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 26,
                              "column": 7
                            },
                            "value": "body_parameter"
                          },
                          {
                            "location": {
                              "line": 26,
                              "column": 28
                            },
                            "value": "parameter_value"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "bac79401-84d3-4ab8-aff4-7c0e0f632d98",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "ID"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 28
                              },
                              "value": "EE378129127223"
                            }
                          ]
                        },
                        {
                          "id": "3f591ade-79fe-4147-8b4c-a5fe419dc53e",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "FirstName"
                            },
                            {
                              "location": {
                                "line": 28,
                                "column": 28
                              },
                              "value": "Eva"
                            }
                          ]
                        },
                        {
                          "id": "589232e9-bfd8-434a-8cc5-40bfbb2a0303",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "LastName"
                            },
                            {
                              "location": {
                                "line": 29,
                                "column": 28
                              },
                              "value": "Smith"
                            }
                          ]
                        },
                        {
                          "id": "bec9af73-b289-474e-bc46-c49a9c569d1c",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "BirthCertificateID"
                            },
                            {
                              "location": {
                                "line": 30,
                                "column": 28
                              },
                              "value": "EE6546273487865"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c9046a54-e1b1-4b74-a431-7a366e326d31",
                  "tags": [
                    {
                      "location": {
                        "line": 32,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "13505504-ccfb-4e83-b167-d20c2319cb9c"
                    },
                    {
                      "location": {
                        "line": 32,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "1554e01c-0b87-42df-9914-caa5b79b19b8"
                    }
                  ],
                  "location": {
                    "line": 33,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user gets a searched record from the database when he specifies all parameters",
                  "description": "",
                  "steps": [
                    {
                      "id": "ebd4e2a4-c789-42f6-a9bb-2c714c515360",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "322440d2-dc67-42e0-8f62-81ef446dc813",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName, \"<ID>\" as ID, \"<BirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "f7eadd3f-1ea2-45ca-bad0-43e33199e98b",
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "3d149d2b-8ba1-4919-9ec8-8074742b03c0",
                      "location": {
                        "line": 37,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "d9ccaf1d-cef9-489a-af22-c034e8d4e111",
                      "location": {
                        "line": 38,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 200"
                    },
                    {
                      "id": "f320ae89-d3b1-4f8a-ba62-32c4b31abc30",
                      "location": {
                        "line": 39,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "5079408e-0a4a-4fef-ae4f-ee638d4170f2",
                      "location": {
                        "line": 40,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema"
                    },
                    {
                      "id": "5a2d96bd-e208-432b-8b45-4d1ee82928dc",
                      "location": {
                        "line": 41,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"FirstName\" property equals \"<FirstName>\""
                    },
                    {
                      "id": "28c2ada3-b6d8-46ea-9dbc-e512b69aa0a5",
                      "location": {
                        "line": 42,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"LastName\" property equals \"<LastName>\""
                    },
                    {
                      "id": "6c602b08-aed9-4638-ab6b-c282286d4a05",
                      "location": {
                        "line": 43,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"ID\" property equals \"<ID>\""
                    },
                    {
                      "id": "f0d89c82-bdc4-4391-83ef-19349e68d66f",
                      "location": {
                        "line": 44,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read response should contain \"BirthCertificateID\" property equals \"<BirthCertificateID>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "c911d7fc-b59b-429e-b703-a9be5d674908",
                      "tags": [],
                      "location": {
                        "line": 46,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "33d161ce-4619-4b5c-a4e6-cba4ff51f022",
                        "location": {
                          "line": 47,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 47,
                              "column": 7
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 19
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 30
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 47,
                              "column": 47
                            },
                            "value": "BirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "9952e269-f9cb-4369-8615-fa9563be2be3",
                          "location": {
                            "line": 48,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 48,
                                "column": 7
                              },
                              "value": "Billy"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 19
                              },
                              "value": "Johnson"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 30
                              },
                              "value": "EE378129127223"
                            },
                            {
                              "location": {
                                "line": 48,
                                "column": 47
                              },
                              "value": "RR-1112223331"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "c67ce9f1-a90e-42e6-a66d-b559f03cb4b4",
                  "tags": [
                    {
                      "location": {
                        "line": 50,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "96f88918-25c4-485e-9dbb-eda2e0e81c3d"
                    },
                    {
                      "location": {
                        "line": 50,
                        "column": 9
                      },
                      "name": "@negative",
                      "id": "60735e78-9954-4dfc-85c6-c44308cef547"
                    }
                  ],
                  "location": {
                    "line": 51,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Receives a message that the record not found in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "ec93fd51-4c55-43d8-898e-8991c4aa07b3",
                      "location": {
                        "line": 52,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "The user wants to search for a record in the database"
                    },
                    {
                      "id": "f47ba719-3d3f-4252-87b3-0178195e2df4",
                      "location": {
                        "line": 53,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName"
                    },
                    {
                      "id": "28c2fbd9-c52b-4774-9744-f8f3139637c0",
                      "location": {
                        "line": 54,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint"
                    },
                    {
                      "id": "faba751b-6767-4d7b-a497-31f3c002567f",
                      "location": {
                        "line": 55,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "a081c95f-196c-492b-b233-3f8d27037e1e",
                      "location": {
                        "line": 56,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 404"
                    },
                    {
                      "id": "e0a16172-204a-48f3-b480-42ea857221f5",
                      "location": {
                        "line": 57,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "e5e6ff5e-edcd-4dcb-8bc9-d621f9b2c834",
                      "location": {
                        "line": 58,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 627000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 627000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 30320
              },
              "status": "PASSED"
            },
            "text": "The user wants to search for a record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d76"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 627000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 631000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4060785
              },
              "status": "PASSED"
            },
            "text": "User sends POST /data/{registryname}/{versionnumber}/read request with given Information-Mediator-Client header, \"registryname\" as registryname, \"111\" as versionnumber, \"NotExist\" as FirstName",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d77"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 631000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 635000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3933484
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/read endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d78"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 635000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 635000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 45513
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d79"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 636000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 636000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 362369
              },
              "status": "FAILED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have status 404",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d7a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 636000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 636000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d7b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 636000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 637000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "The /data/{registryname}/{versionnumber}/read endpoint response should match json schema with error message",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d7c"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "0b967a1c-09ca-4c24-852e-6f83aa35f717",
          "id": "a1e39813-8bb0-466f-a010-691670b4ff84",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 627000000
          }
        },
        "finish": {
          "testCaseStartedId": "a1e39813-8bb0-466f-a010-691670b4ff84",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 637000000
          },
          "willBeRetried": false
        },
        "name": "Receives a message that the record not found in the database",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d75"
        }
      },
      {
        "source": {
          "data": "@method=PUT @endpoint=/data/{registryname}/{versionnumber}/update-entries\nFeature: API endpoint that updates multiple records in the registry database that match the input query.\n\n  @smoke\n  Scenario: Successfully updates multiple records in the database by first name smoke type test\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"Alina\" as FirstName and write object that contains content object with given: \"Jack\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n  \n  @unit @positive\n  Scenario Outline: Successfully updates multiple records in the database by first name\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"<FirstName>\" as FirstName and write object that contains content object with given: \"<UpdatedFirstName>\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n\n    Examples:\n    | FirstName | UpdatedFirstName |\n    | Casandra  | Tamara           |\n    | Olga      | Alice            |\n\n  \n  @unit @positive\n  Scenario: Successfully updates multiple records in the database\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"EE1112223331\" as ID, \"Billy\" as FirstName, \"Johnson\" as LastName, \"RR-1112223331\" as BirthCertificateID and write object that contains content object with given: \"EE1112223331\" as ID, \"Bob\" as FirstName, \"Son\" as LastName, \"RR-1112223331\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n",
          "uri": "features/data_update_entries.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=PUT",
                "id": "acf0510d-7046-4aac-b52f-219e71dd5ccf"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update-entries",
                "id": "0095951e-b258-4695-8e8c-ddce124cc8c8"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that updates multiple records in the registry database that match the input query.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "1699d3aa-91db-4d2d-9714-658a792e8f8f",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "a1bca6dc-4210-4308-946d-b9c872ca68ef"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates multiple records in the database by first name smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "d74fd7ad-0280-4930-b268-204fcb21b4ee",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "3c5490bd-c028-4c24-a363-301f347585e3",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "b9de6060-1e77-472c-bc7d-fdbb8f347abc",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"Alina\" as FirstName and write object that contains content object with given: \"Jack\" as FirstName"
                    },
                    {
                      "id": "0d095d69-7c74-48a6-a172-e9b258188075",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "b99a35b9-a652-47a8-875f-adb1a98e5184",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "5945e9c6-fdde-4382-84df-a610406c4084",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "566b07c9-aa4e-4d60-a1da-279b79e37dfd",
                  "tags": [
                    {
                      "location": {
                        "line": 13,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "b75a23f9-2936-4ae9-84cd-ba0fcdc1dbc4"
                    },
                    {
                      "location": {
                        "line": 13,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "d4f94de7-ff36-4370-b4a5-d4f7a82b66f3"
                    }
                  ],
                  "location": {
                    "line": 14,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully updates multiple records in the database by first name",
                  "description": "",
                  "steps": [
                    {
                      "id": "0899d5fb-fb29-446b-940b-19c26e18e8b6",
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "dcf30747-55fd-42d5-b638-944e5baa6b97",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "b9063835-f3ea-4a0c-8148-ca969b10f33e",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"<FirstName>\" as FirstName and write object that contains content object with given: \"<UpdatedFirstName>\" as FirstName"
                    },
                    {
                      "id": "09fc3736-265f-4559-ac1c-e7fec3220bff",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "cf72fdaf-cce6-4a0f-95a9-b067379bf662",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "dfa155a3-80e7-4c71-b9d1-29800264db36",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": [
                    {
                      "id": "d989e9d2-0e86-4294-9d7c-911a2eed3184",
                      "tags": [],
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "3cb41db4-51ef-4115-b087-d80c76af6c41",
                        "location": {
                          "line": 23,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 23,
                              "column": 7
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 23,
                              "column": 19
                            },
                            "value": "UpdatedFirstName"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "880e1f44-9f4c-4edc-b0fb-36849a54e764",
                          "location": {
                            "line": 24,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 24,
                                "column": 7
                              },
                              "value": "Casandra"
                            },
                            {
                              "location": {
                                "line": 24,
                                "column": 19
                              },
                              "value": "Tamara"
                            }
                          ]
                        },
                        {
                          "id": "9d7b5bd6-ff94-4533-bcf6-9625f9533f5d",
                          "location": {
                            "line": 25,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 25,
                                "column": 7
                              },
                              "value": "Olga"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 19
                              },
                              "value": "Alice"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "dab3b9ff-fe05-4d99-a6c7-22e8c07d65c2",
                  "tags": [
                    {
                      "location": {
                        "line": 28,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "b511ea0c-85fd-4128-bf21-1e99b651b794"
                    },
                    {
                      "location": {
                        "line": 28,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "f063c76a-c6e6-4855-82bb-a1995984f090"
                    }
                  ],
                  "location": {
                    "line": 29,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates multiple records in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "28e2777b-cde7-4cf9-9f0d-309e9d298abf",
                      "location": {
                        "line": 30,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "c47c940d-edf8-4d05-9d10-a4466a242379",
                      "location": {
                        "line": 31,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "4ee78837-f422-4524-be39-559d3c62aa24",
                      "location": {
                        "line": 32,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"EE1112223331\" as ID, \"Billy\" as FirstName, \"Johnson\" as LastName, \"RR-1112223331\" as BirthCertificateID and write object that contains content object with given: \"EE1112223331\" as ID, \"Bob\" as FirstName, \"Son\" as LastName, \"RR-1112223331\" as BirthCertificateID"
                    },
                    {
                      "id": "231098e5-5518-46bd-89c3-87dab633e899",
                      "location": {
                        "line": 33,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "6d439cd6-c53f-4fed-afe5-95df6b731062",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "0e97b064-fb44-4d96-9cbb-b3a2e2eda119",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update_entries.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 637000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 637000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 55709
              },
              "status": "PASSED"
            },
            "text": "User wants to update multiple records in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d7e"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 637000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 641000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4205879
              },
              "status": "PASSED"
            },
            "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d7f"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 642000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 646000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4088806
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with two objects: query object that contains content object with given: \"Alina\" as FirstName and write object that contains content object with given: \"Jack\" as FirstName",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d80"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 646000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 650000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4117217
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d81"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 650000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 650000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 82149
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d82"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 650000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 651000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 87303
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d83"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "f30ca740-191a-44fd-b711-891434a4e89a",
          "id": "6127315d-64be-4309-994c-c364e8692b82",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 637000000
          }
        },
        "finish": {
          "testCaseStartedId": "6127315d-64be-4309-994c-c364e8692b82",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 651000000
          },
          "willBeRetried": false
        },
        "name": "Successfully updates multiple records in the database by first name smoke type test",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d7d"
        }
      },
      {
        "source": {
          "data": "@method=PUT @endpoint=/data/{registryname}/{versionnumber}/update-entries\nFeature: API endpoint that updates multiple records in the registry database that match the input query.\n\n  @smoke\n  Scenario: Successfully updates multiple records in the database by first name smoke type test\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"Alina\" as FirstName and write object that contains content object with given: \"Jack\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n  \n  @unit @positive\n  Scenario Outline: Successfully updates multiple records in the database by first name\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"<FirstName>\" as FirstName and write object that contains content object with given: \"<UpdatedFirstName>\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n\n    Examples:\n    | FirstName | UpdatedFirstName |\n    | Casandra  | Tamara           |\n    | Olga      | Alice            |\n\n  \n  @unit @positive\n  Scenario: Successfully updates multiple records in the database\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"EE1112223331\" as ID, \"Billy\" as FirstName, \"Johnson\" as LastName, \"RR-1112223331\" as BirthCertificateID and write object that contains content object with given: \"EE1112223331\" as ID, \"Bob\" as FirstName, \"Son\" as LastName, \"RR-1112223331\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n",
          "uri": "features/data_update_entries.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=PUT",
                "id": "acf0510d-7046-4aac-b52f-219e71dd5ccf"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update-entries",
                "id": "0095951e-b258-4695-8e8c-ddce124cc8c8"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that updates multiple records in the registry database that match the input query.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "1699d3aa-91db-4d2d-9714-658a792e8f8f",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "a1bca6dc-4210-4308-946d-b9c872ca68ef"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates multiple records in the database by first name smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "d74fd7ad-0280-4930-b268-204fcb21b4ee",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "3c5490bd-c028-4c24-a363-301f347585e3",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "b9de6060-1e77-472c-bc7d-fdbb8f347abc",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"Alina\" as FirstName and write object that contains content object with given: \"Jack\" as FirstName"
                    },
                    {
                      "id": "0d095d69-7c74-48a6-a172-e9b258188075",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "b99a35b9-a652-47a8-875f-adb1a98e5184",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "5945e9c6-fdde-4382-84df-a610406c4084",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "566b07c9-aa4e-4d60-a1da-279b79e37dfd",
                  "tags": [
                    {
                      "location": {
                        "line": 13,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "b75a23f9-2936-4ae9-84cd-ba0fcdc1dbc4"
                    },
                    {
                      "location": {
                        "line": 13,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "d4f94de7-ff36-4370-b4a5-d4f7a82b66f3"
                    }
                  ],
                  "location": {
                    "line": 14,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully updates multiple records in the database by first name",
                  "description": "",
                  "steps": [
                    {
                      "id": "0899d5fb-fb29-446b-940b-19c26e18e8b6",
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "dcf30747-55fd-42d5-b638-944e5baa6b97",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "b9063835-f3ea-4a0c-8148-ca969b10f33e",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"<FirstName>\" as FirstName and write object that contains content object with given: \"<UpdatedFirstName>\" as FirstName"
                    },
                    {
                      "id": "09fc3736-265f-4559-ac1c-e7fec3220bff",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "cf72fdaf-cce6-4a0f-95a9-b067379bf662",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "dfa155a3-80e7-4c71-b9d1-29800264db36",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": [
                    {
                      "id": "d989e9d2-0e86-4294-9d7c-911a2eed3184",
                      "tags": [],
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "3cb41db4-51ef-4115-b087-d80c76af6c41",
                        "location": {
                          "line": 23,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 23,
                              "column": 7
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 23,
                              "column": 19
                            },
                            "value": "UpdatedFirstName"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "880e1f44-9f4c-4edc-b0fb-36849a54e764",
                          "location": {
                            "line": 24,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 24,
                                "column": 7
                              },
                              "value": "Casandra"
                            },
                            {
                              "location": {
                                "line": 24,
                                "column": 19
                              },
                              "value": "Tamara"
                            }
                          ]
                        },
                        {
                          "id": "9d7b5bd6-ff94-4533-bcf6-9625f9533f5d",
                          "location": {
                            "line": 25,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 25,
                                "column": 7
                              },
                              "value": "Olga"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 19
                              },
                              "value": "Alice"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "dab3b9ff-fe05-4d99-a6c7-22e8c07d65c2",
                  "tags": [
                    {
                      "location": {
                        "line": 28,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "b511ea0c-85fd-4128-bf21-1e99b651b794"
                    },
                    {
                      "location": {
                        "line": 28,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "f063c76a-c6e6-4855-82bb-a1995984f090"
                    }
                  ],
                  "location": {
                    "line": 29,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates multiple records in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "28e2777b-cde7-4cf9-9f0d-309e9d298abf",
                      "location": {
                        "line": 30,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "c47c940d-edf8-4d05-9d10-a4466a242379",
                      "location": {
                        "line": 31,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "4ee78837-f422-4524-be39-559d3c62aa24",
                      "location": {
                        "line": 32,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"EE1112223331\" as ID, \"Billy\" as FirstName, \"Johnson\" as LastName, \"RR-1112223331\" as BirthCertificateID and write object that contains content object with given: \"EE1112223331\" as ID, \"Bob\" as FirstName, \"Son\" as LastName, \"RR-1112223331\" as BirthCertificateID"
                    },
                    {
                      "id": "231098e5-5518-46bd-89c3-87dab633e899",
                      "location": {
                        "line": 33,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "6d439cd6-c53f-4fed-afe5-95df6b731062",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "0e97b064-fb44-4d96-9cbb-b3a2e2eda119",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update_entries.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 651000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 651000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 26978
              },
              "status": "PASSED"
            },
            "text": "User wants to update multiple records in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d85"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 651000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 655000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4003789
              },
              "status": "PASSED"
            },
            "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d86"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 655000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 659000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4034741
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with two objects: query object that contains content object with given: \"Casandra\" as FirstName and write object that contains content object with given: \"Tamara\" as FirstName",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d87"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 660000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 664000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3991360
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d88"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 664000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 664000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 48382
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d89"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 664000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 664000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 49768
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d8a"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "ab11f9a5-4d9d-4ce4-be53-a3faf4a01bc2",
          "id": "0d812cbd-31d2-424e-b14f-c5c9d1b6e478",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 651000000
          }
        },
        "finish": {
          "testCaseStartedId": "0d812cbd-31d2-424e-b14f-c5c9d1b6e478",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 664000000
          },
          "willBeRetried": false
        },
        "name": "Successfully updates multiple records in the database by first name",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d84"
        }
      },
      {
        "source": {
          "data": "@method=PUT @endpoint=/data/{registryname}/{versionnumber}/update-entries\nFeature: API endpoint that updates multiple records in the registry database that match the input query.\n\n  @smoke\n  Scenario: Successfully updates multiple records in the database by first name smoke type test\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"Alina\" as FirstName and write object that contains content object with given: \"Jack\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n  \n  @unit @positive\n  Scenario Outline: Successfully updates multiple records in the database by first name\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"<FirstName>\" as FirstName and write object that contains content object with given: \"<UpdatedFirstName>\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n\n    Examples:\n    | FirstName | UpdatedFirstName |\n    | Casandra  | Tamara           |\n    | Olga      | Alice            |\n\n  \n  @unit @positive\n  Scenario: Successfully updates multiple records in the database\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"EE1112223331\" as ID, \"Billy\" as FirstName, \"Johnson\" as LastName, \"RR-1112223331\" as BirthCertificateID and write object that contains content object with given: \"EE1112223331\" as ID, \"Bob\" as FirstName, \"Son\" as LastName, \"RR-1112223331\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n",
          "uri": "features/data_update_entries.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=PUT",
                "id": "acf0510d-7046-4aac-b52f-219e71dd5ccf"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update-entries",
                "id": "0095951e-b258-4695-8e8c-ddce124cc8c8"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that updates multiple records in the registry database that match the input query.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "1699d3aa-91db-4d2d-9714-658a792e8f8f",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "a1bca6dc-4210-4308-946d-b9c872ca68ef"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates multiple records in the database by first name smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "d74fd7ad-0280-4930-b268-204fcb21b4ee",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "3c5490bd-c028-4c24-a363-301f347585e3",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "b9de6060-1e77-472c-bc7d-fdbb8f347abc",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"Alina\" as FirstName and write object that contains content object with given: \"Jack\" as FirstName"
                    },
                    {
                      "id": "0d095d69-7c74-48a6-a172-e9b258188075",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "b99a35b9-a652-47a8-875f-adb1a98e5184",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "5945e9c6-fdde-4382-84df-a610406c4084",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "566b07c9-aa4e-4d60-a1da-279b79e37dfd",
                  "tags": [
                    {
                      "location": {
                        "line": 13,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "b75a23f9-2936-4ae9-84cd-ba0fcdc1dbc4"
                    },
                    {
                      "location": {
                        "line": 13,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "d4f94de7-ff36-4370-b4a5-d4f7a82b66f3"
                    }
                  ],
                  "location": {
                    "line": 14,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully updates multiple records in the database by first name",
                  "description": "",
                  "steps": [
                    {
                      "id": "0899d5fb-fb29-446b-940b-19c26e18e8b6",
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "dcf30747-55fd-42d5-b638-944e5baa6b97",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "b9063835-f3ea-4a0c-8148-ca969b10f33e",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"<FirstName>\" as FirstName and write object that contains content object with given: \"<UpdatedFirstName>\" as FirstName"
                    },
                    {
                      "id": "09fc3736-265f-4559-ac1c-e7fec3220bff",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "cf72fdaf-cce6-4a0f-95a9-b067379bf662",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "dfa155a3-80e7-4c71-b9d1-29800264db36",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": [
                    {
                      "id": "d989e9d2-0e86-4294-9d7c-911a2eed3184",
                      "tags": [],
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "3cb41db4-51ef-4115-b087-d80c76af6c41",
                        "location": {
                          "line": 23,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 23,
                              "column": 7
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 23,
                              "column": 19
                            },
                            "value": "UpdatedFirstName"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "880e1f44-9f4c-4edc-b0fb-36849a54e764",
                          "location": {
                            "line": 24,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 24,
                                "column": 7
                              },
                              "value": "Casandra"
                            },
                            {
                              "location": {
                                "line": 24,
                                "column": 19
                              },
                              "value": "Tamara"
                            }
                          ]
                        },
                        {
                          "id": "9d7b5bd6-ff94-4533-bcf6-9625f9533f5d",
                          "location": {
                            "line": 25,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 25,
                                "column": 7
                              },
                              "value": "Olga"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 19
                              },
                              "value": "Alice"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "dab3b9ff-fe05-4d99-a6c7-22e8c07d65c2",
                  "tags": [
                    {
                      "location": {
                        "line": 28,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "b511ea0c-85fd-4128-bf21-1e99b651b794"
                    },
                    {
                      "location": {
                        "line": 28,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "f063c76a-c6e6-4855-82bb-a1995984f090"
                    }
                  ],
                  "location": {
                    "line": 29,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates multiple records in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "28e2777b-cde7-4cf9-9f0d-309e9d298abf",
                      "location": {
                        "line": 30,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "c47c940d-edf8-4d05-9d10-a4466a242379",
                      "location": {
                        "line": 31,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "4ee78837-f422-4524-be39-559d3c62aa24",
                      "location": {
                        "line": 32,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"EE1112223331\" as ID, \"Billy\" as FirstName, \"Johnson\" as LastName, \"RR-1112223331\" as BirthCertificateID and write object that contains content object with given: \"EE1112223331\" as ID, \"Bob\" as FirstName, \"Son\" as LastName, \"RR-1112223331\" as BirthCertificateID"
                    },
                    {
                      "id": "231098e5-5518-46bd-89c3-87dab633e899",
                      "location": {
                        "line": 33,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "6d439cd6-c53f-4fed-afe5-95df6b731062",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "0e97b064-fb44-4d96-9cbb-b3a2e2eda119",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update_entries.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 664000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 665000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 26079
              },
              "status": "PASSED"
            },
            "text": "User wants to update multiple records in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d8c"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 665000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 669000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3947430
              },
              "status": "PASSED"
            },
            "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d8d"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 669000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 673000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4017507
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with two objects: query object that contains content object with given: \"Olga\" as FirstName and write object that contains content object with given: \"Alice\" as FirstName",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d8e"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 673000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 679000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5559806
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d8f"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 679000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 679000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 48697
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d90"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 679000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 679000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 56039
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d91"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "a9a9c0aa-3e0a-4385-8ba6-2d5b2fffb901",
          "id": "0530bc6e-2282-47d1-a1c6-4c6b9db63513",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 664000000
          }
        },
        "finish": {
          "testCaseStartedId": "0530bc6e-2282-47d1-a1c6-4c6b9db63513",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 679000000
          },
          "willBeRetried": false
        },
        "name": "Successfully updates multiple records in the database by first name",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d8b"
        }
      },
      {
        "source": {
          "data": "@method=PUT @endpoint=/data/{registryname}/{versionnumber}/update-entries\nFeature: API endpoint that updates multiple records in the registry database that match the input query.\n\n  @smoke\n  Scenario: Successfully updates multiple records in the database by first name smoke type test\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"Alina\" as FirstName and write object that contains content object with given: \"Jack\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n  \n  @unit @positive\n  Scenario Outline: Successfully updates multiple records in the database by first name\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"<FirstName>\" as FirstName and write object that contains content object with given: \"<UpdatedFirstName>\" as FirstName\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n\n    Examples:\n    | FirstName | UpdatedFirstName |\n    | Casandra  | Tamara           |\n    | Olga      | Alice            |\n\n  \n  @unit @positive\n  Scenario: Successfully updates multiple records in the database\n    Given User wants to update multiple records in the database\n    When User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with two objects: query object that contains content object with given: \"EE1112223331\" as ID, \"Billy\" as FirstName, \"Johnson\" as LastName, \"RR-1112223331\" as BirthCertificateID and write object that contains content object with given: \"EE1112223331\" as ID, \"Bob\" as FirstName, \"Son\" as LastName, \"RR-1112223331\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint\n    And The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-entries response should have status 200\n",
          "uri": "features/data_update_entries.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=PUT",
                "id": "acf0510d-7046-4aac-b52f-219e71dd5ccf"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update-entries",
                "id": "0095951e-b258-4695-8e8c-ddce124cc8c8"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that updates multiple records in the registry database that match the input query.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "1699d3aa-91db-4d2d-9714-658a792e8f8f",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "a1bca6dc-4210-4308-946d-b9c872ca68ef"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates multiple records in the database by first name smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "d74fd7ad-0280-4930-b268-204fcb21b4ee",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "3c5490bd-c028-4c24-a363-301f347585e3",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "b9de6060-1e77-472c-bc7d-fdbb8f347abc",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"Alina\" as FirstName and write object that contains content object with given: \"Jack\" as FirstName"
                    },
                    {
                      "id": "0d095d69-7c74-48a6-a172-e9b258188075",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "b99a35b9-a652-47a8-875f-adb1a98e5184",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "5945e9c6-fdde-4382-84df-a610406c4084",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "566b07c9-aa4e-4d60-a1da-279b79e37dfd",
                  "tags": [
                    {
                      "location": {
                        "line": 13,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "b75a23f9-2936-4ae9-84cd-ba0fcdc1dbc4"
                    },
                    {
                      "location": {
                        "line": 13,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "d4f94de7-ff36-4370-b4a5-d4f7a82b66f3"
                    }
                  ],
                  "location": {
                    "line": 14,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully updates multiple records in the database by first name",
                  "description": "",
                  "steps": [
                    {
                      "id": "0899d5fb-fb29-446b-940b-19c26e18e8b6",
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "dcf30747-55fd-42d5-b638-944e5baa6b97",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "b9063835-f3ea-4a0c-8148-ca969b10f33e",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"<FirstName>\" as FirstName and write object that contains content object with given: \"<UpdatedFirstName>\" as FirstName"
                    },
                    {
                      "id": "09fc3736-265f-4559-ac1c-e7fec3220bff",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "cf72fdaf-cce6-4a0f-95a9-b067379bf662",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "dfa155a3-80e7-4c71-b9d1-29800264db36",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": [
                    {
                      "id": "d989e9d2-0e86-4294-9d7c-911a2eed3184",
                      "tags": [],
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "3cb41db4-51ef-4115-b087-d80c76af6c41",
                        "location": {
                          "line": 23,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 23,
                              "column": 7
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 23,
                              "column": 19
                            },
                            "value": "UpdatedFirstName"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "880e1f44-9f4c-4edc-b0fb-36849a54e764",
                          "location": {
                            "line": 24,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 24,
                                "column": 7
                              },
                              "value": "Casandra"
                            },
                            {
                              "location": {
                                "line": 24,
                                "column": 19
                              },
                              "value": "Tamara"
                            }
                          ]
                        },
                        {
                          "id": "9d7b5bd6-ff94-4533-bcf6-9625f9533f5d",
                          "location": {
                            "line": 25,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 25,
                                "column": 7
                              },
                              "value": "Olga"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 19
                              },
                              "value": "Alice"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "dab3b9ff-fe05-4d99-a6c7-22e8c07d65c2",
                  "tags": [
                    {
                      "location": {
                        "line": 28,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "b511ea0c-85fd-4128-bf21-1e99b651b794"
                    },
                    {
                      "location": {
                        "line": 28,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "f063c76a-c6e6-4855-82bb-a1995984f090"
                    }
                  ],
                  "location": {
                    "line": 29,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates multiple records in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "28e2777b-cde7-4cf9-9f0d-309e9d298abf",
                      "location": {
                        "line": 30,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update multiple records in the database"
                    },
                    {
                      "id": "c47c940d-edf8-4d05-9d10-a4466a242379",
                      "location": {
                        "line": 31,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "4ee78837-f422-4524-be39-559d3c62aa24",
                      "location": {
                        "line": 32,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with two objects: query object that contains content object with given: \"EE1112223331\" as ID, \"Billy\" as FirstName, \"Johnson\" as LastName, \"RR-1112223331\" as BirthCertificateID and write object that contains content object with given: \"EE1112223331\" as ID, \"Bob\" as FirstName, \"Son\" as LastName, \"RR-1112223331\" as BirthCertificateID"
                    },
                    {
                      "id": "231098e5-5518-46bd-89c3-87dab633e899",
                      "location": {
                        "line": 33,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint"
                    },
                    {
                      "id": "6d439cd6-c53f-4fed-afe5-95df6b731062",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "0e97b064-fb44-4d96-9cbb-b3a2e2eda119",
                      "location": {
                        "line": 35,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update_entries.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 680000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 680000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 31906
              },
              "status": "PASSED"
            },
            "text": "User wants to update multiple records in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d93"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 680000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 684000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4453194
              },
              "status": "PASSED"
            },
            "text": "User sends PUT request to /data/{registryname}/{versionnumber}/update-entries with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d94"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 684000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 689000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4138170
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with two objects: query object that contains content object with given: \"EE1112223331\" as ID, \"Billy\" as FirstName, \"Johnson\" as LastName, \"RR-1112223331\" as BirthCertificateID and write object that contains content object with given: \"EE1112223331\" as ID, \"Bob\" as FirstName, \"Son\" as LastName, \"RR-1112223331\" as BirthCertificateID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d95"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 689000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 693000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3905594
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-entries endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d96"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 693000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 693000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 47728
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-entries response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d97"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 693000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 693000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 47336
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-entries response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d98"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "14756af6-f961-4464-bc60-61c4e8c2ff9c",
          "id": "0c61aaf2-a7c8-4552-adf5-c220d38d92ca",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 679000000
          }
        },
        "finish": {
          "testCaseStartedId": "0c61aaf2-a7c8-4552-adf5-c220d38d92ca",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 693000000
          },
          "willBeRetried": false
        },
        "name": "Successfully updates multiple records in the database",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d92"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/data/{registryname}/{versionnumber}/update-or-create\nFeature: API endpoint that updates existing record that matches with request body parameters, or creates a new one if the record was not found\n\n  @smoke\n  Scenario: The record is successfully created in the database smoke type test\n    Given User wants to create a new record in the database\n    When User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber\n    And The request contains a payload with query and write objects that both contain content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint\n    And The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have status 200\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/update-or-create response should match json schema\n\n    Examples:\n    | registryname | versionnumber | ID             | FirstName | LastName | BirthCertificateID |\n    | registryname | 111           | EE123456789012 | John      | Smith    | RR-1234567890      |\n    | registryname | 111           | EE098765432109 | Ana       | Adams    | RR-0987654321      |\n\n\n  @unit @positive\n  Scenario: The existing record is successfully updated in the database\n    Given User wants to update previously created record in the database\n    When User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber\n    And The request contains a payload with query object that contains content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and write object that contains content object with given: \"<UpdatedID>\" as ID, \"<UpdatedFirstName>\" as FirstName, \"<UpdatedLastName>\" as LastName and \"<UpdatedBirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint\n    And The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have status 200\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/update-or-create response should match json schema\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"ID\" property equals \"<UpdatedID>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"FirstName\" property equals \"<UpdatedFirstName>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"LastName\" property equals \"<UpdatedLastName>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"BirthCertificateID\" property equals \"<UpdatedBirthCertificateID>\"\n\n    Examples:\n    | registryname | versionnumber | ID             | FirstName | LastName | BirthCertificateID | UpdatedID      | UpdatedFirstName | UpdatedLastName | UpdatedBirthCertificateID | \n    | registryname | 111           | EE123456789012 | John      | Smith    | RR-1234567890      | EE123456789012 | Jack             | Sparrow         | RR-1234567890             |\n    | registryname | 111           | EE098765432109 | Ana       | Adams    | RR-0987654321      | EE098765432109 | Emma             | Brown           | RR-0987654321             |\n",
          "uri": "features/data_update_or_create.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "356530b1-a49b-4428-a058-c8a0f81e8300"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update-or-create",
                "id": "9a92b5d9-87b7-4519-ba1d-5d646b6b1a07"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that updates existing record that matches with request body parameters, or creates a new one if the record was not found",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "18ffbdea-4f3e-4679-a6ee-9e0696c6aac3",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "a0e9b5a7-4fec-4a7d-bf66-0837f923abd5"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The record is successfully created in the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "d0e14690-dd93-45ff-a25b-b3d7ecfc2ef3",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to create a new record in the database"
                    },
                    {
                      "id": "a6bdb4ba-28ca-4d57-9c1a-85cb69806db5",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber"
                    },
                    {
                      "id": "86b4cd78-40ca-4447-93a7-a37a4107b4e7",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with query and write objects that both contain content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "98c64603-fb34-490d-a061-e1ce4a8727d4",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint"
                    },
                    {
                      "id": "c20f2823-2422-439c-bcde-b0ba8d05cb73",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "07addfb0-53b0-4060-aca6-5b4fc09c9e25",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200"
                    },
                    {
                      "id": "b0469e51-80ab-437e-8868-b1a0bf8fa9ae",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header"
                    },
                    {
                      "id": "0a325bc1-29a1-4430-84b1-e5797083684d",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "40b6f4f3-a307-484e-911e-298a7fad71f9",
                      "tags": [],
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "d0e2ea9c-1bb6-4671-9885-0bbe81f34159",
                        "location": {
                          "line": 16,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 16,
                              "column": 7
                            },
                            "value": "registryname"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 22
                            },
                            "value": "versionnumber"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 38
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 55
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 67
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 78
                            },
                            "value": "BirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "0642c29e-0852-495d-9616-72d4e1dcdfc9",
                          "location": {
                            "line": 17,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 17,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 38
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 55
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 67
                              },
                              "value": "Smith"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 78
                              },
                              "value": "RR-1234567890"
                            }
                          ]
                        },
                        {
                          "id": "42e5c419-91b7-4334-a2eb-dbdae92140d2",
                          "location": {
                            "line": 18,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 18,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 38
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 55
                              },
                              "value": "Ana"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 67
                              },
                              "value": "Adams"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 78
                              },
                              "value": "RR-0987654321"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "87852e89-bac8-44b3-ab6a-a8a9b9e88468",
                  "tags": [
                    {
                      "location": {
                        "line": 21,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "ff2398d9-2e14-41e9-aefd-0f8e41e754d0"
                    },
                    {
                      "location": {
                        "line": 21,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "cedf6278-6d3f-42c3-a214-5419dc4fb7e0"
                    }
                  ],
                  "location": {
                    "line": 22,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The existing record is successfully updated in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "ba4f8bf3-9a0a-4f2d-bd22-a4d94b4924b1",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update previously created record in the database"
                    },
                    {
                      "id": "ac28a864-cfdc-4b2e-95da-df52dc74645d",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber"
                    },
                    {
                      "id": "8838373f-e9e3-4776-a9df-b7a1415c4ade",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with query object that contains content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and write object that contains content object with given: \"<UpdatedID>\" as ID, \"<UpdatedFirstName>\" as FirstName, \"<UpdatedLastName>\" as LastName and \"<UpdatedBirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "cdb2ca4b-def1-4f75-b9e0-25e6964f0358",
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint"
                    },
                    {
                      "id": "f31a4c30-d4d5-41dc-bb16-7fa38e924757",
                      "location": {
                        "line": 27,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "7e13e24e-46c2-49d1-b8eb-a984beb89c9a",
                      "location": {
                        "line": 28,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200"
                    },
                    {
                      "id": "fef779c6-bd01-4f08-9830-2efe565cf349",
                      "location": {
                        "line": 29,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header"
                    },
                    {
                      "id": "7228e079-879f-42ea-aeaa-0e8f801e2b1c",
                      "location": {
                        "line": 30,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema"
                    },
                    {
                      "id": "fd5fa118-21fb-49b5-8ca5-9fbb272fc8ea",
                      "location": {
                        "line": 31,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"ID\" property equals \"<UpdatedID>\""
                    },
                    {
                      "id": "58232abf-6b03-429e-ad63-ed634e6867d3",
                      "location": {
                        "line": 32,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"FirstName\" property equals \"<UpdatedFirstName>\""
                    },
                    {
                      "id": "a543f5a6-c5d3-46fb-84aa-c67ecbed58bb",
                      "location": {
                        "line": 33,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"LastName\" property equals \"<UpdatedLastName>\""
                    },
                    {
                      "id": "90ed98d3-d984-4d73-bbdc-0afe49be700e",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"BirthCertificateID\" property equals \"<UpdatedBirthCertificateID>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "50eb3c1e-9c06-411b-adcb-094a73039334",
                      "tags": [],
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "d36d4f9d-aafc-4fc7-b243-b0cdbb2562b1",
                        "location": {
                          "line": 37,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 37,
                              "column": 7
                            },
                            "value": "registryname"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 22
                            },
                            "value": "versionnumber"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 38
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 55
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 67
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 78
                            },
                            "value": "BirthCertificateID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 99
                            },
                            "value": "UpdatedID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 116
                            },
                            "value": "UpdatedFirstName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 135
                            },
                            "value": "UpdatedLastName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 153
                            },
                            "value": "UpdatedBirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "359d97b1-4910-4c80-aa92-485ddb572f90",
                          "location": {
                            "line": 38,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 38,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 38
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 55
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 67
                              },
                              "value": "Smith"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 78
                              },
                              "value": "RR-1234567890"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 99
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 116
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 135
                              },
                              "value": "Sparrow"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 153
                              },
                              "value": "RR-1234567890"
                            }
                          ]
                        },
                        {
                          "id": "645b719d-1438-41ae-a8f7-78a7167ccdd1",
                          "location": {
                            "line": 39,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 39,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 38
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 55
                              },
                              "value": "Ana"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 67
                              },
                              "value": "Adams"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 78
                              },
                              "value": "RR-0987654321"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 99
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 116
                              },
                              "value": "Emma"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 135
                              },
                              "value": "Brown"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 153
                              },
                              "value": "RR-0987654321"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update_or_create.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 694000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 694000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 51864
              },
              "status": "PASSED"
            },
            "text": "User wants to create a new record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d9a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 694000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 698000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3975653
              },
              "status": "PASSED"
            },
            "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d9b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 698000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 702000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4216474
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with query and write objects that both contain content object with given: \"EE123456789012\" as ID, \"John\" as FirstName, \"Smith\" as LastName and \"RR-1234567890\" as BirthCertificateID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d9c"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 702000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 708000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5951081
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d9d"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 708000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 709000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 83240
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d9e"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 709000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 709000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 91702
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89d9f"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 709000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 709000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 78305
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89da0"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 709000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 709000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 162714
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89da1"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "9ffc4d15-8da3-4840-819d-697d067d64e9",
          "id": "2907040f-f58b-4ed7-9c5e-78aac6aafa49",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 693000000
          }
        },
        "finish": {
          "testCaseStartedId": "2907040f-f58b-4ed7-9c5e-78aac6aafa49",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 709000000
          },
          "willBeRetried": false
        },
        "name": "The record is successfully created in the database smoke type test",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89d99"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/data/{registryname}/{versionnumber}/update-or-create\nFeature: API endpoint that updates existing record that matches with request body parameters, or creates a new one if the record was not found\n\n  @smoke\n  Scenario: The record is successfully created in the database smoke type test\n    Given User wants to create a new record in the database\n    When User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber\n    And The request contains a payload with query and write objects that both contain content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint\n    And The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have status 200\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/update-or-create response should match json schema\n\n    Examples:\n    | registryname | versionnumber | ID             | FirstName | LastName | BirthCertificateID |\n    | registryname | 111           | EE123456789012 | John      | Smith    | RR-1234567890      |\n    | registryname | 111           | EE098765432109 | Ana       | Adams    | RR-0987654321      |\n\n\n  @unit @positive\n  Scenario: The existing record is successfully updated in the database\n    Given User wants to update previously created record in the database\n    When User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber\n    And The request contains a payload with query object that contains content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and write object that contains content object with given: \"<UpdatedID>\" as ID, \"<UpdatedFirstName>\" as FirstName, \"<UpdatedLastName>\" as LastName and \"<UpdatedBirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint\n    And The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have status 200\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/update-or-create response should match json schema\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"ID\" property equals \"<UpdatedID>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"FirstName\" property equals \"<UpdatedFirstName>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"LastName\" property equals \"<UpdatedLastName>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"BirthCertificateID\" property equals \"<UpdatedBirthCertificateID>\"\n\n    Examples:\n    | registryname | versionnumber | ID             | FirstName | LastName | BirthCertificateID | UpdatedID      | UpdatedFirstName | UpdatedLastName | UpdatedBirthCertificateID | \n    | registryname | 111           | EE123456789012 | John      | Smith    | RR-1234567890      | EE123456789012 | Jack             | Sparrow         | RR-1234567890             |\n    | registryname | 111           | EE098765432109 | Ana       | Adams    | RR-0987654321      | EE098765432109 | Emma             | Brown           | RR-0987654321             |\n",
          "uri": "features/data_update_or_create.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "356530b1-a49b-4428-a058-c8a0f81e8300"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update-or-create",
                "id": "9a92b5d9-87b7-4519-ba1d-5d646b6b1a07"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that updates existing record that matches with request body parameters, or creates a new one if the record was not found",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "18ffbdea-4f3e-4679-a6ee-9e0696c6aac3",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "a0e9b5a7-4fec-4a7d-bf66-0837f923abd5"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The record is successfully created in the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "d0e14690-dd93-45ff-a25b-b3d7ecfc2ef3",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to create a new record in the database"
                    },
                    {
                      "id": "a6bdb4ba-28ca-4d57-9c1a-85cb69806db5",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber"
                    },
                    {
                      "id": "86b4cd78-40ca-4447-93a7-a37a4107b4e7",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with query and write objects that both contain content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "98c64603-fb34-490d-a061-e1ce4a8727d4",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint"
                    },
                    {
                      "id": "c20f2823-2422-439c-bcde-b0ba8d05cb73",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "07addfb0-53b0-4060-aca6-5b4fc09c9e25",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200"
                    },
                    {
                      "id": "b0469e51-80ab-437e-8868-b1a0bf8fa9ae",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header"
                    },
                    {
                      "id": "0a325bc1-29a1-4430-84b1-e5797083684d",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "40b6f4f3-a307-484e-911e-298a7fad71f9",
                      "tags": [],
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "d0e2ea9c-1bb6-4671-9885-0bbe81f34159",
                        "location": {
                          "line": 16,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 16,
                              "column": 7
                            },
                            "value": "registryname"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 22
                            },
                            "value": "versionnumber"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 38
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 55
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 67
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 78
                            },
                            "value": "BirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "0642c29e-0852-495d-9616-72d4e1dcdfc9",
                          "location": {
                            "line": 17,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 17,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 38
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 55
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 67
                              },
                              "value": "Smith"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 78
                              },
                              "value": "RR-1234567890"
                            }
                          ]
                        },
                        {
                          "id": "42e5c419-91b7-4334-a2eb-dbdae92140d2",
                          "location": {
                            "line": 18,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 18,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 38
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 55
                              },
                              "value": "Ana"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 67
                              },
                              "value": "Adams"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 78
                              },
                              "value": "RR-0987654321"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "87852e89-bac8-44b3-ab6a-a8a9b9e88468",
                  "tags": [
                    {
                      "location": {
                        "line": 21,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "ff2398d9-2e14-41e9-aefd-0f8e41e754d0"
                    },
                    {
                      "location": {
                        "line": 21,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "cedf6278-6d3f-42c3-a214-5419dc4fb7e0"
                    }
                  ],
                  "location": {
                    "line": 22,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The existing record is successfully updated in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "ba4f8bf3-9a0a-4f2d-bd22-a4d94b4924b1",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update previously created record in the database"
                    },
                    {
                      "id": "ac28a864-cfdc-4b2e-95da-df52dc74645d",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber"
                    },
                    {
                      "id": "8838373f-e9e3-4776-a9df-b7a1415c4ade",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with query object that contains content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and write object that contains content object with given: \"<UpdatedID>\" as ID, \"<UpdatedFirstName>\" as FirstName, \"<UpdatedLastName>\" as LastName and \"<UpdatedBirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "cdb2ca4b-def1-4f75-b9e0-25e6964f0358",
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint"
                    },
                    {
                      "id": "f31a4c30-d4d5-41dc-bb16-7fa38e924757",
                      "location": {
                        "line": 27,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "7e13e24e-46c2-49d1-b8eb-a984beb89c9a",
                      "location": {
                        "line": 28,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200"
                    },
                    {
                      "id": "fef779c6-bd01-4f08-9830-2efe565cf349",
                      "location": {
                        "line": 29,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header"
                    },
                    {
                      "id": "7228e079-879f-42ea-aeaa-0e8f801e2b1c",
                      "location": {
                        "line": 30,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema"
                    },
                    {
                      "id": "fd5fa118-21fb-49b5-8ca5-9fbb272fc8ea",
                      "location": {
                        "line": 31,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"ID\" property equals \"<UpdatedID>\""
                    },
                    {
                      "id": "58232abf-6b03-429e-ad63-ed634e6867d3",
                      "location": {
                        "line": 32,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"FirstName\" property equals \"<UpdatedFirstName>\""
                    },
                    {
                      "id": "a543f5a6-c5d3-46fb-84aa-c67ecbed58bb",
                      "location": {
                        "line": 33,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"LastName\" property equals \"<UpdatedLastName>\""
                    },
                    {
                      "id": "90ed98d3-d984-4d73-bbdc-0afe49be700e",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"BirthCertificateID\" property equals \"<UpdatedBirthCertificateID>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "50eb3c1e-9c06-411b-adcb-094a73039334",
                      "tags": [],
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "d36d4f9d-aafc-4fc7-b243-b0cdbb2562b1",
                        "location": {
                          "line": 37,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 37,
                              "column": 7
                            },
                            "value": "registryname"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 22
                            },
                            "value": "versionnumber"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 38
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 55
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 67
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 78
                            },
                            "value": "BirthCertificateID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 99
                            },
                            "value": "UpdatedID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 116
                            },
                            "value": "UpdatedFirstName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 135
                            },
                            "value": "UpdatedLastName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 153
                            },
                            "value": "UpdatedBirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "359d97b1-4910-4c80-aa92-485ddb572f90",
                          "location": {
                            "line": 38,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 38,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 38
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 55
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 67
                              },
                              "value": "Smith"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 78
                              },
                              "value": "RR-1234567890"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 99
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 116
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 135
                              },
                              "value": "Sparrow"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 153
                              },
                              "value": "RR-1234567890"
                            }
                          ]
                        },
                        {
                          "id": "645b719d-1438-41ae-a8f7-78a7167ccdd1",
                          "location": {
                            "line": 39,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 39,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 38
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 55
                              },
                              "value": "Ana"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 67
                              },
                              "value": "Adams"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 78
                              },
                              "value": "RR-0987654321"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 99
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 116
                              },
                              "value": "Emma"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 135
                              },
                              "value": "Brown"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 153
                              },
                              "value": "RR-0987654321"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update_or_create.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 710000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 710000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 29450
              },
              "status": "PASSED"
            },
            "text": "User wants to create a new record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89da3"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 710000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 714000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4015705
              },
              "status": "PASSED"
            },
            "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89da4"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 714000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 718000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3986623
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with query and write objects that both contain content object with given: \"EE098765432109\" as ID, \"Ana\" as FirstName, \"Adams\" as LastName and \"RR-0987654321\" as BirthCertificateID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89da5"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 718000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 724000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5798643
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89da6"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 724000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 724000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 41328
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89da7"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 724000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 724000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 46650
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89da8"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 725000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 725000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 38050
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89da9"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 725000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 725000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 117006
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89daa"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "f6ce85f8-3f27-4391-8919-6e3ea6d4cd68",
          "id": "58126294-d9d7-4674-af98-79d043cf71dd",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 710000000
          }
        },
        "finish": {
          "testCaseStartedId": "58126294-d9d7-4674-af98-79d043cf71dd",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 725000000
          },
          "willBeRetried": false
        },
        "name": "The record is successfully created in the database smoke type test",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89da2"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/data/{registryname}/{versionnumber}/update-or-create\nFeature: API endpoint that updates existing record that matches with request body parameters, or creates a new one if the record was not found\n\n  @smoke\n  Scenario: The record is successfully created in the database smoke type test\n    Given User wants to create a new record in the database\n    When User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber\n    And The request contains a payload with query and write objects that both contain content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint\n    And The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have status 200\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/update-or-create response should match json schema\n\n    Examples:\n    | registryname | versionnumber | ID             | FirstName | LastName | BirthCertificateID |\n    | registryname | 111           | EE123456789012 | John      | Smith    | RR-1234567890      |\n    | registryname | 111           | EE098765432109 | Ana       | Adams    | RR-0987654321      |\n\n\n  @unit @positive\n  Scenario: The existing record is successfully updated in the database\n    Given User wants to update previously created record in the database\n    When User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber\n    And The request contains a payload with query object that contains content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and write object that contains content object with given: \"<UpdatedID>\" as ID, \"<UpdatedFirstName>\" as FirstName, \"<UpdatedLastName>\" as LastName and \"<UpdatedBirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint\n    And The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have status 200\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/update-or-create response should match json schema\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"ID\" property equals \"<UpdatedID>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"FirstName\" property equals \"<UpdatedFirstName>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"LastName\" property equals \"<UpdatedLastName>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"BirthCertificateID\" property equals \"<UpdatedBirthCertificateID>\"\n\n    Examples:\n    | registryname | versionnumber | ID             | FirstName | LastName | BirthCertificateID | UpdatedID      | UpdatedFirstName | UpdatedLastName | UpdatedBirthCertificateID | \n    | registryname | 111           | EE123456789012 | John      | Smith    | RR-1234567890      | EE123456789012 | Jack             | Sparrow         | RR-1234567890             |\n    | registryname | 111           | EE098765432109 | Ana       | Adams    | RR-0987654321      | EE098765432109 | Emma             | Brown           | RR-0987654321             |\n",
          "uri": "features/data_update_or_create.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "356530b1-a49b-4428-a058-c8a0f81e8300"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update-or-create",
                "id": "9a92b5d9-87b7-4519-ba1d-5d646b6b1a07"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that updates existing record that matches with request body parameters, or creates a new one if the record was not found",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "18ffbdea-4f3e-4679-a6ee-9e0696c6aac3",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "a0e9b5a7-4fec-4a7d-bf66-0837f923abd5"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The record is successfully created in the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "d0e14690-dd93-45ff-a25b-b3d7ecfc2ef3",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to create a new record in the database"
                    },
                    {
                      "id": "a6bdb4ba-28ca-4d57-9c1a-85cb69806db5",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber"
                    },
                    {
                      "id": "86b4cd78-40ca-4447-93a7-a37a4107b4e7",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with query and write objects that both contain content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "98c64603-fb34-490d-a061-e1ce4a8727d4",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint"
                    },
                    {
                      "id": "c20f2823-2422-439c-bcde-b0ba8d05cb73",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "07addfb0-53b0-4060-aca6-5b4fc09c9e25",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200"
                    },
                    {
                      "id": "b0469e51-80ab-437e-8868-b1a0bf8fa9ae",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header"
                    },
                    {
                      "id": "0a325bc1-29a1-4430-84b1-e5797083684d",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "40b6f4f3-a307-484e-911e-298a7fad71f9",
                      "tags": [],
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "d0e2ea9c-1bb6-4671-9885-0bbe81f34159",
                        "location": {
                          "line": 16,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 16,
                              "column": 7
                            },
                            "value": "registryname"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 22
                            },
                            "value": "versionnumber"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 38
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 55
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 67
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 78
                            },
                            "value": "BirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "0642c29e-0852-495d-9616-72d4e1dcdfc9",
                          "location": {
                            "line": 17,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 17,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 38
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 55
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 67
                              },
                              "value": "Smith"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 78
                              },
                              "value": "RR-1234567890"
                            }
                          ]
                        },
                        {
                          "id": "42e5c419-91b7-4334-a2eb-dbdae92140d2",
                          "location": {
                            "line": 18,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 18,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 38
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 55
                              },
                              "value": "Ana"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 67
                              },
                              "value": "Adams"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 78
                              },
                              "value": "RR-0987654321"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "87852e89-bac8-44b3-ab6a-a8a9b9e88468",
                  "tags": [
                    {
                      "location": {
                        "line": 21,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "ff2398d9-2e14-41e9-aefd-0f8e41e754d0"
                    },
                    {
                      "location": {
                        "line": 21,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "cedf6278-6d3f-42c3-a214-5419dc4fb7e0"
                    }
                  ],
                  "location": {
                    "line": 22,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The existing record is successfully updated in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "ba4f8bf3-9a0a-4f2d-bd22-a4d94b4924b1",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update previously created record in the database"
                    },
                    {
                      "id": "ac28a864-cfdc-4b2e-95da-df52dc74645d",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber"
                    },
                    {
                      "id": "8838373f-e9e3-4776-a9df-b7a1415c4ade",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with query object that contains content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and write object that contains content object with given: \"<UpdatedID>\" as ID, \"<UpdatedFirstName>\" as FirstName, \"<UpdatedLastName>\" as LastName and \"<UpdatedBirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "cdb2ca4b-def1-4f75-b9e0-25e6964f0358",
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint"
                    },
                    {
                      "id": "f31a4c30-d4d5-41dc-bb16-7fa38e924757",
                      "location": {
                        "line": 27,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "7e13e24e-46c2-49d1-b8eb-a984beb89c9a",
                      "location": {
                        "line": 28,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200"
                    },
                    {
                      "id": "fef779c6-bd01-4f08-9830-2efe565cf349",
                      "location": {
                        "line": 29,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header"
                    },
                    {
                      "id": "7228e079-879f-42ea-aeaa-0e8f801e2b1c",
                      "location": {
                        "line": 30,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema"
                    },
                    {
                      "id": "fd5fa118-21fb-49b5-8ca5-9fbb272fc8ea",
                      "location": {
                        "line": 31,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"ID\" property equals \"<UpdatedID>\""
                    },
                    {
                      "id": "58232abf-6b03-429e-ad63-ed634e6867d3",
                      "location": {
                        "line": 32,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"FirstName\" property equals \"<UpdatedFirstName>\""
                    },
                    {
                      "id": "a543f5a6-c5d3-46fb-84aa-c67ecbed58bb",
                      "location": {
                        "line": 33,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"LastName\" property equals \"<UpdatedLastName>\""
                    },
                    {
                      "id": "90ed98d3-d984-4d73-bbdc-0afe49be700e",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"BirthCertificateID\" property equals \"<UpdatedBirthCertificateID>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "50eb3c1e-9c06-411b-adcb-094a73039334",
                      "tags": [],
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "d36d4f9d-aafc-4fc7-b243-b0cdbb2562b1",
                        "location": {
                          "line": 37,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 37,
                              "column": 7
                            },
                            "value": "registryname"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 22
                            },
                            "value": "versionnumber"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 38
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 55
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 67
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 78
                            },
                            "value": "BirthCertificateID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 99
                            },
                            "value": "UpdatedID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 116
                            },
                            "value": "UpdatedFirstName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 135
                            },
                            "value": "UpdatedLastName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 153
                            },
                            "value": "UpdatedBirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "359d97b1-4910-4c80-aa92-485ddb572f90",
                          "location": {
                            "line": 38,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 38,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 38
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 55
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 67
                              },
                              "value": "Smith"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 78
                              },
                              "value": "RR-1234567890"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 99
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 116
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 135
                              },
                              "value": "Sparrow"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 153
                              },
                              "value": "RR-1234567890"
                            }
                          ]
                        },
                        {
                          "id": "645b719d-1438-41ae-a8f7-78a7167ccdd1",
                          "location": {
                            "line": 39,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 39,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 38
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 55
                              },
                              "value": "Ana"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 67
                              },
                              "value": "Adams"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 78
                              },
                              "value": "RR-0987654321"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 99
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 116
                              },
                              "value": "Emma"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 135
                              },
                              "value": "Brown"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 153
                              },
                              "value": "RR-0987654321"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update_or_create.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 725000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 725000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 51413
              },
              "status": "PASSED"
            },
            "text": "User wants to update previously created record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dac"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 725000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 729000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3867200
              },
              "status": "PASSED"
            },
            "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dad"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 729000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 733000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4004050
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with query object that contains content object with given: \"EE123456789012\" as ID, \"John\" as FirstName, \"Smith\" as LastName and \"RR-1234567890\" as BirthCertificateID and write object that contains content object with given: \"EE123456789012\" as ID, \"Jack\" as FirstName, \"Sparrow\" as LastName and \"RR-1234567890\" as BirthCertificateID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dae"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 734000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 738000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3872360
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89daf"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 738000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 738000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 40496
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89db0"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 738000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 738000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 41766
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89db1"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 738000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 738000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 41201
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89db2"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 738000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 738000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 105976
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89db3"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 738000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 739000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 167979
              },
              "status": "FAILED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"ID\" property equals \"EE123456789012\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89db4"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 739000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 739000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"FirstName\" property equals \"Jack\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89db5"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 739000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 739000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"LastName\" property equals \"Sparrow\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89db6"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 739000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 739000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"BirthCertificateID\" property equals \"RR-1234567890\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89db7"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "9e8b03fa-6a9e-4ffc-b14d-af7fd260178f",
          "id": "610e5ea8-40db-4fd1-a164-b02f8da00e05",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 725000000
          }
        },
        "finish": {
          "testCaseStartedId": "610e5ea8-40db-4fd1-a164-b02f8da00e05",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 739000000
          },
          "willBeRetried": false
        },
        "name": "The existing record is successfully updated in the database",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89dab"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/data/{registryname}/{versionnumber}/update-or-create\nFeature: API endpoint that updates existing record that matches with request body parameters, or creates a new one if the record was not found\n\n  @smoke\n  Scenario: The record is successfully created in the database smoke type test\n    Given User wants to create a new record in the database\n    When User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber\n    And The request contains a payload with query and write objects that both contain content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint\n    And The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have status 200\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/update-or-create response should match json schema\n\n    Examples:\n    | registryname | versionnumber | ID             | FirstName | LastName | BirthCertificateID |\n    | registryname | 111           | EE123456789012 | John      | Smith    | RR-1234567890      |\n    | registryname | 111           | EE098765432109 | Ana       | Adams    | RR-0987654321      |\n\n\n  @unit @positive\n  Scenario: The existing record is successfully updated in the database\n    Given User wants to update previously created record in the database\n    When User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber\n    And The request contains a payload with query object that contains content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and write object that contains content object with given: \"<UpdatedID>\" as ID, \"<UpdatedFirstName>\" as FirstName, \"<UpdatedLastName>\" as LastName and \"<UpdatedBirthCertificateID>\" as BirthCertificateID\n    Then User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint\n    And The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have status 200\n    And The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header\n    And The /data/{registryname}/{versionnumber}/update-or-create response should match json schema\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"ID\" property equals \"<UpdatedID>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"FirstName\" property equals \"<UpdatedFirstName>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"LastName\" property equals \"<UpdatedLastName>\"\n    And The /data/{registryname}/{versionnumber}/update-or-create response should contain \"BirthCertificateID\" property equals \"<UpdatedBirthCertificateID>\"\n\n    Examples:\n    | registryname | versionnumber | ID             | FirstName | LastName | BirthCertificateID | UpdatedID      | UpdatedFirstName | UpdatedLastName | UpdatedBirthCertificateID | \n    | registryname | 111           | EE123456789012 | John      | Smith    | RR-1234567890      | EE123456789012 | Jack             | Sparrow         | RR-1234567890             |\n    | registryname | 111           | EE098765432109 | Ana       | Adams    | RR-0987654321      | EE098765432109 | Emma             | Brown           | RR-0987654321             |\n",
          "uri": "features/data_update_or_create.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "356530b1-a49b-4428-a058-c8a0f81e8300"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update-or-create",
                "id": "9a92b5d9-87b7-4519-ba1d-5d646b6b1a07"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that updates existing record that matches with request body parameters, or creates a new one if the record was not found",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "18ffbdea-4f3e-4679-a6ee-9e0696c6aac3",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "a0e9b5a7-4fec-4a7d-bf66-0837f923abd5"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The record is successfully created in the database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "d0e14690-dd93-45ff-a25b-b3d7ecfc2ef3",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to create a new record in the database"
                    },
                    {
                      "id": "a6bdb4ba-28ca-4d57-9c1a-85cb69806db5",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber"
                    },
                    {
                      "id": "86b4cd78-40ca-4447-93a7-a37a4107b4e7",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with query and write objects that both contain content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "98c64603-fb34-490d-a061-e1ce4a8727d4",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint"
                    },
                    {
                      "id": "c20f2823-2422-439c-bcde-b0ba8d05cb73",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "07addfb0-53b0-4060-aca6-5b4fc09c9e25",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200"
                    },
                    {
                      "id": "b0469e51-80ab-437e-8868-b1a0bf8fa9ae",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header"
                    },
                    {
                      "id": "0a325bc1-29a1-4430-84b1-e5797083684d",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "40b6f4f3-a307-484e-911e-298a7fad71f9",
                      "tags": [],
                      "location": {
                        "line": 15,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "d0e2ea9c-1bb6-4671-9885-0bbe81f34159",
                        "location": {
                          "line": 16,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 16,
                              "column": 7
                            },
                            "value": "registryname"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 22
                            },
                            "value": "versionnumber"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 38
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 55
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 67
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 16,
                              "column": 78
                            },
                            "value": "BirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "0642c29e-0852-495d-9616-72d4e1dcdfc9",
                          "location": {
                            "line": 17,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 17,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 38
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 55
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 67
                              },
                              "value": "Smith"
                            },
                            {
                              "location": {
                                "line": 17,
                                "column": 78
                              },
                              "value": "RR-1234567890"
                            }
                          ]
                        },
                        {
                          "id": "42e5c419-91b7-4334-a2eb-dbdae92140d2",
                          "location": {
                            "line": 18,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 18,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 38
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 55
                              },
                              "value": "Ana"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 67
                              },
                              "value": "Adams"
                            },
                            {
                              "location": {
                                "line": 18,
                                "column": 78
                              },
                              "value": "RR-0987654321"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "scenario": {
                  "id": "87852e89-bac8-44b3-ab6a-a8a9b9e88468",
                  "tags": [
                    {
                      "location": {
                        "line": 21,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "ff2398d9-2e14-41e9-aefd-0f8e41e754d0"
                    },
                    {
                      "location": {
                        "line": 21,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "cedf6278-6d3f-42c3-a214-5419dc4fb7e0"
                    }
                  ],
                  "location": {
                    "line": 22,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The existing record is successfully updated in the database",
                  "description": "",
                  "steps": [
                    {
                      "id": "ba4f8bf3-9a0a-4f2d-bd22-a4d94b4924b1",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update previously created record in the database"
                    },
                    {
                      "id": "ac28a864-cfdc-4b2e-95da-df52dc74645d",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"<registryname>\" as registryname and \"<versionnumber>\" as versionnumber"
                    },
                    {
                      "id": "8838373f-e9e3-4776-a9df-b7a1415c4ade",
                      "location": {
                        "line": 25,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with query object that contains content object with given: \"<ID>\" as ID, \"<FirstName>\" as FirstName, \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and write object that contains content object with given: \"<UpdatedID>\" as ID, \"<UpdatedFirstName>\" as FirstName, \"<UpdatedLastName>\" as LastName and \"<UpdatedBirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "cdb2ca4b-def1-4f75-b9e0-25e6964f0358",
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint"
                    },
                    {
                      "id": "f31a4c30-d4d5-41dc-bb16-7fa38e924757",
                      "location": {
                        "line": 27,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "7e13e24e-46c2-49d1-b8eb-a984beb89c9a",
                      "location": {
                        "line": 28,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200"
                    },
                    {
                      "id": "fef779c6-bd01-4f08-9830-2efe565cf349",
                      "location": {
                        "line": 29,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header"
                    },
                    {
                      "id": "7228e079-879f-42ea-aeaa-0e8f801e2b1c",
                      "location": {
                        "line": 30,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema"
                    },
                    {
                      "id": "fd5fa118-21fb-49b5-8ca5-9fbb272fc8ea",
                      "location": {
                        "line": 31,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"ID\" property equals \"<UpdatedID>\""
                    },
                    {
                      "id": "58232abf-6b03-429e-ad63-ed634e6867d3",
                      "location": {
                        "line": 32,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"FirstName\" property equals \"<UpdatedFirstName>\""
                    },
                    {
                      "id": "a543f5a6-c5d3-46fb-84aa-c67ecbed58bb",
                      "location": {
                        "line": 33,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"LastName\" property equals \"<UpdatedLastName>\""
                    },
                    {
                      "id": "90ed98d3-d984-4d73-bbdc-0afe49be700e",
                      "location": {
                        "line": 34,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"BirthCertificateID\" property equals \"<UpdatedBirthCertificateID>\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "50eb3c1e-9c06-411b-adcb-094a73039334",
                      "tags": [],
                      "location": {
                        "line": 36,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "d36d4f9d-aafc-4fc7-b243-b0cdbb2562b1",
                        "location": {
                          "line": 37,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 37,
                              "column": 7
                            },
                            "value": "registryname"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 22
                            },
                            "value": "versionnumber"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 38
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 55
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 67
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 78
                            },
                            "value": "BirthCertificateID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 99
                            },
                            "value": "UpdatedID"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 116
                            },
                            "value": "UpdatedFirstName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 135
                            },
                            "value": "UpdatedLastName"
                          },
                          {
                            "location": {
                              "line": 37,
                              "column": 153
                            },
                            "value": "UpdatedBirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "359d97b1-4910-4c80-aa92-485ddb572f90",
                          "location": {
                            "line": 38,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 38,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 38
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 55
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 67
                              },
                              "value": "Smith"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 78
                              },
                              "value": "RR-1234567890"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 99
                              },
                              "value": "EE123456789012"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 116
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 135
                              },
                              "value": "Sparrow"
                            },
                            {
                              "location": {
                                "line": 38,
                                "column": 153
                              },
                              "value": "RR-1234567890"
                            }
                          ]
                        },
                        {
                          "id": "645b719d-1438-41ae-a8f7-78a7167ccdd1",
                          "location": {
                            "line": 39,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 39,
                                "column": 7
                              },
                              "value": "registryname"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 22
                              },
                              "value": "111"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 38
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 55
                              },
                              "value": "Ana"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 67
                              },
                              "value": "Adams"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 78
                              },
                              "value": "RR-0987654321"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 99
                              },
                              "value": "EE098765432109"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 116
                              },
                              "value": "Emma"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 135
                              },
                              "value": "Brown"
                            },
                            {
                              "location": {
                                "line": 39,
                                "column": 153
                              },
                              "value": "RR-0987654321"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update_or_create.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 739000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 739000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 23420
              },
              "status": "PASSED"
            },
            "text": "User wants to update previously created record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89db9"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 739000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 744000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3963293
              },
              "status": "PASSED"
            },
            "text": "User sends POST request to /data/{registryname}/{versionnumber}/update-or-create with given Information-Mediator-Client header, \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dba"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 744000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 748000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3948662
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with query object that contains content object with given: \"EE098765432109\" as ID, \"Ana\" as FirstName, \"Adams\" as LastName and \"RR-0987654321\" as BirthCertificateID and write object that contains content object with given: \"EE098765432109\" as ID, \"Emma\" as FirstName, \"Brown\" as LastName and \"RR-0987654321\" as BirthCertificateID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dbb"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 748000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 752000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3834638
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /data/{registryname}/{versionnumber}/update-or-create endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dbc"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 752000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 752000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 48734
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dbd"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 752000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 752000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 40943
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dbe"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 752000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 752000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 37467
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dbf"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 752000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 752000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 104925
              },
              "status": "PASSED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dc0"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 752000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 753000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 129749
              },
              "status": "FAILED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"ID\" property equals \"EE098765432109\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dc1"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 753000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 753000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"FirstName\" property equals \"Emma\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dc2"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 753000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 753000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"LastName\" property equals \"Brown\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dc3"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 753000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 753000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 0
              },
              "status": "SKIPPED"
            },
            "text": "The /data/{registryname}/{versionnumber}/update-or-create response should contain \"BirthCertificateID\" property equals \"RR-0987654321\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dc4"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "64760576-3b4c-4386-b402-414ef188b057",
          "id": "b0653f27-8611-4c3e-8fd1-2ce683f5d6c1",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 739000000
          }
        },
        "finish": {
          "testCaseStartedId": "b0653f27-8611-4c3e-8fd1-2ce683f5d6c1",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 753000000
          },
          "willBeRetried": false
        },
        "name": "The existing record is successfully updated in the database",
        "passed": false,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89db8"
        }
      },
      {
        "source": {
          "data": "@method=PUT @endpoint=/data/{registryname}/{versionnumber}/update\nFeature: API endpoint that allows users to update a record in the database.\n\nUpdates one existing record in the registry databas\n  @smoke\n    Scenario: Successfully updates a record in the registry database smoke type test\n    Given User wants to update an existing record in the database\n    When PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with given \"EE3784545277266\" as ID \"Philip\" as FirstName \"Red\" as LastName and \"RR-30045370099\" as BirthCertificateID and the request overwrites the record with given \"EE383838348834\" as ID \"Elsa\" as FirstName \"West\" as LastName and \"RR-1234007889\" as BirthCertificateID\n    Then The response from /data/{registryname}/{versionnumber}/update is received\n    And The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms\n    And The response from /data/{registryname}/{versionnumber}/update should have status 200\n\n  @positive @unit\n  Scenario Outline: Successfully updates a record in the registry database\n    Given User wants to update an existing record in the database\n    When PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with given \"<ID>\" as ID \"<FirstName>\" as FirstName \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and the request overwrites the record with given \"<updatedID>\" as ID \"<updatedFirstName>\" as FirstName \"<updatedLastName>\" as LastName and \"<updatedBirthCertificateID>\" as BirthCertificateID\n    Then The response from /data/{registryname}/{versionnumber}/update is received\n    And The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms\n    And The response from /data/{registryname}/{versionnumber}/update should have status 200\n\n    Examples:\n    | ID               | FirstName | LastName | BirthCertificateID | updatedID        | updatedFirstName | updatedLastName | updatedBirthCertificateID |\n    | EE34462734834865 | Alex      | Green    | RR-441124937       | EE34462734834865 | Jack             | Black           | RR-1234567880             |\n    | EE61287673487865 | Alise     | Black    | RR-49075937        | EE61287673487865 | John             | Redwood         | RR-1234567888             |\n    | EE6534523487865  | Zyra      | Blue     | RR-24523937        | EE6534523487865  | Bob              | Rack            | RR-1234567887             |\n",
          "uri": "features/data_update.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=PUT",
                "id": "5a2ff011-f6eb-4783-b029-9313bed37400"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update",
                "id": "82af9206-e3c1-4f5f-8cd4-5930ea05ab3b"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to update a record in the database.",
            "description": "Updates one existing record in the registry databas",
            "children": [
              {
                "scenario": {
                  "id": "6c1412b3-e9e7-496c-bad8-cab8fdc79f28",
                  "tags": [
                    {
                      "location": {
                        "line": 5,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "8f5d2484-5d36-4279-9c29-1cfd3133c35a"
                    }
                  ],
                  "location": {
                    "line": 6,
                    "column": 5
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates a record in the registry database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "7c652077-0da2-424b-8cfb-ec430104bd1a",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update an existing record in the database"
                    },
                    {
                      "id": "09f58552-2513-42d6-8f0b-b918ba535bd5",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "0f95c42a-d44c-4839-8830-57d49f4c3762",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with given \"EE3784545277266\" as ID \"Philip\" as FirstName \"Red\" as LastName and \"RR-30045370099\" as BirthCertificateID and the request overwrites the record with given \"EE383838348834\" as ID \"Elsa\" as FirstName \"West\" as LastName and \"RR-1234007889\" as BirthCertificateID"
                    },
                    {
                      "id": "e3ddbbaf-68a3-4b4d-8ae2-8da7f214b180",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "The response from /data/{registryname}/{versionnumber}/update is received"
                    },
                    {
                      "id": "5fede487-65ba-46ed-b8ea-c21ba817b8c1",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "8fee94c4-76f6-4f02-8b22-673ab48a3356",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "268ac19f-8e7d-404e-a001-bfab7cb7b622",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@positive",
                      "id": "85567694-c0dd-4c54-9a21-be9eb09bf09d"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 13
                      },
                      "name": "@unit",
                      "id": "e53a2f14-52f6-4639-8f7d-47ce6f1ca5fd"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully updates a record in the registry database",
                  "description": "",
                  "steps": [
                    {
                      "id": "c521800c-22f0-4841-8226-84abb573c399",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update an existing record in the database"
                    },
                    {
                      "id": "2c284f6c-8c41-4bc1-b214-5702f2404382",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "1fca9452-c3f4-4726-b2dd-0a7caea80017",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with given \"<ID>\" as ID \"<FirstName>\" as FirstName \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and the request overwrites the record with given \"<updatedID>\" as ID \"<updatedFirstName>\" as FirstName \"<updatedLastName>\" as LastName and \"<updatedBirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "d92b7934-ee6a-493b-b289-ca761a03359c",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "The response from /data/{registryname}/{versionnumber}/update is received"
                    },
                    {
                      "id": "2fa82393-f2a9-45b3-8e6f-64ef06c3aec9",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "d36e71cd-4a57-48f4-9b1d-872ec7feb5bf",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200"
                    }
                  ],
                  "examples": [
                    {
                      "id": "b4c8421f-d719-4632-860e-df9dfed370e3",
                      "tags": [],
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "bb5d94bf-3bcd-40b3-8d8f-dd3755442cc6",
                        "location": {
                          "line": 24,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 24,
                              "column": 7
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 26
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 38
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 49
                            },
                            "value": "BirthCertificateID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 70
                            },
                            "value": "updatedID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 89
                            },
                            "value": "updatedFirstName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 108
                            },
                            "value": "updatedLastName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 126
                            },
                            "value": "updatedBirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "17860525-f7f3-4250-b77c-15d73768383b",
                          "location": {
                            "line": 25,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 25,
                                "column": 7
                              },
                              "value": "EE34462734834865"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 26
                              },
                              "value": "Alex"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 38
                              },
                              "value": "Green"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 49
                              },
                              "value": "RR-441124937"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 70
                              },
                              "value": "EE34462734834865"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 89
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 108
                              },
                              "value": "Black"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 126
                              },
                              "value": "RR-1234567880"
                            }
                          ]
                        },
                        {
                          "id": "88e91278-4aee-4bc3-bc0b-e7b1b2947821",
                          "location": {
                            "line": 26,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 26,
                                "column": 7
                              },
                              "value": "EE61287673487865"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 26
                              },
                              "value": "Alise"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 38
                              },
                              "value": "Black"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 49
                              },
                              "value": "RR-49075937"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 70
                              },
                              "value": "EE61287673487865"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 89
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 108
                              },
                              "value": "Redwood"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 126
                              },
                              "value": "RR-1234567888"
                            }
                          ]
                        },
                        {
                          "id": "d74b8304-9712-4a40-b617-12b02227b844",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "EE6534523487865"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 26
                              },
                              "value": "Zyra"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 38
                              },
                              "value": "Blue"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 49
                              },
                              "value": "RR-24523937"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 70
                              },
                              "value": "EE6534523487865"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 89
                              },
                              "value": "Bob"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 108
                              },
                              "value": "Rack"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 126
                              },
                              "value": "RR-1234567887"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 754000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 754000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 48603
              },
              "status": "PASSED"
            },
            "text": "User wants to update an existing record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dc6"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 754000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 758000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3869275
              },
              "status": "PASSED"
            },
            "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dc7"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 758000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 762000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3882349
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with given \"EE3784545277266\" as ID \"Philip\" as FirstName \"Red\" as LastName and \"RR-30045370099\" as BirthCertificateID and the request overwrites the record with given \"EE383838348834\" as ID \"Elsa\" as FirstName \"West\" as LastName and \"RR-1234007889\" as BirthCertificateID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dc8"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 762000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 766000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3813244
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update is received",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dc9"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 766000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 766000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 85481
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dca"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 766000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 766000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 76683
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dcb"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "f07cc820-e6c7-4e6a-a33b-751847811d60",
          "id": "67177b90-19b0-4526-a5cc-3236e935723a",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 753000000
          }
        },
        "finish": {
          "testCaseStartedId": "67177b90-19b0-4526-a5cc-3236e935723a",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 766000000
          },
          "willBeRetried": false
        },
        "name": "Successfully updates a record in the registry database smoke type test",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89dc5"
        }
      },
      {
        "source": {
          "data": "@method=PUT @endpoint=/data/{registryname}/{versionnumber}/update\nFeature: API endpoint that allows users to update a record in the database.\n\nUpdates one existing record in the registry databas\n  @smoke\n    Scenario: Successfully updates a record in the registry database smoke type test\n    Given User wants to update an existing record in the database\n    When PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with given \"EE3784545277266\" as ID \"Philip\" as FirstName \"Red\" as LastName and \"RR-30045370099\" as BirthCertificateID and the request overwrites the record with given \"EE383838348834\" as ID \"Elsa\" as FirstName \"West\" as LastName and \"RR-1234007889\" as BirthCertificateID\n    Then The response from /data/{registryname}/{versionnumber}/update is received\n    And The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms\n    And The response from /data/{registryname}/{versionnumber}/update should have status 200\n\n  @positive @unit\n  Scenario Outline: Successfully updates a record in the registry database\n    Given User wants to update an existing record in the database\n    When PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with given \"<ID>\" as ID \"<FirstName>\" as FirstName \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and the request overwrites the record with given \"<updatedID>\" as ID \"<updatedFirstName>\" as FirstName \"<updatedLastName>\" as LastName and \"<updatedBirthCertificateID>\" as BirthCertificateID\n    Then The response from /data/{registryname}/{versionnumber}/update is received\n    And The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms\n    And The response from /data/{registryname}/{versionnumber}/update should have status 200\n\n    Examples:\n    | ID               | FirstName | LastName | BirthCertificateID | updatedID        | updatedFirstName | updatedLastName | updatedBirthCertificateID |\n    | EE34462734834865 | Alex      | Green    | RR-441124937       | EE34462734834865 | Jack             | Black           | RR-1234567880             |\n    | EE61287673487865 | Alise     | Black    | RR-49075937        | EE61287673487865 | John             | Redwood         | RR-1234567888             |\n    | EE6534523487865  | Zyra      | Blue     | RR-24523937        | EE6534523487865  | Bob              | Rack            | RR-1234567887             |\n",
          "uri": "features/data_update.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=PUT",
                "id": "5a2ff011-f6eb-4783-b029-9313bed37400"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update",
                "id": "82af9206-e3c1-4f5f-8cd4-5930ea05ab3b"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to update a record in the database.",
            "description": "Updates one existing record in the registry databas",
            "children": [
              {
                "scenario": {
                  "id": "6c1412b3-e9e7-496c-bad8-cab8fdc79f28",
                  "tags": [
                    {
                      "location": {
                        "line": 5,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "8f5d2484-5d36-4279-9c29-1cfd3133c35a"
                    }
                  ],
                  "location": {
                    "line": 6,
                    "column": 5
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates a record in the registry database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "7c652077-0da2-424b-8cfb-ec430104bd1a",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update an existing record in the database"
                    },
                    {
                      "id": "09f58552-2513-42d6-8f0b-b918ba535bd5",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "0f95c42a-d44c-4839-8830-57d49f4c3762",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with given \"EE3784545277266\" as ID \"Philip\" as FirstName \"Red\" as LastName and \"RR-30045370099\" as BirthCertificateID and the request overwrites the record with given \"EE383838348834\" as ID \"Elsa\" as FirstName \"West\" as LastName and \"RR-1234007889\" as BirthCertificateID"
                    },
                    {
                      "id": "e3ddbbaf-68a3-4b4d-8ae2-8da7f214b180",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "The response from /data/{registryname}/{versionnumber}/update is received"
                    },
                    {
                      "id": "5fede487-65ba-46ed-b8ea-c21ba817b8c1",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "8fee94c4-76f6-4f02-8b22-673ab48a3356",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "268ac19f-8e7d-404e-a001-bfab7cb7b622",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@positive",
                      "id": "85567694-c0dd-4c54-9a21-be9eb09bf09d"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 13
                      },
                      "name": "@unit",
                      "id": "e53a2f14-52f6-4639-8f7d-47ce6f1ca5fd"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully updates a record in the registry database",
                  "description": "",
                  "steps": [
                    {
                      "id": "c521800c-22f0-4841-8226-84abb573c399",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update an existing record in the database"
                    },
                    {
                      "id": "2c284f6c-8c41-4bc1-b214-5702f2404382",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "1fca9452-c3f4-4726-b2dd-0a7caea80017",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with given \"<ID>\" as ID \"<FirstName>\" as FirstName \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and the request overwrites the record with given \"<updatedID>\" as ID \"<updatedFirstName>\" as FirstName \"<updatedLastName>\" as LastName and \"<updatedBirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "d92b7934-ee6a-493b-b289-ca761a03359c",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "The response from /data/{registryname}/{versionnumber}/update is received"
                    },
                    {
                      "id": "2fa82393-f2a9-45b3-8e6f-64ef06c3aec9",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "d36e71cd-4a57-48f4-9b1d-872ec7feb5bf",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200"
                    }
                  ],
                  "examples": [
                    {
                      "id": "b4c8421f-d719-4632-860e-df9dfed370e3",
                      "tags": [],
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "bb5d94bf-3bcd-40b3-8d8f-dd3755442cc6",
                        "location": {
                          "line": 24,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 24,
                              "column": 7
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 26
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 38
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 49
                            },
                            "value": "BirthCertificateID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 70
                            },
                            "value": "updatedID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 89
                            },
                            "value": "updatedFirstName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 108
                            },
                            "value": "updatedLastName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 126
                            },
                            "value": "updatedBirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "17860525-f7f3-4250-b77c-15d73768383b",
                          "location": {
                            "line": 25,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 25,
                                "column": 7
                              },
                              "value": "EE34462734834865"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 26
                              },
                              "value": "Alex"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 38
                              },
                              "value": "Green"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 49
                              },
                              "value": "RR-441124937"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 70
                              },
                              "value": "EE34462734834865"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 89
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 108
                              },
                              "value": "Black"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 126
                              },
                              "value": "RR-1234567880"
                            }
                          ]
                        },
                        {
                          "id": "88e91278-4aee-4bc3-bc0b-e7b1b2947821",
                          "location": {
                            "line": 26,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 26,
                                "column": 7
                              },
                              "value": "EE61287673487865"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 26
                              },
                              "value": "Alise"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 38
                              },
                              "value": "Black"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 49
                              },
                              "value": "RR-49075937"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 70
                              },
                              "value": "EE61287673487865"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 89
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 108
                              },
                              "value": "Redwood"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 126
                              },
                              "value": "RR-1234567888"
                            }
                          ]
                        },
                        {
                          "id": "d74b8304-9712-4a40-b617-12b02227b844",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "EE6534523487865"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 26
                              },
                              "value": "Zyra"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 38
                              },
                              "value": "Blue"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 49
                              },
                              "value": "RR-24523937"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 70
                              },
                              "value": "EE6534523487865"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 89
                              },
                              "value": "Bob"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 108
                              },
                              "value": "Rack"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 126
                              },
                              "value": "RR-1234567887"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 767000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 767000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 24368
              },
              "status": "PASSED"
            },
            "text": "User wants to update an existing record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dcd"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 767000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 771000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3851373
              },
              "status": "PASSED"
            },
            "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dce"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 771000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 775000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3889632
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with given \"EE34462734834865\" as ID \"Alex\" as FirstName \"Green\" as LastName and \"RR-441124937\" as BirthCertificateID and the request overwrites the record with given \"EE34462734834865\" as ID \"Jack\" as FirstName \"Black\" as LastName and \"RR-1234567880\" as BirthCertificateID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dcf"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 775000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 779000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3804953
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update is received",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dd0"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 779000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 779000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 42853
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dd1"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 779000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 779000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 45680
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dd2"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "7b5b167e-2ee9-4e8e-a36e-adb792767e9b",
          "id": "ade7a82c-d19f-49b5-a349-03df569b2c17",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 766000000
          }
        },
        "finish": {
          "testCaseStartedId": "ade7a82c-d19f-49b5-a349-03df569b2c17",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 779000000
          },
          "willBeRetried": false
        },
        "name": "Successfully updates a record in the registry database",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89dcc"
        }
      },
      {
        "source": {
          "data": "@method=PUT @endpoint=/data/{registryname}/{versionnumber}/update\nFeature: API endpoint that allows users to update a record in the database.\n\nUpdates one existing record in the registry databas\n  @smoke\n    Scenario: Successfully updates a record in the registry database smoke type test\n    Given User wants to update an existing record in the database\n    When PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with given \"EE3784545277266\" as ID \"Philip\" as FirstName \"Red\" as LastName and \"RR-30045370099\" as BirthCertificateID and the request overwrites the record with given \"EE383838348834\" as ID \"Elsa\" as FirstName \"West\" as LastName and \"RR-1234007889\" as BirthCertificateID\n    Then The response from /data/{registryname}/{versionnumber}/update is received\n    And The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms\n    And The response from /data/{registryname}/{versionnumber}/update should have status 200\n\n  @positive @unit\n  Scenario Outline: Successfully updates a record in the registry database\n    Given User wants to update an existing record in the database\n    When PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with given \"<ID>\" as ID \"<FirstName>\" as FirstName \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and the request overwrites the record with given \"<updatedID>\" as ID \"<updatedFirstName>\" as FirstName \"<updatedLastName>\" as LastName and \"<updatedBirthCertificateID>\" as BirthCertificateID\n    Then The response from /data/{registryname}/{versionnumber}/update is received\n    And The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms\n    And The response from /data/{registryname}/{versionnumber}/update should have status 200\n\n    Examples:\n    | ID               | FirstName | LastName | BirthCertificateID | updatedID        | updatedFirstName | updatedLastName | updatedBirthCertificateID |\n    | EE34462734834865 | Alex      | Green    | RR-441124937       | EE34462734834865 | Jack             | Black           | RR-1234567880             |\n    | EE61287673487865 | Alise     | Black    | RR-49075937        | EE61287673487865 | John             | Redwood         | RR-1234567888             |\n    | EE6534523487865  | Zyra      | Blue     | RR-24523937        | EE6534523487865  | Bob              | Rack            | RR-1234567887             |\n",
          "uri": "features/data_update.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=PUT",
                "id": "5a2ff011-f6eb-4783-b029-9313bed37400"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update",
                "id": "82af9206-e3c1-4f5f-8cd4-5930ea05ab3b"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to update a record in the database.",
            "description": "Updates one existing record in the registry databas",
            "children": [
              {
                "scenario": {
                  "id": "6c1412b3-e9e7-496c-bad8-cab8fdc79f28",
                  "tags": [
                    {
                      "location": {
                        "line": 5,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "8f5d2484-5d36-4279-9c29-1cfd3133c35a"
                    }
                  ],
                  "location": {
                    "line": 6,
                    "column": 5
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates a record in the registry database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "7c652077-0da2-424b-8cfb-ec430104bd1a",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update an existing record in the database"
                    },
                    {
                      "id": "09f58552-2513-42d6-8f0b-b918ba535bd5",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "0f95c42a-d44c-4839-8830-57d49f4c3762",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with given \"EE3784545277266\" as ID \"Philip\" as FirstName \"Red\" as LastName and \"RR-30045370099\" as BirthCertificateID and the request overwrites the record with given \"EE383838348834\" as ID \"Elsa\" as FirstName \"West\" as LastName and \"RR-1234007889\" as BirthCertificateID"
                    },
                    {
                      "id": "e3ddbbaf-68a3-4b4d-8ae2-8da7f214b180",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "The response from /data/{registryname}/{versionnumber}/update is received"
                    },
                    {
                      "id": "5fede487-65ba-46ed-b8ea-c21ba817b8c1",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "8fee94c4-76f6-4f02-8b22-673ab48a3356",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "268ac19f-8e7d-404e-a001-bfab7cb7b622",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@positive",
                      "id": "85567694-c0dd-4c54-9a21-be9eb09bf09d"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 13
                      },
                      "name": "@unit",
                      "id": "e53a2f14-52f6-4639-8f7d-47ce6f1ca5fd"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully updates a record in the registry database",
                  "description": "",
                  "steps": [
                    {
                      "id": "c521800c-22f0-4841-8226-84abb573c399",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update an existing record in the database"
                    },
                    {
                      "id": "2c284f6c-8c41-4bc1-b214-5702f2404382",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "1fca9452-c3f4-4726-b2dd-0a7caea80017",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with given \"<ID>\" as ID \"<FirstName>\" as FirstName \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and the request overwrites the record with given \"<updatedID>\" as ID \"<updatedFirstName>\" as FirstName \"<updatedLastName>\" as LastName and \"<updatedBirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "d92b7934-ee6a-493b-b289-ca761a03359c",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "The response from /data/{registryname}/{versionnumber}/update is received"
                    },
                    {
                      "id": "2fa82393-f2a9-45b3-8e6f-64ef06c3aec9",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "d36e71cd-4a57-48f4-9b1d-872ec7feb5bf",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200"
                    }
                  ],
                  "examples": [
                    {
                      "id": "b4c8421f-d719-4632-860e-df9dfed370e3",
                      "tags": [],
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "bb5d94bf-3bcd-40b3-8d8f-dd3755442cc6",
                        "location": {
                          "line": 24,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 24,
                              "column": 7
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 26
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 38
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 49
                            },
                            "value": "BirthCertificateID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 70
                            },
                            "value": "updatedID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 89
                            },
                            "value": "updatedFirstName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 108
                            },
                            "value": "updatedLastName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 126
                            },
                            "value": "updatedBirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "17860525-f7f3-4250-b77c-15d73768383b",
                          "location": {
                            "line": 25,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 25,
                                "column": 7
                              },
                              "value": "EE34462734834865"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 26
                              },
                              "value": "Alex"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 38
                              },
                              "value": "Green"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 49
                              },
                              "value": "RR-441124937"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 70
                              },
                              "value": "EE34462734834865"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 89
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 108
                              },
                              "value": "Black"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 126
                              },
                              "value": "RR-1234567880"
                            }
                          ]
                        },
                        {
                          "id": "88e91278-4aee-4bc3-bc0b-e7b1b2947821",
                          "location": {
                            "line": 26,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 26,
                                "column": 7
                              },
                              "value": "EE61287673487865"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 26
                              },
                              "value": "Alise"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 38
                              },
                              "value": "Black"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 49
                              },
                              "value": "RR-49075937"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 70
                              },
                              "value": "EE61287673487865"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 89
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 108
                              },
                              "value": "Redwood"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 126
                              },
                              "value": "RR-1234567888"
                            }
                          ]
                        },
                        {
                          "id": "d74b8304-9712-4a40-b617-12b02227b844",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "EE6534523487865"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 26
                              },
                              "value": "Zyra"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 38
                              },
                              "value": "Blue"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 49
                              },
                              "value": "RR-24523937"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 70
                              },
                              "value": "EE6534523487865"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 89
                              },
                              "value": "Bob"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 108
                              },
                              "value": "Rack"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 126
                              },
                              "value": "RR-1234567887"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 779000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 779000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 24218
              },
              "status": "PASSED"
            },
            "text": "User wants to update an existing record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dd4"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 779000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 783000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3884957
              },
              "status": "PASSED"
            },
            "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dd5"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 784000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 788000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4005738
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with given \"EE61287673487865\" as ID \"Alise\" as FirstName \"Black\" as LastName and \"RR-49075937\" as BirthCertificateID and the request overwrites the record with given \"EE61287673487865\" as ID \"John\" as FirstName \"Redwood\" as LastName and \"RR-1234567888\" as BirthCertificateID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dd6"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 788000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 794000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5770603
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update is received",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dd7"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 794000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 794000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 64677
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dd8"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 794000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 794000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 71388
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dd9"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "81180ea1-93aa-4a07-b5ed-f7924ce6cb13",
          "id": "b4d5f379-1093-4236-9d02-6ced1e1b741d",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 779000000
          }
        },
        "finish": {
          "testCaseStartedId": "b4d5f379-1093-4236-9d02-6ced1e1b741d",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 795000000
          },
          "willBeRetried": false
        },
        "name": "Successfully updates a record in the registry database",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89dd3"
        }
      },
      {
        "source": {
          "data": "@method=PUT @endpoint=/data/{registryname}/{versionnumber}/update\nFeature: API endpoint that allows users to update a record in the database.\n\nUpdates one existing record in the registry databas\n  @smoke\n    Scenario: Successfully updates a record in the registry database smoke type test\n    Given User wants to update an existing record in the database\n    When PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with given \"EE3784545277266\" as ID \"Philip\" as FirstName \"Red\" as LastName and \"RR-30045370099\" as BirthCertificateID and the request overwrites the record with given \"EE383838348834\" as ID \"Elsa\" as FirstName \"West\" as LastName and \"RR-1234007889\" as BirthCertificateID\n    Then The response from /data/{registryname}/{versionnumber}/update is received\n    And The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms\n    And The response from /data/{registryname}/{versionnumber}/update should have status 200\n\n  @positive @unit\n  Scenario Outline: Successfully updates a record in the registry database\n    Given User wants to update an existing record in the database\n    When PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber\n    And The request contains a payload with given \"<ID>\" as ID \"<FirstName>\" as FirstName \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and the request overwrites the record with given \"<updatedID>\" as ID \"<updatedFirstName>\" as FirstName \"<updatedLastName>\" as LastName and \"<updatedBirthCertificateID>\" as BirthCertificateID\n    Then The response from /data/{registryname}/{versionnumber}/update is received\n    And The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms\n    And The response from /data/{registryname}/{versionnumber}/update should have status 200\n\n    Examples:\n    | ID               | FirstName | LastName | BirthCertificateID | updatedID        | updatedFirstName | updatedLastName | updatedBirthCertificateID |\n    | EE34462734834865 | Alex      | Green    | RR-441124937       | EE34462734834865 | Jack             | Black           | RR-1234567880             |\n    | EE61287673487865 | Alise     | Black    | RR-49075937        | EE61287673487865 | John             | Redwood         | RR-1234567888             |\n    | EE6534523487865  | Zyra      | Blue     | RR-24523937        | EE6534523487865  | Bob              | Rack            | RR-1234567887             |\n",
          "uri": "features/data_update.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=PUT",
                "id": "5a2ff011-f6eb-4783-b029-9313bed37400"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/data/{registryname}/{versionnumber}/update",
                "id": "82af9206-e3c1-4f5f-8cd4-5930ea05ab3b"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows users to update a record in the database.",
            "description": "Updates one existing record in the registry databas",
            "children": [
              {
                "scenario": {
                  "id": "6c1412b3-e9e7-496c-bad8-cab8fdc79f28",
                  "tags": [
                    {
                      "location": {
                        "line": 5,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "8f5d2484-5d36-4279-9c29-1cfd3133c35a"
                    }
                  ],
                  "location": {
                    "line": 6,
                    "column": 5
                  },
                  "keyword": "Scenario",
                  "name": "Successfully updates a record in the registry database smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "7c652077-0da2-424b-8cfb-ec430104bd1a",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update an existing record in the database"
                    },
                    {
                      "id": "09f58552-2513-42d6-8f0b-b918ba535bd5",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "0f95c42a-d44c-4839-8830-57d49f4c3762",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with given \"EE3784545277266\" as ID \"Philip\" as FirstName \"Red\" as LastName and \"RR-30045370099\" as BirthCertificateID and the request overwrites the record with given \"EE383838348834\" as ID \"Elsa\" as FirstName \"West\" as LastName and \"RR-1234007889\" as BirthCertificateID"
                    },
                    {
                      "id": "e3ddbbaf-68a3-4b4d-8ae2-8da7f214b180",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "The response from /data/{registryname}/{versionnumber}/update is received"
                    },
                    {
                      "id": "5fede487-65ba-46ed-b8ea-c21ba817b8c1",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "8fee94c4-76f6-4f02-8b22-673ab48a3356",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "268ac19f-8e7d-404e-a001-bfab7cb7b622",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@positive",
                      "id": "85567694-c0dd-4c54-9a21-be9eb09bf09d"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 13
                      },
                      "name": "@unit",
                      "id": "e53a2f14-52f6-4639-8f7d-47ce6f1ca5fd"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "Successfully updates a record in the registry database",
                  "description": "",
                  "steps": [
                    {
                      "id": "c521800c-22f0-4841-8226-84abb573c399",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to update an existing record in the database"
                    },
                    {
                      "id": "2c284f6c-8c41-4bc1-b214-5702f2404382",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber"
                    },
                    {
                      "id": "1fca9452-c3f4-4726-b2dd-0a7caea80017",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The request contains a payload with given \"<ID>\" as ID \"<FirstName>\" as FirstName \"<LastName>\" as LastName and \"<BirthCertificateID>\" as BirthCertificateID and the request overwrites the record with given \"<updatedID>\" as ID \"<updatedFirstName>\" as FirstName \"<updatedLastName>\" as LastName and \"<updatedBirthCertificateID>\" as BirthCertificateID"
                    },
                    {
                      "id": "d92b7934-ee6a-493b-b289-ca761a03359c",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "The response from /data/{registryname}/{versionnumber}/update is received"
                    },
                    {
                      "id": "2fa82393-f2a9-45b3-8e6f-64ef06c3aec9",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "d36e71cd-4a57-48f4-9b1d-872ec7feb5bf",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200"
                    }
                  ],
                  "examples": [
                    {
                      "id": "b4c8421f-d719-4632-860e-df9dfed370e3",
                      "tags": [],
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "",
                      "description": "",
                      "tableHeader": {
                        "id": "bb5d94bf-3bcd-40b3-8d8f-dd3755442cc6",
                        "location": {
                          "line": 24,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 24,
                              "column": 7
                            },
                            "value": "ID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 26
                            },
                            "value": "FirstName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 38
                            },
                            "value": "LastName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 49
                            },
                            "value": "BirthCertificateID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 70
                            },
                            "value": "updatedID"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 89
                            },
                            "value": "updatedFirstName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 108
                            },
                            "value": "updatedLastName"
                          },
                          {
                            "location": {
                              "line": 24,
                              "column": 126
                            },
                            "value": "updatedBirthCertificateID"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "17860525-f7f3-4250-b77c-15d73768383b",
                          "location": {
                            "line": 25,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 25,
                                "column": 7
                              },
                              "value": "EE34462734834865"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 26
                              },
                              "value": "Alex"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 38
                              },
                              "value": "Green"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 49
                              },
                              "value": "RR-441124937"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 70
                              },
                              "value": "EE34462734834865"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 89
                              },
                              "value": "Jack"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 108
                              },
                              "value": "Black"
                            },
                            {
                              "location": {
                                "line": 25,
                                "column": 126
                              },
                              "value": "RR-1234567880"
                            }
                          ]
                        },
                        {
                          "id": "88e91278-4aee-4bc3-bc0b-e7b1b2947821",
                          "location": {
                            "line": 26,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 26,
                                "column": 7
                              },
                              "value": "EE61287673487865"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 26
                              },
                              "value": "Alise"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 38
                              },
                              "value": "Black"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 49
                              },
                              "value": "RR-49075937"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 70
                              },
                              "value": "EE61287673487865"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 89
                              },
                              "value": "John"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 108
                              },
                              "value": "Redwood"
                            },
                            {
                              "location": {
                                "line": 26,
                                "column": 126
                              },
                              "value": "RR-1234567888"
                            }
                          ]
                        },
                        {
                          "id": "d74b8304-9712-4a40-b617-12b02227b844",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "EE6534523487865"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 26
                              },
                              "value": "Zyra"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 38
                              },
                              "value": "Blue"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 49
                              },
                              "value": "RR-24523937"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 70
                              },
                              "value": "EE6534523487865"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 89
                              },
                              "value": "Bob"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 108
                              },
                              "value": "Rack"
                            },
                            {
                              "location": {
                                "line": 27,
                                "column": 126
                              },
                              "value": "RR-1234567887"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/data_update.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 795000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 795000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 31338
              },
              "status": "PASSED"
            },
            "text": "User wants to update an existing record in the database",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ddb"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 795000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 799000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4143944
              },
              "status": "PASSED"
            },
            "text": "PUT request to update a record in the database is sent with given path params \"registryname\" as registryname and \"111\" as versionnumber",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ddc"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 799000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 804000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4283647
              },
              "status": "PASSED"
            },
            "text": "The request contains a payload with given \"EE6534523487865\" as ID \"Zyra\" as FirstName \"Blue\" as LastName and \"RR-24523937\" as BirthCertificateID and the request overwrites the record with given \"EE6534523487865\" as ID \"Bob\" as FirstName \"Rack\" as LastName and \"RR-1234567887\" as BirthCertificateID",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ddd"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 804000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 808000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4058748
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update is received",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dde"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 808000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 808000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 43551
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ddf"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 808000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 808000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 41709
              },
              "status": "PASSED"
            },
            "text": "The response from /data/{registryname}/{versionnumber}/update should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89de0"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "35f32c25-bd54-4e10-987d-c18fdfe457ea",
          "id": "338083fd-a71d-485b-a256-9e40a4c16a42",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 795000000
          }
        },
        "finish": {
          "testCaseStartedId": "338083fd-a71d-485b-a256-9e40a4c16a42",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 809000000
          },
          "willBeRetried": false
        },
        "name": "Successfully updates a record in the registry database",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89dda"
        }
      },
      {
        "source": {
          "data": "@method=DELETE @endpoint=/database/{id}\nFeature: API endpoint that allows user to delete database schema\n\n\n  Scenario: User successfully deletes the Digital Registries schema smoke type test\n\n    Given User wants to delete the Digital Registries schema\n    When The DELETE request with given Information-Mediator-Client header and \"75858\" as id is sent\n    Then User receives a response from the DELETE /database/id endpoint\n    And The DELETE /database/id endpoint response should be returned in a timely manner 15000ms\n    And The DELETE /database/id endpoint response should have status 200\n    And The DELETE /database/id endpoint response should have content-type: application/json header\n    And The DELETE /database/id endpoint response should match json schema\n\n\n  Scenario Outline: User successfully deletes the Digital Registries schema\n\n    Given User wants to delete the Digital Registries schema\n    When The DELETE request with given Information-Mediator-Client header and \"<id>\" as id is sent\n    Then User receives a response from the DELETE /database/id endpoint\n    And The DELETE /database/id endpoint response should be returned in a timely manner 15000ms\n    And The DELETE /database/id endpoint response should have content-type: application/json header\n    And The DELETE /database/id endpoint response should match json schema\n    And The DELETE /database/id endpoint response should have body \"Success\"\n\n    Examples: Valid data\n    | id     |\n    | 6745   |\n    | 896756 |\n    | 234234 |\n",
          "uri": "features/db_delete.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=DELETE",
                "id": "25531d9b-c244-4669-aad6-3c5f3dc78944"
              },
              {
                "location": {
                  "line": 1,
                  "column": 16
                },
                "name": "@endpoint=/database/{id}",
                "id": "b4c53366-16a9-4b4f-bb9b-04074fefde18"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows user to delete database schema",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "61347fc6-7f0e-4d9f-90cb-48967374d874",
                  "tags": [],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User successfully deletes the Digital Registries schema smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "b4599df9-2838-4489-9726-e42955fb243b",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to delete the Digital Registries schema"
                    },
                    {
                      "id": "926fb3a1-6f7e-49fe-b861-70caf3a9d737",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "The DELETE request with given Information-Mediator-Client header and \"75858\" as id is sent"
                    },
                    {
                      "id": "ba106a7c-8e3a-47e9-8b55-f288bcb7fc73",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the DELETE /database/id endpoint"
                    },
                    {
                      "id": "d515af2c-26cf-4e40-80ef-d43ad55b2475",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "816cc4e4-2882-4367-8b6b-2f88556086b3",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "51eb14b1-079a-4db0-97eb-b4359bbd24b6",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "0d444cd2-9f27-4431-89c0-fc99820c52d7",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "857bf232-52f7-423b-954a-4915ddf6206f",
                  "tags": [],
                  "location": {
                    "line": 16,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User successfully deletes the Digital Registries schema",
                  "description": "",
                  "steps": [
                    {
                      "id": "1290fcf0-46fe-4000-bd6b-846f00d76f31",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to delete the Digital Registries schema"
                    },
                    {
                      "id": "40816af1-3638-492a-bad6-aea05744ae82",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "The DELETE request with given Information-Mediator-Client header and \"<id>\" as id is sent"
                    },
                    {
                      "id": "813df602-b64d-492e-ade7-a219306da5dd",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the DELETE /database/id endpoint"
                    },
                    {
                      "id": "49448cd6-6176-41f0-81d0-43a20eac0e24",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "4158ee04-6afa-4cae-8855-9d139da46bec",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "1249c1c0-e771-4601-aa78-fa9d870253d8",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should match json schema"
                    },
                    {
                      "id": "156b63ad-4821-46fb-9250-67e2058f2595",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have body \"Success\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "99c6f249-ea9c-4196-9ff9-b5fbe29d3305",
                      "tags": [],
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "9a597332-6866-4c3d-97cd-ea808159f420",
                        "location": {
                          "line": 27,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 27,
                              "column": 7
                            },
                            "value": "id"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "09d0cacb-5092-4196-b77a-e104812c28bc",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "6745"
                            }
                          ]
                        },
                        {
                          "id": "a944ad10-d699-4288-9e4b-3471588e9d1c",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "896756"
                            }
                          ]
                        },
                        {
                          "id": "00912cba-fe77-4224-8f19-0829bc6091f1",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "234234"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/db_delete.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 809000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 809000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 47576
              },
              "status": "PASSED"
            },
            "text": "User wants to delete the Digital Registries schema",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89de2"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 809000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 814000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4314673
              },
              "status": "PASSED"
            },
            "text": "The DELETE request with given Information-Mediator-Client header and \"75858\" as id is sent",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89de3"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 814000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 818000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3907792
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the DELETE /database/id endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89de4"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 818000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 818000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 77821
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89de5"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 819000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 819000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 79639
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89de6"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 819000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 819000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 115390
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89de7"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 819000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 819000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 180095
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89de8"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "70fcd47c-2781-4766-8dd9-f0dd220cee3b",
          "id": "9d54b487-15b5-4a79-915e-e7d6a8cdd91b",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 809000000
          }
        },
        "finish": {
          "testCaseStartedId": "9d54b487-15b5-4a79-915e-e7d6a8cdd91b",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 820000000
          },
          "willBeRetried": false
        },
        "name": "User successfully deletes the Digital Registries schema smoke type test",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89de1"
        }
      },
      {
        "source": {
          "data": "@method=DELETE @endpoint=/database/{id}\nFeature: API endpoint that allows user to delete database schema\n\n\n  Scenario: User successfully deletes the Digital Registries schema smoke type test\n\n    Given User wants to delete the Digital Registries schema\n    When The DELETE request with given Information-Mediator-Client header and \"75858\" as id is sent\n    Then User receives a response from the DELETE /database/id endpoint\n    And The DELETE /database/id endpoint response should be returned in a timely manner 15000ms\n    And The DELETE /database/id endpoint response should have status 200\n    And The DELETE /database/id endpoint response should have content-type: application/json header\n    And The DELETE /database/id endpoint response should match json schema\n\n\n  Scenario Outline: User successfully deletes the Digital Registries schema\n\n    Given User wants to delete the Digital Registries schema\n    When The DELETE request with given Information-Mediator-Client header and \"<id>\" as id is sent\n    Then User receives a response from the DELETE /database/id endpoint\n    And The DELETE /database/id endpoint response should be returned in a timely manner 15000ms\n    And The DELETE /database/id endpoint response should have content-type: application/json header\n    And The DELETE /database/id endpoint response should match json schema\n    And The DELETE /database/id endpoint response should have body \"Success\"\n\n    Examples: Valid data\n    | id     |\n    | 6745   |\n    | 896756 |\n    | 234234 |\n",
          "uri": "features/db_delete.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=DELETE",
                "id": "25531d9b-c244-4669-aad6-3c5f3dc78944"
              },
              {
                "location": {
                  "line": 1,
                  "column": 16
                },
                "name": "@endpoint=/database/{id}",
                "id": "b4c53366-16a9-4b4f-bb9b-04074fefde18"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows user to delete database schema",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "61347fc6-7f0e-4d9f-90cb-48967374d874",
                  "tags": [],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User successfully deletes the Digital Registries schema smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "b4599df9-2838-4489-9726-e42955fb243b",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to delete the Digital Registries schema"
                    },
                    {
                      "id": "926fb3a1-6f7e-49fe-b861-70caf3a9d737",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "The DELETE request with given Information-Mediator-Client header and \"75858\" as id is sent"
                    },
                    {
                      "id": "ba106a7c-8e3a-47e9-8b55-f288bcb7fc73",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the DELETE /database/id endpoint"
                    },
                    {
                      "id": "d515af2c-26cf-4e40-80ef-d43ad55b2475",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "816cc4e4-2882-4367-8b6b-2f88556086b3",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "51eb14b1-079a-4db0-97eb-b4359bbd24b6",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "0d444cd2-9f27-4431-89c0-fc99820c52d7",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "857bf232-52f7-423b-954a-4915ddf6206f",
                  "tags": [],
                  "location": {
                    "line": 16,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User successfully deletes the Digital Registries schema",
                  "description": "",
                  "steps": [
                    {
                      "id": "1290fcf0-46fe-4000-bd6b-846f00d76f31",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to delete the Digital Registries schema"
                    },
                    {
                      "id": "40816af1-3638-492a-bad6-aea05744ae82",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "The DELETE request with given Information-Mediator-Client header and \"<id>\" as id is sent"
                    },
                    {
                      "id": "813df602-b64d-492e-ade7-a219306da5dd",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the DELETE /database/id endpoint"
                    },
                    {
                      "id": "49448cd6-6176-41f0-81d0-43a20eac0e24",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "4158ee04-6afa-4cae-8855-9d139da46bec",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "1249c1c0-e771-4601-aa78-fa9d870253d8",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should match json schema"
                    },
                    {
                      "id": "156b63ad-4821-46fb-9250-67e2058f2595",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have body \"Success\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "99c6f249-ea9c-4196-9ff9-b5fbe29d3305",
                      "tags": [],
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "9a597332-6866-4c3d-97cd-ea808159f420",
                        "location": {
                          "line": 27,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 27,
                              "column": 7
                            },
                            "value": "id"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "09d0cacb-5092-4196-b77a-e104812c28bc",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "6745"
                            }
                          ]
                        },
                        {
                          "id": "a944ad10-d699-4288-9e4b-3471588e9d1c",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "896756"
                            }
                          ]
                        },
                        {
                          "id": "00912cba-fe77-4224-8f19-0829bc6091f1",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "234234"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/db_delete.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 820000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 820000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 30297
              },
              "status": "PASSED"
            },
            "text": "User wants to delete the Digital Registries schema",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dea"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 820000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 824000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4170421
              },
              "status": "PASSED"
            },
            "text": "The DELETE request with given Information-Mediator-Client header and \"6745\" as id is sent",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89deb"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 825000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 828000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3895726
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the DELETE /database/id endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dec"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 829000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 829000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 41700
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89ded"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 829000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 829000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 34075
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dee"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 829000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 829000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 112433
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89def"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 829000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 830000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 536884
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should have body \"Success\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89df0"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "663d2518-a095-4d34-a733-752e4f4a010d",
          "id": "07c0038d-4769-493a-9614-2cf41ca1cda4",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 820000000
          }
        },
        "finish": {
          "testCaseStartedId": "07c0038d-4769-493a-9614-2cf41ca1cda4",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 830000000
          },
          "willBeRetried": false
        },
        "name": "User successfully deletes the Digital Registries schema",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89de9"
        }
      },
      {
        "source": {
          "data": "@method=DELETE @endpoint=/database/{id}\nFeature: API endpoint that allows user to delete database schema\n\n\n  Scenario: User successfully deletes the Digital Registries schema smoke type test\n\n    Given User wants to delete the Digital Registries schema\n    When The DELETE request with given Information-Mediator-Client header and \"75858\" as id is sent\n    Then User receives a response from the DELETE /database/id endpoint\n    And The DELETE /database/id endpoint response should be returned in a timely manner 15000ms\n    And The DELETE /database/id endpoint response should have status 200\n    And The DELETE /database/id endpoint response should have content-type: application/json header\n    And The DELETE /database/id endpoint response should match json schema\n\n\n  Scenario Outline: User successfully deletes the Digital Registries schema\n\n    Given User wants to delete the Digital Registries schema\n    When The DELETE request with given Information-Mediator-Client header and \"<id>\" as id is sent\n    Then User receives a response from the DELETE /database/id endpoint\n    And The DELETE /database/id endpoint response should be returned in a timely manner 15000ms\n    And The DELETE /database/id endpoint response should have content-type: application/json header\n    And The DELETE /database/id endpoint response should match json schema\n    And The DELETE /database/id endpoint response should have body \"Success\"\n\n    Examples: Valid data\n    | id     |\n    | 6745   |\n    | 896756 |\n    | 234234 |\n",
          "uri": "features/db_delete.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=DELETE",
                "id": "25531d9b-c244-4669-aad6-3c5f3dc78944"
              },
              {
                "location": {
                  "line": 1,
                  "column": 16
                },
                "name": "@endpoint=/database/{id}",
                "id": "b4c53366-16a9-4b4f-bb9b-04074fefde18"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows user to delete database schema",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "61347fc6-7f0e-4d9f-90cb-48967374d874",
                  "tags": [],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User successfully deletes the Digital Registries schema smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "b4599df9-2838-4489-9726-e42955fb243b",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to delete the Digital Registries schema"
                    },
                    {
                      "id": "926fb3a1-6f7e-49fe-b861-70caf3a9d737",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "The DELETE request with given Information-Mediator-Client header and \"75858\" as id is sent"
                    },
                    {
                      "id": "ba106a7c-8e3a-47e9-8b55-f288bcb7fc73",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the DELETE /database/id endpoint"
                    },
                    {
                      "id": "d515af2c-26cf-4e40-80ef-d43ad55b2475",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "816cc4e4-2882-4367-8b6b-2f88556086b3",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "51eb14b1-079a-4db0-97eb-b4359bbd24b6",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "0d444cd2-9f27-4431-89c0-fc99820c52d7",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "857bf232-52f7-423b-954a-4915ddf6206f",
                  "tags": [],
                  "location": {
                    "line": 16,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User successfully deletes the Digital Registries schema",
                  "description": "",
                  "steps": [
                    {
                      "id": "1290fcf0-46fe-4000-bd6b-846f00d76f31",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to delete the Digital Registries schema"
                    },
                    {
                      "id": "40816af1-3638-492a-bad6-aea05744ae82",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "The DELETE request with given Information-Mediator-Client header and \"<id>\" as id is sent"
                    },
                    {
                      "id": "813df602-b64d-492e-ade7-a219306da5dd",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the DELETE /database/id endpoint"
                    },
                    {
                      "id": "49448cd6-6176-41f0-81d0-43a20eac0e24",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "4158ee04-6afa-4cae-8855-9d139da46bec",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "1249c1c0-e771-4601-aa78-fa9d870253d8",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should match json schema"
                    },
                    {
                      "id": "156b63ad-4821-46fb-9250-67e2058f2595",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have body \"Success\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "99c6f249-ea9c-4196-9ff9-b5fbe29d3305",
                      "tags": [],
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "9a597332-6866-4c3d-97cd-ea808159f420",
                        "location": {
                          "line": 27,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 27,
                              "column": 7
                            },
                            "value": "id"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "09d0cacb-5092-4196-b77a-e104812c28bc",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "6745"
                            }
                          ]
                        },
                        {
                          "id": "a944ad10-d699-4288-9e4b-3471588e9d1c",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "896756"
                            }
                          ]
                        },
                        {
                          "id": "00912cba-fe77-4224-8f19-0829bc6091f1",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "234234"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/db_delete.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 830000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 830000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 23833
              },
              "status": "PASSED"
            },
            "text": "User wants to delete the Digital Registries schema",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89df2"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 830000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 834000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3914999
              },
              "status": "PASSED"
            },
            "text": "The DELETE request with given Information-Mediator-Client header and \"896756\" as id is sent",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89df3"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 834000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 837000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 2854999
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the DELETE /database/id endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89df4"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 838000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 838000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 53587
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89df5"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 838000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 838000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 37925
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89df6"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 839000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 839000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 152991
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89df7"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 839000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 839000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 68245
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should have body \"Success\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89df8"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "6e60247c-6e0c-4c70-be6c-79292e1efc5d",
          "id": "f238b8bf-6cd7-4e56-9ca4-e7b9096cce74",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 830000000
          }
        },
        "finish": {
          "testCaseStartedId": "f238b8bf-6cd7-4e56-9ca4-e7b9096cce74",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 840000000
          },
          "willBeRetried": false
        },
        "name": "User successfully deletes the Digital Registries schema",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89df1"
        }
      },
      {
        "source": {
          "data": "@method=DELETE @endpoint=/database/{id}\nFeature: API endpoint that allows user to delete database schema\n\n\n  Scenario: User successfully deletes the Digital Registries schema smoke type test\n\n    Given User wants to delete the Digital Registries schema\n    When The DELETE request with given Information-Mediator-Client header and \"75858\" as id is sent\n    Then User receives a response from the DELETE /database/id endpoint\n    And The DELETE /database/id endpoint response should be returned in a timely manner 15000ms\n    And The DELETE /database/id endpoint response should have status 200\n    And The DELETE /database/id endpoint response should have content-type: application/json header\n    And The DELETE /database/id endpoint response should match json schema\n\n\n  Scenario Outline: User successfully deletes the Digital Registries schema\n\n    Given User wants to delete the Digital Registries schema\n    When The DELETE request with given Information-Mediator-Client header and \"<id>\" as id is sent\n    Then User receives a response from the DELETE /database/id endpoint\n    And The DELETE /database/id endpoint response should be returned in a timely manner 15000ms\n    And The DELETE /database/id endpoint response should have content-type: application/json header\n    And The DELETE /database/id endpoint response should match json schema\n    And The DELETE /database/id endpoint response should have body \"Success\"\n\n    Examples: Valid data\n    | id     |\n    | 6745   |\n    | 896756 |\n    | 234234 |\n",
          "uri": "features/db_delete.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=DELETE",
                "id": "25531d9b-c244-4669-aad6-3c5f3dc78944"
              },
              {
                "location": {
                  "line": 1,
                  "column": 16
                },
                "name": "@endpoint=/database/{id}",
                "id": "b4c53366-16a9-4b4f-bb9b-04074fefde18"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows user to delete database schema",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "61347fc6-7f0e-4d9f-90cb-48967374d874",
                  "tags": [],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User successfully deletes the Digital Registries schema smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "b4599df9-2838-4489-9726-e42955fb243b",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to delete the Digital Registries schema"
                    },
                    {
                      "id": "926fb3a1-6f7e-49fe-b861-70caf3a9d737",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "The DELETE request with given Information-Mediator-Client header and \"75858\" as id is sent"
                    },
                    {
                      "id": "ba106a7c-8e3a-47e9-8b55-f288bcb7fc73",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the DELETE /database/id endpoint"
                    },
                    {
                      "id": "d515af2c-26cf-4e40-80ef-d43ad55b2475",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "816cc4e4-2882-4367-8b6b-2f88556086b3",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "51eb14b1-079a-4db0-97eb-b4359bbd24b6",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "0d444cd2-9f27-4431-89c0-fc99820c52d7",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "857bf232-52f7-423b-954a-4915ddf6206f",
                  "tags": [],
                  "location": {
                    "line": 16,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User successfully deletes the Digital Registries schema",
                  "description": "",
                  "steps": [
                    {
                      "id": "1290fcf0-46fe-4000-bd6b-846f00d76f31",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to delete the Digital Registries schema"
                    },
                    {
                      "id": "40816af1-3638-492a-bad6-aea05744ae82",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "The DELETE request with given Information-Mediator-Client header and \"<id>\" as id is sent"
                    },
                    {
                      "id": "813df602-b64d-492e-ade7-a219306da5dd",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the DELETE /database/id endpoint"
                    },
                    {
                      "id": "49448cd6-6176-41f0-81d0-43a20eac0e24",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "4158ee04-6afa-4cae-8855-9d139da46bec",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "1249c1c0-e771-4601-aa78-fa9d870253d8",
                      "location": {
                        "line": 23,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should match json schema"
                    },
                    {
                      "id": "156b63ad-4821-46fb-9250-67e2058f2595",
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The DELETE /database/id endpoint response should have body \"Success\""
                    }
                  ],
                  "examples": [
                    {
                      "id": "99c6f249-ea9c-4196-9ff9-b5fbe29d3305",
                      "tags": [],
                      "location": {
                        "line": 26,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "9a597332-6866-4c3d-97cd-ea808159f420",
                        "location": {
                          "line": 27,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 27,
                              "column": 7
                            },
                            "value": "id"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "09d0cacb-5092-4196-b77a-e104812c28bc",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "6745"
                            }
                          ]
                        },
                        {
                          "id": "a944ad10-d699-4288-9e4b-3471588e9d1c",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "896756"
                            }
                          ]
                        },
                        {
                          "id": "00912cba-fe77-4224-8f19-0829bc6091f1",
                          "location": {
                            "line": 30,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 30,
                                "column": 7
                              },
                              "value": "234234"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/db_delete.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 841000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 841000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 36145
              },
              "status": "PASSED"
            },
            "text": "User wants to delete the Digital Registries schema",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dfa"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 841000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 846000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4742991
              },
              "status": "PASSED"
            },
            "text": "The DELETE request with given Information-Mediator-Client header and \"234234\" as id is sent",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dfb"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 846000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 850000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4101513
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the DELETE /database/id endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dfc"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 850000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 851000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 40624
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dfd"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 851000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 851000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 31531
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dfe"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 851000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 851000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 113788
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89dff"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 851000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 851000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 46071
              },
              "status": "PASSED"
            },
            "text": "The DELETE /database/id endpoint response should have body \"Success\"",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e00"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "6af33588-f979-4c07-b5d2-80c6bfcc1c9d",
          "id": "3db19a2d-b92a-4831-97b7-e7bc1b1c99e0",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 840000000
          }
        },
        "finish": {
          "testCaseStartedId": "3db19a2d-b92a-4831-97b7-e7bc1b1c99e0",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 851000000
          },
          "willBeRetried": false
        },
        "name": "User successfully deletes the Digital Registries schema",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89df9"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/databases\nFeature: API endpoint that allows user to get information about all databases.\n\n    @smoke @unit @positive\n    Scenario: The user receives information about databases\n      Given User wants to view information about all databases\n      When User sends GET request with given Information-Mediator-Client header\n      Then User receives a response from the /databases endpoint\n      And The /databases endpoint response should be returned in a timely manner 15000ms\n      And The /databases endpoint response should have status 200\n      And The /databases endpoint response should have content-type: application/json header\n      And The /databases endpoint response should match json schema\n",
          "uri": "features/db_list.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "960d35b0-0b12-4944-9a2c-1adf370bcc9a"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/databases",
                "id": "34cb261e-caa8-4252-85ff-8f57ef59ef65"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows user to get information about all databases.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "4c506378-8917-47d3-a592-82fab779e3c4",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 5
                      },
                      "name": "@smoke",
                      "id": "c576b32b-5750-4066-b370-e1c77df7a318"
                    },
                    {
                      "location": {
                        "line": 4,
                        "column": 12
                      },
                      "name": "@unit",
                      "id": "d686ecee-32bb-4e8b-b6ba-0ae3f1dc2c36"
                    },
                    {
                      "location": {
                        "line": 4,
                        "column": 18
                      },
                      "name": "@positive",
                      "id": "a16757bb-10d9-4b53-a390-56e3e308d102"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 5
                  },
                  "keyword": "Scenario",
                  "name": "The user receives information about databases",
                  "description": "",
                  "steps": [
                    {
                      "id": "4720cd37-d917-492f-a5a7-4ea243a3bd9b",
                      "location": {
                        "line": 6,
                        "column": 7
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to view information about all databases"
                    },
                    {
                      "id": "1b6faadd-f03a-42ea-9819-182e68e1f0c2",
                      "location": {
                        "line": 7,
                        "column": 7
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header"
                    },
                    {
                      "id": "ea0f83e6-2bc3-46f9-b875-b4b94a44667d",
                      "location": {
                        "line": 8,
                        "column": 7
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /databases endpoint"
                    },
                    {
                      "id": "bd0ab29c-6bcb-4713-bd14-0f7f81880d85",
                      "location": {
                        "line": 9,
                        "column": 7
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /databases endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "1acf9305-3e7d-45fa-a1df-2399a60dbacb",
                      "location": {
                        "line": 10,
                        "column": 7
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /databases endpoint response should have status 200"
                    },
                    {
                      "id": "7ac8be4d-3af4-4401-8451-ded608a59c8f",
                      "location": {
                        "line": 11,
                        "column": 7
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /databases endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "0174722b-baa7-42ba-928c-2dcfbe8a7aeb",
                      "location": {
                        "line": 12,
                        "column": 7
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /databases endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/db_list.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 851000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 851000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 40691
              },
              "status": "PASSED"
            },
            "text": "User wants to view information about all databases",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e02"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 852000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 862000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 10626940
              },
              "status": "PASSED"
            },
            "text": "User sends GET request with given Information-Mediator-Client header",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e03"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 862000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 868000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5663599
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /databases endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e04"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 868000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 868000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 75050
              },
              "status": "PASSED"
            },
            "text": "The /databases endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e05"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 868000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 868000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 64447
              },
              "status": "PASSED"
            },
            "text": "The /databases endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e06"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 868000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 869000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 59551
              },
              "status": "PASSED"
            },
            "text": "The /databases endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e07"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 869000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 869000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 353170
              },
              "status": "PASSED"
            },
            "text": "The /databases endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e08"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "5beedf5e-15ff-4ce5-96dd-3ebbee625e68",
          "id": "f85398f8-4226-4b8f-ba05-265d7716ae1e",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 851000000
          }
        },
        "finish": {
          "testCaseStartedId": "f85398f8-4226-4b8f-ba05-265d7716ae1e",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 869000000
          },
          "willBeRetried": false
        },
        "name": "The user receives information about databases",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89e01"
        }
      },
      {
        "source": {
          "data": "@method=POST @endpoint=/database/modify\nFeature: API endpoint that allows user to create or modify database schema.\n\n  @smoke @unit @positive\n  Scenario: The user successfully creates a database schema\n\n    Given User wants to create or modify the database schema\n    When User sends POST request with given Information-Mediator-Client header and body\n    Then User receives a response from the /database/modify endpoint\n    And The /database/modify endpoint response should be returned in a timely manner 15000ms\n    And The /database/modify endpoint response should have status 200\n    And The /database/modify endpoint response should have content-type: application/json header\n    And The /database/modify endpoint response should match json schema\n",
          "uri": "features/db_modify.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=POST",
                "id": "f21dbe84-02fc-49a7-896f-61f63677d889"
              },
              {
                "location": {
                  "line": 1,
                  "column": 14
                },
                "name": "@endpoint=/database/modify",
                "id": "44aef178-2823-41e6-bfcf-adc233ff54fa"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows user to create or modify database schema.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "8dfa05e5-eb04-4eb0-9aca-94f2ce4824fc",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "daaa7699-ee84-4235-9e9c-61a091a6d559"
                    },
                    {
                      "location": {
                        "line": 4,
                        "column": 10
                      },
                      "name": "@unit",
                      "id": "35c3c598-fb57-4342-a8de-e0daf27daf21"
                    },
                    {
                      "location": {
                        "line": 4,
                        "column": 16
                      },
                      "name": "@positive",
                      "id": "9b8914fe-4d6d-4237-8e89-1c447c11492b"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "The user successfully creates a database schema",
                  "description": "",
                  "steps": [
                    {
                      "id": "47ea52f5-b588-4878-bd74-96743fd8caa8",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to create or modify the database schema"
                    },
                    {
                      "id": "d45e2a6f-5414-4e49-ba59-14c8cc5efa3e",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends POST request with given Information-Mediator-Client header and body"
                    },
                    {
                      "id": "7eba8ac0-feab-4e48-9537-984c6cc26e1f",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the /database/modify endpoint"
                    },
                    {
                      "id": "d4ab7f45-700d-43c8-9699-6131acf91b34",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /database/modify endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "e632bb47-456b-440a-a009-fae0e3d51068",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /database/modify endpoint response should have status 200"
                    },
                    {
                      "id": "7a7a176f-1a48-42b9-b8ab-126d8611f49f",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /database/modify endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "ad14dd87-919b-43e3-87f8-caca4a7b2ac3",
                      "location": {
                        "line": 13,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The /database/modify endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/db_modify.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 869000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 869000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 51550
              },
              "status": "PASSED"
            },
            "text": "User wants to create or modify the database schema",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e0a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 870000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 874000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4169078
              },
              "status": "PASSED"
            },
            "text": "User sends POST request with given Information-Mediator-Client header and body",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e0b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 874000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 878000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 3982802
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the /database/modify endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e0c"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 878000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 878000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 75062
              },
              "status": "PASSED"
            },
            "text": "The /database/modify endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e0d"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 878000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 878000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 66503
              },
              "status": "PASSED"
            },
            "text": "The /database/modify endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e0e"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 878000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 878000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 61856
              },
              "status": "PASSED"
            },
            "text": "The /database/modify endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e0f"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 878000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 879000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 135545
              },
              "status": "PASSED"
            },
            "text": "The /database/modify endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e10"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "9ae9f39b-cdb8-4c6b-9277-a4955eb14231",
          "id": "82e1b8fe-46fe-43ef-9614-80f112e7169f",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 869000000
          }
        },
        "finish": {
          "testCaseStartedId": "82e1b8fe-46fe-43ef-9614-80f112e7169f",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 879000000
          },
          "willBeRetried": false
        },
        "name": "The user successfully creates a database schema",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89e09"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/database/{id}\nFeature: API endpoint that allows user to get database information with database schema.\n\n  @smoke \n  Scenario: User successfully obtains database information with database schema smoke type test\n    Given User wants to get the database information of Digital Registries with schema version\n    When User sends GET request with given Information-Mediator-Client header and \"1\" as id\n    Then User receives a response from the GET /database/id endpoint\n    And The GET /database/id endpoint response should be returned in a timely manner 15000ms\n    And The GET /database/id endpoint response should have status 200\n    And The GET /database/id endpoint response should have content-type: application/json header\n    And The GET /database/id endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User successfully obtains database information with database schema\n    Given User wants to get the database information of Digital Registries with schema version\n    When User sends GET request with given Information-Mediator-Client header and \"<id>\" as id\n    Then User receives a response from the GET /database/id endpoint\n    And The GET /database/id endpoint response should be returned in a timely manner 15000ms\n    And The GET /database/id endpoint response should have status 200\n    And The GET /database/id endpoint response should have content-type: application/json header\n    And The GET /database/id endpoint response should match json schema\n\n    Examples: Valid data\n    | id         |\n    | 123        |\n    | 8438778473 |\n    | 3287483474 |\n    | 8484848484 |\n",
          "uri": "features/db_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "7b22dd9c-93e2-476e-9149-7ceacf626b05"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/database/{id}",
                "id": "8cec76ca-effe-4cf5-9e39-6088b572394f"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows user to get database information with database schema.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "7b1a78cd-5aeb-4d48-80d8-d226204f832c",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "0e2a6a0e-af65-4d1d-bd93-2d2c1441009e"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User successfully obtains database information with database schema smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "c2280865-664c-4dfb-b5ef-22b167e5e282",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to get the database information of Digital Registries with schema version"
                    },
                    {
                      "id": "92ed41fd-b034-4ba7-a163-96153cd94dab",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header and \"1\" as id"
                    },
                    {
                      "id": "f948ef0d-8796-473e-a260-2e94a2dedda3",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the GET /database/id endpoint"
                    },
                    {
                      "id": "4ce019a2-6602-4945-84c8-cef148772804",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "7763b5ea-d0b2-4f06-857c-f307f44cc71b",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "eb3c6ef0-9992-4786-8ab7-9e69f6bae4ed",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "fd63859b-5ab3-48cc-a8b0-dc8e90e5b9ab",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "c3f8fc22-77e7-4e64-81a6-b14c1ce18295",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "792513a8-765d-41e7-b7d0-189c184e3df3"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "4c3f80d7-5d8d-4cc0-a7a2-cf90b6208742"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User successfully obtains database information with database schema",
                  "description": "",
                  "steps": [
                    {
                      "id": "02f6c608-0078-4c07-8fa4-9a8f04a74c52",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to get the database information of Digital Registries with schema version"
                    },
                    {
                      "id": "da190cef-4426-44af-92e9-ad4daec0ee22",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header and \"<id>\" as id"
                    },
                    {
                      "id": "c866fe8d-3c08-422a-bb7b-7d2ca14da867",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the GET /database/id endpoint"
                    },
                    {
                      "id": "f16840f0-d376-4c87-a11d-da82af91510a",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "ed890bd2-b045-49db-85f8-5466b6ad5be3",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "3d7b0f07-d70d-4e08-a5d2-f046bcc1ea4d",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "41a72d98-0408-47e0-89f9-a23f4442f2ea",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "8806240a-9da7-4d84-b70c-df5a0c2bb4b7",
                      "tags": [],
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "39460a91-2923-4d34-af92-6a0f1248a60b",
                        "location": {
                          "line": 25,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 25,
                              "column": 7
                            },
                            "value": "id"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "0f7c7c71-b17e-4001-876f-9179c5b0a05f",
                          "location": {
                            "line": 26,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 26,
                                "column": 7
                              },
                              "value": "123"
                            }
                          ]
                        },
                        {
                          "id": "369ce0ca-e4b8-4915-9e75-f963d7547170",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "8438778473"
                            }
                          ]
                        },
                        {
                          "id": "cc050470-90be-44b5-9dfb-65e9ad77d379",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "3287483474"
                            }
                          ]
                        },
                        {
                          "id": "08cd18b6-1e95-4563-956f-41e4f1724352",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "8484848484"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/db_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 879000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 879000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 45700
              },
              "status": "PASSED"
            },
            "text": "User wants to get the database information of Digital Registries with schema version",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e12"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 879000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 885000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5598741
              },
              "status": "PASSED"
            },
            "text": "User sends GET request with given Information-Mediator-Client header and \"1\" as id",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e13"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 885000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 895000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 10188026
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the GET /database/id endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e14"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 895000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 895000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 79667
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e15"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 895000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 896000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 79199
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e16"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 896000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 896000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 57019
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e17"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 896000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 896000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 138519
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e18"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "7c4cd237-6fef-4fb0-b3a1-fbf8b69abf1c",
          "id": "a3415c74-d98c-44b2-8da3-9ae586a337c9",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 879000000
          }
        },
        "finish": {
          "testCaseStartedId": "a3415c74-d98c-44b2-8da3-9ae586a337c9",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 896000000
          },
          "willBeRetried": false
        },
        "name": "User successfully obtains database information with database schema smoke type test",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89e11"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/database/{id}\nFeature: API endpoint that allows user to get database information with database schema.\n\n  @smoke \n  Scenario: User successfully obtains database information with database schema smoke type test\n    Given User wants to get the database information of Digital Registries with schema version\n    When User sends GET request with given Information-Mediator-Client header and \"1\" as id\n    Then User receives a response from the GET /database/id endpoint\n    And The GET /database/id endpoint response should be returned in a timely manner 15000ms\n    And The GET /database/id endpoint response should have status 200\n    And The GET /database/id endpoint response should have content-type: application/json header\n    And The GET /database/id endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User successfully obtains database information with database schema\n    Given User wants to get the database information of Digital Registries with schema version\n    When User sends GET request with given Information-Mediator-Client header and \"<id>\" as id\n    Then User receives a response from the GET /database/id endpoint\n    And The GET /database/id endpoint response should be returned in a timely manner 15000ms\n    And The GET /database/id endpoint response should have status 200\n    And The GET /database/id endpoint response should have content-type: application/json header\n    And The GET /database/id endpoint response should match json schema\n\n    Examples: Valid data\n    | id         |\n    | 123        |\n    | 8438778473 |\n    | 3287483474 |\n    | 8484848484 |\n",
          "uri": "features/db_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "7b22dd9c-93e2-476e-9149-7ceacf626b05"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/database/{id}",
                "id": "8cec76ca-effe-4cf5-9e39-6088b572394f"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows user to get database information with database schema.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "7b1a78cd-5aeb-4d48-80d8-d226204f832c",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "0e2a6a0e-af65-4d1d-bd93-2d2c1441009e"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User successfully obtains database information with database schema smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "c2280865-664c-4dfb-b5ef-22b167e5e282",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to get the database information of Digital Registries with schema version"
                    },
                    {
                      "id": "92ed41fd-b034-4ba7-a163-96153cd94dab",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header and \"1\" as id"
                    },
                    {
                      "id": "f948ef0d-8796-473e-a260-2e94a2dedda3",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the GET /database/id endpoint"
                    },
                    {
                      "id": "4ce019a2-6602-4945-84c8-cef148772804",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "7763b5ea-d0b2-4f06-857c-f307f44cc71b",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "eb3c6ef0-9992-4786-8ab7-9e69f6bae4ed",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "fd63859b-5ab3-48cc-a8b0-dc8e90e5b9ab",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "c3f8fc22-77e7-4e64-81a6-b14c1ce18295",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "792513a8-765d-41e7-b7d0-189c184e3df3"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "4c3f80d7-5d8d-4cc0-a7a2-cf90b6208742"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User successfully obtains database information with database schema",
                  "description": "",
                  "steps": [
                    {
                      "id": "02f6c608-0078-4c07-8fa4-9a8f04a74c52",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to get the database information of Digital Registries with schema version"
                    },
                    {
                      "id": "da190cef-4426-44af-92e9-ad4daec0ee22",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header and \"<id>\" as id"
                    },
                    {
                      "id": "c866fe8d-3c08-422a-bb7b-7d2ca14da867",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the GET /database/id endpoint"
                    },
                    {
                      "id": "f16840f0-d376-4c87-a11d-da82af91510a",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "ed890bd2-b045-49db-85f8-5466b6ad5be3",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "3d7b0f07-d70d-4e08-a5d2-f046bcc1ea4d",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "41a72d98-0408-47e0-89f9-a23f4442f2ea",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "8806240a-9da7-4d84-b70c-df5a0c2bb4b7",
                      "tags": [],
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "39460a91-2923-4d34-af92-6a0f1248a60b",
                        "location": {
                          "line": 25,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 25,
                              "column": 7
                            },
                            "value": "id"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "0f7c7c71-b17e-4001-876f-9179c5b0a05f",
                          "location": {
                            "line": 26,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 26,
                                "column": 7
                              },
                              "value": "123"
                            }
                          ]
                        },
                        {
                          "id": "369ce0ca-e4b8-4915-9e75-f963d7547170",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "8438778473"
                            }
                          ]
                        },
                        {
                          "id": "cc050470-90be-44b5-9dfb-65e9ad77d379",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "3287483474"
                            }
                          ]
                        },
                        {
                          "id": "08cd18b6-1e95-4563-956f-41e4f1724352",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "8484848484"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/db_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 896000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 896000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 21668
              },
              "status": "PASSED"
            },
            "text": "User wants to get the database information of Digital Registries with schema version",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e1a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 897000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 902000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5581131
              },
              "status": "PASSED"
            },
            "text": "User sends GET request with given Information-Mediator-Client header and \"123\" as id",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e1b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 902000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 908000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5726832
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the GET /database/id endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e1c"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 908000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 908000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 53072
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e1d"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 908000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 908000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 41618
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e1e"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 908000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 909000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 39725
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e1f"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 909000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 909000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 130143
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e20"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "a1387d85-0b9a-49f5-9649-3a98efc1417c",
          "id": "51b4518d-8f42-458f-b64a-2e5b1342bcc4",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 896000000
          }
        },
        "finish": {
          "testCaseStartedId": "51b4518d-8f42-458f-b64a-2e5b1342bcc4",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 909000000
          },
          "willBeRetried": false
        },
        "name": "User successfully obtains database information with database schema",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89e19"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/database/{id}\nFeature: API endpoint that allows user to get database information with database schema.\n\n  @smoke \n  Scenario: User successfully obtains database information with database schema smoke type test\n    Given User wants to get the database information of Digital Registries with schema version\n    When User sends GET request with given Information-Mediator-Client header and \"1\" as id\n    Then User receives a response from the GET /database/id endpoint\n    And The GET /database/id endpoint response should be returned in a timely manner 15000ms\n    And The GET /database/id endpoint response should have status 200\n    And The GET /database/id endpoint response should have content-type: application/json header\n    And The GET /database/id endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User successfully obtains database information with database schema\n    Given User wants to get the database information of Digital Registries with schema version\n    When User sends GET request with given Information-Mediator-Client header and \"<id>\" as id\n    Then User receives a response from the GET /database/id endpoint\n    And The GET /database/id endpoint response should be returned in a timely manner 15000ms\n    And The GET /database/id endpoint response should have status 200\n    And The GET /database/id endpoint response should have content-type: application/json header\n    And The GET /database/id endpoint response should match json schema\n\n    Examples: Valid data\n    | id         |\n    | 123        |\n    | 8438778473 |\n    | 3287483474 |\n    | 8484848484 |\n",
          "uri": "features/db_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "7b22dd9c-93e2-476e-9149-7ceacf626b05"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/database/{id}",
                "id": "8cec76ca-effe-4cf5-9e39-6088b572394f"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows user to get database information with database schema.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "7b1a78cd-5aeb-4d48-80d8-d226204f832c",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "0e2a6a0e-af65-4d1d-bd93-2d2c1441009e"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User successfully obtains database information with database schema smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "c2280865-664c-4dfb-b5ef-22b167e5e282",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to get the database information of Digital Registries with schema version"
                    },
                    {
                      "id": "92ed41fd-b034-4ba7-a163-96153cd94dab",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header and \"1\" as id"
                    },
                    {
                      "id": "f948ef0d-8796-473e-a260-2e94a2dedda3",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the GET /database/id endpoint"
                    },
                    {
                      "id": "4ce019a2-6602-4945-84c8-cef148772804",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "7763b5ea-d0b2-4f06-857c-f307f44cc71b",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "eb3c6ef0-9992-4786-8ab7-9e69f6bae4ed",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "fd63859b-5ab3-48cc-a8b0-dc8e90e5b9ab",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "c3f8fc22-77e7-4e64-81a6-b14c1ce18295",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "792513a8-765d-41e7-b7d0-189c184e3df3"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "4c3f80d7-5d8d-4cc0-a7a2-cf90b6208742"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User successfully obtains database information with database schema",
                  "description": "",
                  "steps": [
                    {
                      "id": "02f6c608-0078-4c07-8fa4-9a8f04a74c52",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to get the database information of Digital Registries with schema version"
                    },
                    {
                      "id": "da190cef-4426-44af-92e9-ad4daec0ee22",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header and \"<id>\" as id"
                    },
                    {
                      "id": "c866fe8d-3c08-422a-bb7b-7d2ca14da867",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the GET /database/id endpoint"
                    },
                    {
                      "id": "f16840f0-d376-4c87-a11d-da82af91510a",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "ed890bd2-b045-49db-85f8-5466b6ad5be3",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "3d7b0f07-d70d-4e08-a5d2-f046bcc1ea4d",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "41a72d98-0408-47e0-89f9-a23f4442f2ea",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "8806240a-9da7-4d84-b70c-df5a0c2bb4b7",
                      "tags": [],
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "39460a91-2923-4d34-af92-6a0f1248a60b",
                        "location": {
                          "line": 25,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 25,
                              "column": 7
                            },
                            "value": "id"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "0f7c7c71-b17e-4001-876f-9179c5b0a05f",
                          "location": {
                            "line": 26,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 26,
                                "column": 7
                              },
                              "value": "123"
                            }
                          ]
                        },
                        {
                          "id": "369ce0ca-e4b8-4915-9e75-f963d7547170",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "8438778473"
                            }
                          ]
                        },
                        {
                          "id": "cc050470-90be-44b5-9dfb-65e9ad77d379",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "3287483474"
                            }
                          ]
                        },
                        {
                          "id": "08cd18b6-1e95-4563-956f-41e4f1724352",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "8484848484"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/db_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 909000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 909000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 32120
              },
              "status": "PASSED"
            },
            "text": "User wants to get the database information of Digital Registries with schema version",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e22"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 910000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 919000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 9605654
              },
              "status": "PASSED"
            },
            "text": "User sends GET request with given Information-Mediator-Client header and \"8438778473\" as id",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e23"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 919000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 925000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5833577
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the GET /database/id endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e24"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 925000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 925000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 54994
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e25"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 926000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 926000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 45936
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e26"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 926000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 926000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 29599
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e27"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 926000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 926000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 116244
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e28"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "8c96358e-0bde-4d83-9a18-283dbcc2ff1f",
          "id": "356b8592-4a2b-4605-ba98-e8ce82d1b39f",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 909000000
          }
        },
        "finish": {
          "testCaseStartedId": "356b8592-4a2b-4605-ba98-e8ce82d1b39f",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 926000000
          },
          "willBeRetried": false
        },
        "name": "User successfully obtains database information with database schema",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89e21"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/database/{id}\nFeature: API endpoint that allows user to get database information with database schema.\n\n  @smoke \n  Scenario: User successfully obtains database information with database schema smoke type test\n    Given User wants to get the database information of Digital Registries with schema version\n    When User sends GET request with given Information-Mediator-Client header and \"1\" as id\n    Then User receives a response from the GET /database/id endpoint\n    And The GET /database/id endpoint response should be returned in a timely manner 15000ms\n    And The GET /database/id endpoint response should have status 200\n    And The GET /database/id endpoint response should have content-type: application/json header\n    And The GET /database/id endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User successfully obtains database information with database schema\n    Given User wants to get the database information of Digital Registries with schema version\n    When User sends GET request with given Information-Mediator-Client header and \"<id>\" as id\n    Then User receives a response from the GET /database/id endpoint\n    And The GET /database/id endpoint response should be returned in a timely manner 15000ms\n    And The GET /database/id endpoint response should have status 200\n    And The GET /database/id endpoint response should have content-type: application/json header\n    And The GET /database/id endpoint response should match json schema\n\n    Examples: Valid data\n    | id         |\n    | 123        |\n    | 8438778473 |\n    | 3287483474 |\n    | 8484848484 |\n",
          "uri": "features/db_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "7b22dd9c-93e2-476e-9149-7ceacf626b05"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/database/{id}",
                "id": "8cec76ca-effe-4cf5-9e39-6088b572394f"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows user to get database information with database schema.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "7b1a78cd-5aeb-4d48-80d8-d226204f832c",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "0e2a6a0e-af65-4d1d-bd93-2d2c1441009e"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User successfully obtains database information with database schema smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "c2280865-664c-4dfb-b5ef-22b167e5e282",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to get the database information of Digital Registries with schema version"
                    },
                    {
                      "id": "92ed41fd-b034-4ba7-a163-96153cd94dab",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header and \"1\" as id"
                    },
                    {
                      "id": "f948ef0d-8796-473e-a260-2e94a2dedda3",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the GET /database/id endpoint"
                    },
                    {
                      "id": "4ce019a2-6602-4945-84c8-cef148772804",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "7763b5ea-d0b2-4f06-857c-f307f44cc71b",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "eb3c6ef0-9992-4786-8ab7-9e69f6bae4ed",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "fd63859b-5ab3-48cc-a8b0-dc8e90e5b9ab",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "c3f8fc22-77e7-4e64-81a6-b14c1ce18295",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "792513a8-765d-41e7-b7d0-189c184e3df3"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "4c3f80d7-5d8d-4cc0-a7a2-cf90b6208742"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User successfully obtains database information with database schema",
                  "description": "",
                  "steps": [
                    {
                      "id": "02f6c608-0078-4c07-8fa4-9a8f04a74c52",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to get the database information of Digital Registries with schema version"
                    },
                    {
                      "id": "da190cef-4426-44af-92e9-ad4daec0ee22",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header and \"<id>\" as id"
                    },
                    {
                      "id": "c866fe8d-3c08-422a-bb7b-7d2ca14da867",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the GET /database/id endpoint"
                    },
                    {
                      "id": "f16840f0-d376-4c87-a11d-da82af91510a",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "ed890bd2-b045-49db-85f8-5466b6ad5be3",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "3d7b0f07-d70d-4e08-a5d2-f046bcc1ea4d",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "41a72d98-0408-47e0-89f9-a23f4442f2ea",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "8806240a-9da7-4d84-b70c-df5a0c2bb4b7",
                      "tags": [],
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "39460a91-2923-4d34-af92-6a0f1248a60b",
                        "location": {
                          "line": 25,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 25,
                              "column": 7
                            },
                            "value": "id"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "0f7c7c71-b17e-4001-876f-9179c5b0a05f",
                          "location": {
                            "line": 26,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 26,
                                "column": 7
                              },
                              "value": "123"
                            }
                          ]
                        },
                        {
                          "id": "369ce0ca-e4b8-4915-9e75-f963d7547170",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "8438778473"
                            }
                          ]
                        },
                        {
                          "id": "cc050470-90be-44b5-9dfb-65e9ad77d379",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "3287483474"
                            }
                          ]
                        },
                        {
                          "id": "08cd18b6-1e95-4563-956f-41e4f1724352",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "8484848484"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/db_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 926000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 927000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 27574
              },
              "status": "PASSED"
            },
            "text": "User wants to get the database information of Digital Registries with schema version",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e2a"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 927000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 932000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5594626
              },
              "status": "PASSED"
            },
            "text": "User sends GET request with given Information-Mediator-Client header and \"3287483474\" as id",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e2b"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 932000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 937000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 4867709
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the GET /database/id endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e2c"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 937000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 937000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 41100
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e2d"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 938000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 938000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 47220
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e2e"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 938000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 938000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 30151
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e2f"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 938000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 938000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 103463
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e30"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "432c1193-aab3-4b6c-aa87-241e6bf5f5da",
          "id": "cd76366b-8837-450c-9edf-4cf0733c140c",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 926000000
          }
        },
        "finish": {
          "testCaseStartedId": "cd76366b-8837-450c-9edf-4cf0733c140c",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 938000000
          },
          "willBeRetried": false
        },
        "name": "User successfully obtains database information with database schema",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89e29"
        }
      },
      {
        "source": {
          "data": "@method=GET @endpoint=/database/{id}\nFeature: API endpoint that allows user to get database information with database schema.\n\n  @smoke \n  Scenario: User successfully obtains database information with database schema smoke type test\n    Given User wants to get the database information of Digital Registries with schema version\n    When User sends GET request with given Information-Mediator-Client header and \"1\" as id\n    Then User receives a response from the GET /database/id endpoint\n    And The GET /database/id endpoint response should be returned in a timely manner 15000ms\n    And The GET /database/id endpoint response should have status 200\n    And The GET /database/id endpoint response should have content-type: application/json header\n    And The GET /database/id endpoint response should match json schema\n\n  @unit @positive \n  Scenario Outline: User successfully obtains database information with database schema\n    Given User wants to get the database information of Digital Registries with schema version\n    When User sends GET request with given Information-Mediator-Client header and \"<id>\" as id\n    Then User receives a response from the GET /database/id endpoint\n    And The GET /database/id endpoint response should be returned in a timely manner 15000ms\n    And The GET /database/id endpoint response should have status 200\n    And The GET /database/id endpoint response should have content-type: application/json header\n    And The GET /database/id endpoint response should match json schema\n\n    Examples: Valid data\n    | id         |\n    | 123        |\n    | 8438778473 |\n    | 3287483474 |\n    | 8484848484 |\n",
          "uri": "features/db_read.feature",
          "mediaType": "text/x.cucumber.gherkin+plain"
        },
        "gherkinDocument": {
          "feature": {
            "tags": [
              {
                "location": {
                  "line": 1,
                  "column": 1
                },
                "name": "@method=GET",
                "id": "7b22dd9c-93e2-476e-9149-7ceacf626b05"
              },
              {
                "location": {
                  "line": 1,
                  "column": 13
                },
                "name": "@endpoint=/database/{id}",
                "id": "8cec76ca-effe-4cf5-9e39-6088b572394f"
              }
            ],
            "location": {
              "line": 2,
              "column": 1
            },
            "language": "en",
            "keyword": "Feature",
            "name": "API endpoint that allows user to get database information with database schema.",
            "description": "",
            "children": [
              {
                "scenario": {
                  "id": "7b1a78cd-5aeb-4d48-80d8-d226204f832c",
                  "tags": [
                    {
                      "location": {
                        "line": 4,
                        "column": 3
                      },
                      "name": "@smoke",
                      "id": "0e2a6a0e-af65-4d1d-bd93-2d2c1441009e"
                    }
                  ],
                  "location": {
                    "line": 5,
                    "column": 3
                  },
                  "keyword": "Scenario",
                  "name": "User successfully obtains database information with database schema smoke type test",
                  "description": "",
                  "steps": [
                    {
                      "id": "c2280865-664c-4dfb-b5ef-22b167e5e282",
                      "location": {
                        "line": 6,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to get the database information of Digital Registries with schema version"
                    },
                    {
                      "id": "92ed41fd-b034-4ba7-a163-96153cd94dab",
                      "location": {
                        "line": 7,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header and \"1\" as id"
                    },
                    {
                      "id": "f948ef0d-8796-473e-a260-2e94a2dedda3",
                      "location": {
                        "line": 8,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the GET /database/id endpoint"
                    },
                    {
                      "id": "4ce019a2-6602-4945-84c8-cef148772804",
                      "location": {
                        "line": 9,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "7763b5ea-d0b2-4f06-857c-f307f44cc71b",
                      "location": {
                        "line": 10,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "eb3c6ef0-9992-4786-8ab7-9e69f6bae4ed",
                      "location": {
                        "line": 11,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "fd63859b-5ab3-48cc-a8b0-dc8e90e5b9ab",
                      "location": {
                        "line": 12,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": []
                }
              },
              {
                "scenario": {
                  "id": "c3f8fc22-77e7-4e64-81a6-b14c1ce18295",
                  "tags": [
                    {
                      "location": {
                        "line": 14,
                        "column": 3
                      },
                      "name": "@unit",
                      "id": "792513a8-765d-41e7-b7d0-189c184e3df3"
                    },
                    {
                      "location": {
                        "line": 14,
                        "column": 9
                      },
                      "name": "@positive",
                      "id": "4c3f80d7-5d8d-4cc0-a7a2-cf90b6208742"
                    }
                  ],
                  "location": {
                    "line": 15,
                    "column": 3
                  },
                  "keyword": "Scenario Outline",
                  "name": "User successfully obtains database information with database schema",
                  "description": "",
                  "steps": [
                    {
                      "id": "02f6c608-0078-4c07-8fa4-9a8f04a74c52",
                      "location": {
                        "line": 16,
                        "column": 5
                      },
                      "keyword": "Given ",
                      "keywordType": "Context",
                      "text": "User wants to get the database information of Digital Registries with schema version"
                    },
                    {
                      "id": "da190cef-4426-44af-92e9-ad4daec0ee22",
                      "location": {
                        "line": 17,
                        "column": 5
                      },
                      "keyword": "When ",
                      "keywordType": "Action",
                      "text": "User sends GET request with given Information-Mediator-Client header and \"<id>\" as id"
                    },
                    {
                      "id": "c866fe8d-3c08-422a-bb7b-7d2ca14da867",
                      "location": {
                        "line": 18,
                        "column": 5
                      },
                      "keyword": "Then ",
                      "keywordType": "Outcome",
                      "text": "User receives a response from the GET /database/id endpoint"
                    },
                    {
                      "id": "f16840f0-d376-4c87-a11d-da82af91510a",
                      "location": {
                        "line": 19,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms"
                    },
                    {
                      "id": "ed890bd2-b045-49db-85f8-5466b6ad5be3",
                      "location": {
                        "line": 20,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have status 200"
                    },
                    {
                      "id": "3d7b0f07-d70d-4e08-a5d2-f046bcc1ea4d",
                      "location": {
                        "line": 21,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should have content-type: application/json header"
                    },
                    {
                      "id": "41a72d98-0408-47e0-89f9-a23f4442f2ea",
                      "location": {
                        "line": 22,
                        "column": 5
                      },
                      "keyword": "And ",
                      "keywordType": "Conjunction",
                      "text": "The GET /database/id endpoint response should match json schema"
                    }
                  ],
                  "examples": [
                    {
                      "id": "8806240a-9da7-4d84-b70c-df5a0c2bb4b7",
                      "tags": [],
                      "location": {
                        "line": 24,
                        "column": 5
                      },
                      "keyword": "Examples",
                      "name": "Valid data",
                      "description": "",
                      "tableHeader": {
                        "id": "39460a91-2923-4d34-af92-6a0f1248a60b",
                        "location": {
                          "line": 25,
                          "column": 5
                        },
                        "cells": [
                          {
                            "location": {
                              "line": 25,
                              "column": 7
                            },
                            "value": "id"
                          }
                        ]
                      },
                      "tableBody": [
                        {
                          "id": "0f7c7c71-b17e-4001-876f-9179c5b0a05f",
                          "location": {
                            "line": 26,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 26,
                                "column": 7
                              },
                              "value": "123"
                            }
                          ]
                        },
                        {
                          "id": "369ce0ca-e4b8-4915-9e75-f963d7547170",
                          "location": {
                            "line": 27,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 27,
                                "column": 7
                              },
                              "value": "8438778473"
                            }
                          ]
                        },
                        {
                          "id": "cc050470-90be-44b5-9dfb-65e9ad77d379",
                          "location": {
                            "line": 28,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 28,
                                "column": 7
                              },
                              "value": "3287483474"
                            }
                          ]
                        },
                        {
                          "id": "08cd18b6-1e95-4563-956f-41e4f1724352",
                          "location": {
                            "line": 29,
                            "column": 5
                          },
                          "cells": [
                            {
                              "location": {
                                "line": 29,
                                "column": 7
                              },
                              "value": "8484848484"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "comments": [],
          "uri": "features/db_read.feature"
        },
        "steps": [
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 938000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 938000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 24527
              },
              "status": "PASSED"
            },
            "text": "User wants to get the database information of Digital Registries with schema version",
            "type": "Context",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e32"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 939000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 945000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 6444011
              },
              "status": "PASSED"
            },
            "text": "User sends GET request with given Information-Mediator-Client header and \"8484848484\" as id",
            "type": "Action",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e33"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 945000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 951000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 5936192
              },
              "status": "PASSED"
            },
            "text": "User receives a response from the GET /database/id endpoint",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e34"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 951000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 951000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 44756
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should be returned in a timely manner 15000ms",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e35"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 951000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 951000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 35275
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should have status 200",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e36"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 952000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 952000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 40884
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should have content-type: application/json header",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e37"
            }
          },
          {
            "start": {
              "seconds": 1694113488,
              "nanos": 952000000
            },
            "finish": {
              "seconds": 1694113488,
              "nanos": 952000000
            },
            "result": {
              "duration": {
                "seconds": 0,
                "nanos": 129102
              },
              "status": "PASSED"
            },
            "text": "The GET /database/id endpoint response should match json schema",
            "type": "Outcome",
            "_id": {
              "$oid": "64fa1ed38a8d698362d89e38"
            }
          }
        ],
        "start": {
          "attempt": 0,
          "testCaseId": "cd41081d-b405-4d8e-a14d-bd700c968ae8",
          "id": "29ee5d68-b6d1-4e0a-b3eb-3a116b2c3775",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 938000000
          }
        },
        "finish": {
          "testCaseStartedId": "29ee5d68-b6d1-4e0a-b3eb-3a116b2c3775",
          "timestamp": {
            "seconds": 1694113488,
            "nanos": 952000000
          },
          "willBeRetried": false
        },
        "name": "User successfully obtains database information with database schema",
        "passed": true,
        "_id": {
          "$oid": "64fa1ed38a8d698362d89e31"
        }
      }
    ],
    "saveTime": {
      "$numberLong": "1694113491796"
    },
    "buildingBlock": "bb-digital-registries",
    "testSuite": "openAPI",
    "testApp": "mockoon",
    "sourceBranch": "main",
    "version": "v7.3.121",
    "__v": 0
  }]